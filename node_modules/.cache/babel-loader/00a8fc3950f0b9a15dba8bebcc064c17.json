{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/batch\n */\nimport { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * A batch instance groups model changes ({@link module:engine/model/operation/operation~Operation operations}). All operations\n * grouped in a single batch can be reverted together, so you can also think about a batch as of a single undo step. If you want\n * to extend a given undo step, you can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n *\t\tmodel.enqueueChange( batch, writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\nexport default class Batch {\n  /**\n   * Creates a batch instance.\n   *\n   * @see module:engine/model/model~Model#enqueueChange\n   * @see module:engine/model/model~Model#change\n   * @param {Object} [type] A set of flags that specify the type of the batch. Batch type can alter how some of the features work\n   * when encountering a given `Batch` instance (for example, when a feature listens to applied operations).\n   * @param {Boolean} [type.isUndoable=true] Whether a batch can be undone through undo feature.\n   * @param {Boolean} [type.isLocal=true] Whether a batch includes operations created locally (`true`) or operations created on\n   * other, remote editors (`false`).\n   * @param {Boolean} [type.isUndo=false] Whether a batch was created by the undo feature and undoes other operations.\n   * @param {Boolean} [type.isTyping=false] Whether a batch includes operations connected with a typing action.\n   */\n  constructor() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof type === 'string') {\n      type = type === 'transparent' ? {\n        isUndoable: false\n      } : {};\n      /**\n       * The string value for a `type` property of the `Batch` constructor has been deprecated and will be removed in the near future.\n       * Please refer to the {@link module:engine/model/batch~Batch#constructor `Batch` constructor API documentation} for more\n       * information.\n       *\n       * @error batch-constructor-deprecated-string-type\n       */\n      logWarning('batch-constructor-deprecated-string-type');\n    }\n    const {\n      isUndoable = true,\n      isLocal = true,\n      isUndo = false,\n      isTyping = false\n    } = type;\n    /**\n     * An array of operations that compose this batch.\n     *\n     * @readonly\n     * @type {Array.<module:engine/model/operation/operation~Operation>}\n     */\n    this.operations = [];\n    /**\n     * Whether the batch can be undone through the undo feature.\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n    this.isUndoable = isUndoable;\n    /**\n     * Whether the batch includes operations created locally (`true`) or operations created on other, remote editors (`false`).\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n    this.isLocal = isLocal;\n    /**\n     * Whether the batch was created by the undo feature and undoes other operations.\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n    this.isUndo = isUndo;\n    /**\n     * Whether the batch includes operations connected with typing.\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n    this.isTyping = isTyping;\n  }\n  /**\n   * The type of the batch.\n   *\n   * **This property has been deprecated and is always set to the `'default'` value.**\n   *\n   * It can be one of the following values:\n   * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n   * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n   * changes.\n   *\n   * @deprecated\n   * @type {'default'}\n   */\n  get type() {\n    /**\n     * The {@link module:engine/model/batch~Batch#type `Batch#type` } property has been deprecated and will be removed in the near\n     * future. Use `Batch#isLocal`, `Batch#isUndoable`, `Batch#isUndo` and `Batch#isTyping` instead.\n     *\n     * @error batch-type-deprecated\n     */\n    logWarning('batch-type-deprecated');\n    return 'default';\n  }\n  /**\n   * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.\n   * If there are no operations in the batch or neither operation has the base version set, it returns `null`.\n   *\n   * @readonly\n   * @type {Number|null}\n   */\n  get baseVersion() {\n    for (const op of this.operations) {\n      if (op.baseVersion !== null) {\n        return op.baseVersion;\n      }\n    }\n    return null;\n  }\n  /**\n   * Adds an operation to the batch instance.\n   *\n   * @param {module:engine/model/operation/operation~Operation} operation An operation to add.\n   * @returns {module:engine/model/operation/operation~Operation} The added operation.\n   */\n  addOperation(operation) {\n    operation.batch = this;\n    this.operations.push(operation);\n    return operation;\n  }\n}","map":{"version":3,"names":["logWarning","Batch","constructor","type","isUndoable","isLocal","isUndo","isTyping","operations","baseVersion","op","addOperation","operation","batch","push"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/model/batch.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/batch\n */\nimport { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * A batch instance groups model changes ({@link module:engine/model/operation/operation~Operation operations}). All operations\n * grouped in a single batch can be reverted together, so you can also think about a batch as of a single undo step. If you want\n * to extend a given undo step, you can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n *\t\tmodel.enqueueChange( batch, writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\nexport default class Batch {\n    /**\n     * Creates a batch instance.\n     *\n     * @see module:engine/model/model~Model#enqueueChange\n     * @see module:engine/model/model~Model#change\n     * @param {Object} [type] A set of flags that specify the type of the batch. Batch type can alter how some of the features work\n     * when encountering a given `Batch` instance (for example, when a feature listens to applied operations).\n     * @param {Boolean} [type.isUndoable=true] Whether a batch can be undone through undo feature.\n     * @param {Boolean} [type.isLocal=true] Whether a batch includes operations created locally (`true`) or operations created on\n     * other, remote editors (`false`).\n     * @param {Boolean} [type.isUndo=false] Whether a batch was created by the undo feature and undoes other operations.\n     * @param {Boolean} [type.isTyping=false] Whether a batch includes operations connected with a typing action.\n     */\n    constructor(type = {}) {\n        if (typeof type === 'string') {\n            type = type === 'transparent' ? { isUndoable: false } : {};\n            /**\n             * The string value for a `type` property of the `Batch` constructor has been deprecated and will be removed in the near future.\n             * Please refer to the {@link module:engine/model/batch~Batch#constructor `Batch` constructor API documentation} for more\n             * information.\n             *\n             * @error batch-constructor-deprecated-string-type\n             */\n            logWarning('batch-constructor-deprecated-string-type');\n        }\n        const { isUndoable = true, isLocal = true, isUndo = false, isTyping = false } = type;\n        /**\n         * An array of operations that compose this batch.\n         *\n         * @readonly\n         * @type {Array.<module:engine/model/operation/operation~Operation>}\n         */\n        this.operations = [];\n        /**\n         * Whether the batch can be undone through the undo feature.\n         *\n         * @readonly\n         * @type {Boolean}\n         */\n        this.isUndoable = isUndoable;\n        /**\n         * Whether the batch includes operations created locally (`true`) or operations created on other, remote editors (`false`).\n         *\n         * @readonly\n         * @type {Boolean}\n         */\n        this.isLocal = isLocal;\n        /**\n         * Whether the batch was created by the undo feature and undoes other operations.\n         *\n         * @readonly\n         * @type {Boolean}\n         */\n        this.isUndo = isUndo;\n        /**\n         * Whether the batch includes operations connected with typing.\n         *\n         * @readonly\n         * @type {Boolean}\n         */\n        this.isTyping = isTyping;\n    }\n    /**\n     * The type of the batch.\n     *\n     * **This property has been deprecated and is always set to the `'default'` value.**\n     *\n     * It can be one of the following values:\n     * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n     * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n     * changes.\n     *\n     * @deprecated\n     * @type {'default'}\n     */\n    get type() {\n        /**\n         * The {@link module:engine/model/batch~Batch#type `Batch#type` } property has been deprecated and will be removed in the near\n         * future. Use `Batch#isLocal`, `Batch#isUndoable`, `Batch#isUndo` and `Batch#isTyping` instead.\n         *\n         * @error batch-type-deprecated\n         */\n        logWarning('batch-type-deprecated');\n        return 'default';\n    }\n    /**\n     * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.\n     * If there are no operations in the batch or neither operation has the base version set, it returns `null`.\n     *\n     * @readonly\n     * @type {Number|null}\n     */\n    get baseVersion() {\n        for (const op of this.operations) {\n            if (op.baseVersion !== null) {\n                return op.baseVersion;\n            }\n        }\n        return null;\n    }\n    /**\n     * Adds an operation to the batch instance.\n     *\n     * @param {module:engine/model/operation/operation~Operation} operation An operation to add.\n     * @returns {module:engine/model/operation/operation~Operation} The added operation.\n     */\n    addOperation(operation) {\n        operation.batch = this;\n        this.operations.push(operation);\n        return operation;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,6CAA6C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,KAAK,CAAC;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,GAAY;IAAA,IAAXC,IAAI,uEAAG,CAAC,CAAC;IACjB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC1BA,IAAI,GAAGA,IAAI,KAAK,aAAa,GAAG;QAAEC,UAAU,EAAE;MAAM,CAAC,GAAG,CAAC,CAAC;MAC1D;AACZ;AACA;AACA;AACA;AACA;AACA;MACYJ,UAAU,CAAC,0CAA0C,CAAC;IAC1D;IACA,MAAM;MAAEI,UAAU,GAAG,IAAI;MAAEC,OAAO,GAAG,IAAI;MAAEC,MAAM,GAAG,KAAK;MAAEC,QAAQ,GAAG;IAAM,CAAC,GAAGJ,IAAI;IACpF;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACK,UAAU,GAAG,EAAE;IACpB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACJ,UAAU,GAAGA,UAAU;IAC5B;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIJ,IAAI,GAAG;IACP;AACR;AACA;AACA;AACA;AACA;IACQH,UAAU,CAAC,uBAAuB,CAAC;IACnC,OAAO,SAAS;EACpB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAIS,WAAW,GAAG;IACd,KAAK,MAAMC,EAAE,IAAI,IAAI,CAACF,UAAU,EAAE;MAC9B,IAAIE,EAAE,CAACD,WAAW,KAAK,IAAI,EAAE;QACzB,OAAOC,EAAE,CAACD,WAAW;MACzB;IACJ;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,YAAY,CAACC,SAAS,EAAE;IACpBA,SAAS,CAACC,KAAK,GAAG,IAAI;IACtB,IAAI,CAACL,UAAU,CAACM,IAAI,CAACF,SAAS,CAAC;IAC/B,OAAOA,SAAS;EACpB;AACJ"},"metadata":{},"sourceType":"module"}