{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizer\n */\n\nimport Template from '@ckeditor/ckeditor5-ui/src/template';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ResizeState from './resizerstate';\nimport SizeView from './sizeview';\n\n/**\n * Represents a resizer for a single resizable object.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Resizer {\n  /**\n   * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n   */\n  constructor(options) {\n    /**\n     * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n     *\n     * Note that a new state is created for each resize transaction.\n     *\n     * @readonly\n     * @member {module:widget/widgetresize/resizerstate~ResizerState} #state\n     */\n\n    /**\n     * A view displaying the proposed new element size during the resizing.\n     *\n     * @protected\n     * @readonly\n     * @member {module:widget/widgetresize/sizeview~SizeView} #_sizeView\n     */\n\n    /**\n     * Options passed to the {@link #constructor}.\n     *\n     * @private\n     * @type {module:widget/widgetresize~ResizerOptions}\n     */\n    this._options = options;\n\n    /**\n     * A wrapper that is controlled by the resizer. This is usually a widget element.\n     *\n     * @private\n     * @type {module:engine/view/element~Element|null}\n     */\n    this._viewResizerWrapper = null;\n\n    /**\n     * The width of the resized {@link module:widget/widgetresize~ResizerOptions#viewElement viewElement} before the resizing started.\n     *\n     * @private\n     * @member {Number|String|undefined} #_initialViewWidth\n     */\n\n    /**\n     * Flag that indicates whether resizer can be used.\n     *\n     * @observable\n     */\n    this.set('isEnabled', true);\n\n    /**\n     * Flag that indicates that resizer is currently focused.\n     *\n     * @observable\n     */\n    this.set('isSelected', false);\n\n    /**\n     * Flag that indicates whether resizer is rendered (visible on the screen).\n     *\n     * @readonly\n     * @observable\n     */\n    this.bind('isVisible').to(this, 'isEnabled', this, 'isSelected', (isEnabled, isSelected) => isEnabled && isSelected);\n    this.decorate('begin');\n    this.decorate('cancel');\n    this.decorate('commit');\n    this.decorate('updateSize');\n    this.on('commit', event => {\n      // State might not be initialized yet. In this case, prevent further handling and make sure that the resizer is\n      // cleaned up (#5195).\n      if (!this.state.proposedWidth && !this.state.proposedWidthPercents) {\n        this._cleanup();\n        event.stop();\n      }\n    }, {\n      priority: 'high'\n    });\n    this.on('change:isVisible', () => {\n      if (this.isVisible) {\n        this.show();\n        this.redraw();\n      } else {\n        this.hide();\n      }\n    });\n  }\n\n  /**\n   * Makes resizer visible in the UI.\n   */\n  show() {\n    const editingView = this._options.editor.editing.view;\n    editingView.change(writer => {\n      writer.removeClass('ck-hidden', this._viewResizerWrapper);\n    });\n  }\n\n  /**\n   * Hides resizer in the UI.\n   */\n  hide() {\n    const editingView = this._options.editor.editing.view;\n    editingView.change(writer => {\n      writer.addClass('ck-hidden', this._viewResizerWrapper);\n    });\n  }\n\n  /**\n   * Attaches the resizer to the DOM.\n   */\n  attach() {\n    const that = this;\n    const widgetElement = this._options.viewElement;\n    const editingView = this._options.editor.editing.view;\n    editingView.change(writer => {\n      const viewResizerWrapper = writer.createUIElement('div', {\n        class: 'ck ck-reset_all ck-widget__resizer'\n      }, function (domDocument) {\n        const domElement = this.toDomElement(domDocument);\n        that._appendHandles(domElement);\n        that._appendSizeUI(domElement);\n        return domElement;\n      });\n\n      // Append the resizer wrapper to the widget's wrapper.\n      writer.insert(writer.createPositionAt(widgetElement, 'end'), viewResizerWrapper);\n      writer.addClass('ck-widget_with-resizer', widgetElement);\n      this._viewResizerWrapper = viewResizerWrapper;\n      if (!this.isVisible) {\n        this.hide();\n      }\n    });\n  }\n\n  /**\n   * Starts the resizing process.\n   *\n   * Creates a new {@link #state} for the current process.\n   *\n   * @fires begin\n   * @param {HTMLElement} domResizeHandle Clicked handle.\n   */\n  begin(domResizeHandle) {\n    this.state = new ResizeState(this._options);\n    this._sizeView._bindToState(this._options, this.state);\n    this._initialViewWidth = this._options.viewElement.getStyle('width');\n    this.state.begin(domResizeHandle, this._getHandleHost(), this._getResizeHost());\n  }\n\n  /**\n   * Updates the proposed size based on `domEventData`.\n   *\n   * @fires updateSize\n   * @param {Event} domEventData\n   */\n  updateSize(domEventData) {\n    const newSize = this._proposeNewSize(domEventData);\n    const editingView = this._options.editor.editing.view;\n    editingView.change(writer => {\n      const unit = this._options.unit || '%';\n      const newWidth = (unit === '%' ? newSize.widthPercents : newSize.width) + unit;\n      writer.setStyle('width', newWidth, this._options.viewElement);\n    });\n\n    // Get an actual image width, and:\n    // * reflect this size to the resize wrapper\n    // * apply this **real** size to the state\n    const domHandleHost = this._getHandleHost();\n    const domHandleHostRect = new Rect(domHandleHost);\n    newSize.handleHostWidth = Math.round(domHandleHostRect.width);\n    newSize.handleHostHeight = Math.round(domHandleHostRect.height);\n\n    // Handle max-width limitation.\n    const domResizeHostRect = new Rect(domHandleHost);\n    newSize.width = Math.round(domResizeHostRect.width);\n    newSize.height = Math.round(domResizeHostRect.height);\n    this.redraw(domHandleHostRect);\n    this.state.update(newSize);\n  }\n\n  /**\n   * Applies the geometry proposed with the resizer.\n   *\n   * @fires commit\n   */\n  commit() {\n    const unit = this._options.unit || '%';\n    const newValue = (unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth) + unit;\n\n    // Both cleanup and onCommit callback are very likely to make view changes. Ensure that it is made in a single step.\n    this._options.editor.editing.view.change(() => {\n      this._cleanup();\n      this._options.onCommit(newValue);\n    });\n  }\n\n  /**\n   * Cancels and rejects the proposed resize dimensions, hiding the UI.\n   *\n   * @fires cancel\n   */\n  cancel() {\n    this._cleanup();\n  }\n\n  /**\n   * Destroys the resizer.\n   */\n  destroy() {\n    this.cancel();\n  }\n\n  /**\n   * Redraws the resizer.\n   *\n   * @param {module:utils/dom/rect~Rect} [handleHostRect] Handle host rectangle might be given to improve performance.\n   */\n  redraw(handleHostRect) {\n    const domWrapper = this._domResizerWrapper;\n\n    // Refresh only if resizer exists in the DOM.\n    if (!existsInDom(domWrapper)) {\n      return;\n    }\n    const widgetWrapper = domWrapper.parentElement;\n    const handleHost = this._getHandleHost();\n    const resizerWrapper = this._viewResizerWrapper;\n    const currentDimensions = [resizerWrapper.getStyle('width'), resizerWrapper.getStyle('height'), resizerWrapper.getStyle('left'), resizerWrapper.getStyle('top')];\n    let newDimensions;\n    if (widgetWrapper.isSameNode(handleHost)) {\n      const clientRect = handleHostRect || new Rect(handleHost);\n      newDimensions = [clientRect.width + 'px', clientRect.height + 'px', undefined, undefined];\n    }\n    // In case a resizing host is not a widget wrapper, we need to compensate\n    // for any additional offsets the resize host might have. E.g. wrapper padding\n    // or simply another editable. By doing that the border and resizers are shown\n    // only around the resize host.\n    else {\n      newDimensions = [handleHost.offsetWidth + 'px', handleHost.offsetHeight + 'px', handleHost.offsetLeft + 'px', handleHost.offsetTop + 'px'];\n    }\n\n    // Make changes to the view only if the resizer should actually get new dimensions.\n    // Otherwise, if View#change() was always called, this would cause EditorUI#update\n    // loops because the WidgetResize plugin listens to EditorUI#update and updates\n    // the resizer.\n    // https://github.com/ckeditor/ckeditor5/issues/7633\n    if (compareArrays(currentDimensions, newDimensions) !== 'same') {\n      this._options.editor.editing.view.change(writer => {\n        writer.setStyle({\n          width: newDimensions[0],\n          height: newDimensions[1],\n          left: newDimensions[2],\n          top: newDimensions[3]\n        }, resizerWrapper);\n      });\n    }\n  }\n  containsHandle(domElement) {\n    return this._domResizerWrapper.contains(domElement);\n  }\n  static isResizeHandle(domElement) {\n    return domElement.classList.contains('ck-widget__resizer__handle');\n  }\n\n  /**\n   * Cleans up the context state.\n   *\n   * @protected\n   */\n  _cleanup() {\n    this._sizeView._dismiss();\n    const editingView = this._options.editor.editing.view;\n    editingView.change(writer => {\n      writer.setStyle('width', this._initialViewWidth, this._options.viewElement);\n    });\n  }\n\n  /**\n   * Calculates the proposed size as the resize handles are dragged.\n   *\n   * @private\n   * @param {Event} domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n   * @returns {Object} return\n   * @returns {Number} return.width Proposed width.\n   * @returns {Number} return.height Proposed height.\n   */\n  _proposeNewSize(domEventData) {\n    const state = this.state;\n    const currentCoordinates = extractCoordinates(domEventData);\n    const isCentered = this._options.isCentered ? this._options.isCentered(this) : true;\n\n    // Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n    // meaning that it has been shrunk.\n    //\n    // +----------------+--+\n    // |                |  |\n    // |       img      |  |\n    // |  /handle host  |  |\n    // +----------------+  | ^\n    // |                   | | - enlarge y\n    // +-------------------+ v\n    // \t\t\t\t\t<-->\n    // \t\t\t\t\t enlarge x\n    const enlargement = {\n      x: state._referenceCoordinates.x - (currentCoordinates.x + state.originalWidth),\n      y: currentCoordinates.y - state.originalHeight - state._referenceCoordinates.y\n    };\n    if (isCentered && state.activeHandlePosition.endsWith('-right')) {\n      enlargement.x = currentCoordinates.x - (state._referenceCoordinates.x + state.originalWidth);\n    }\n\n    // Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n    // one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n    if (isCentered) {\n      enlargement.x *= 2;\n    }\n\n    // const resizeHost = this._getResizeHost();\n\n    // The size proposed by the user. It does not consider the aspect ratio.\n    const proposedSize = {\n      width: Math.abs(state.originalWidth + enlargement.x),\n      height: Math.abs(state.originalHeight + enlargement.y)\n    };\n\n    // Dominant determination must take the ratio into account.\n    proposedSize.dominant = proposedSize.width / state.aspectRatio > proposedSize.height ? 'width' : 'height';\n    proposedSize.max = proposedSize[proposedSize.dominant];\n\n    // Proposed size, respecting the aspect ratio.\n    const targetSize = {\n      width: proposedSize.width,\n      height: proposedSize.height\n    };\n    if (proposedSize.dominant == 'width') {\n      targetSize.height = targetSize.width / state.aspectRatio;\n    } else {\n      targetSize.width = targetSize.height * state.aspectRatio;\n    }\n    return {\n      width: Math.round(targetSize.width),\n      height: Math.round(targetSize.height),\n      widthPercents: Math.min(Math.round(state.originalWidthPercents / state.originalWidth * targetSize.width * 100) / 100, 100)\n    };\n  }\n\n  /**\n   * Obtains the resize host.\n   *\n   * Resize host is an object that receives dimensions which are the result of resizing.\n   *\n   * @protected\n   * @returns {HTMLElement}\n   */\n  _getResizeHost() {\n    const widgetWrapper = this._domResizerWrapper.parentElement;\n    return this._options.getResizeHost(widgetWrapper);\n  }\n\n  /**\n   * Obtains the handle host.\n   *\n   * Handle host is an object that the handles are aligned to.\n   *\n   * Handle host will not always be an entire widget itself. Take an image as an example. The image widget\n   * contains an image and a caption. Only the image should be surrounded with handles.\n   *\n   * @protected\n   * @returns {HTMLElement}\n   */\n  _getHandleHost() {\n    const widgetWrapper = this._domResizerWrapper.parentElement;\n    return this._options.getHandleHost(widgetWrapper);\n  }\n\n  /**\n   * DOM container of the entire resize UI.\n   *\n   * Note that this property will have a value only after the element bound with the resizer is rendered\n   * (otherwise `null`).\n   *\n   * @private\n   * @member {HTMLElement|null}\n   */\n  get _domResizerWrapper() {\n    return this._options.editor.editing.view.domConverter.mapViewToDom(this._viewResizerWrapper);\n  }\n\n  /**\n   * Renders the resize handles in the DOM.\n   *\n   * @private\n   * @param {HTMLElement} domElement The resizer wrapper.\n   */\n  _appendHandles(domElement) {\n    const resizerPositions = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];\n    for (const currentPosition of resizerPositions) {\n      domElement.appendChild(new Template({\n        tag: 'div',\n        attributes: {\n          class: `ck-widget__resizer__handle ${getResizerClass(currentPosition)}`\n        }\n      }).render());\n    }\n  }\n\n  /**\n   * Sets up the {@link #_sizeView} property and adds it to the passed `domElement`.\n   *\n   * @private\n   * @param {HTMLElement} domElement\n   */\n  _appendSizeUI(domElement) {\n    this._sizeView = new SizeView();\n\n    // Make sure icon#element is rendered before passing to appendChild().\n    this._sizeView.render();\n    domElement.appendChild(this._sizeView.element);\n  }\n\n  /**\n   * @event begin\n   */\n\n  /**\n   * @event updateSize\n   */\n\n  /**\n   * @event commit\n   */\n\n  /**\n   * @event cancel\n   */\n}\n\nmix(Resizer, ObservableMixin);\n\n// @private\n// @param {String} resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n// @returns {String} A prefixed HTML class name for the resizer element\nfunction getResizerClass(resizerPosition) {\n  return `ck-widget__resizer__handle-${resizerPosition}`;\n}\nfunction extractCoordinates(event) {\n  return {\n    x: event.pageX,\n    y: event.pageY\n  };\n}\nfunction existsInDom(element) {\n  return element && element.ownerDocument && element.ownerDocument.contains(element);\n}","map":{"version":3,"names":["Template","Rect","compareArrays","ObservableMixin","mix","ResizeState","SizeView","Resizer","constructor","options","_options","_viewResizerWrapper","set","bind","to","isEnabled","isSelected","decorate","on","event","state","proposedWidth","proposedWidthPercents","_cleanup","stop","priority","isVisible","show","redraw","hide","editingView","editor","editing","view","change","writer","removeClass","addClass","attach","that","widgetElement","viewElement","viewResizerWrapper","createUIElement","class","domDocument","domElement","toDomElement","_appendHandles","_appendSizeUI","insert","createPositionAt","begin","domResizeHandle","_sizeView","_bindToState","_initialViewWidth","getStyle","_getHandleHost","_getResizeHost","updateSize","domEventData","newSize","_proposeNewSize","unit","newWidth","widthPercents","width","setStyle","domHandleHost","domHandleHostRect","handleHostWidth","Math","round","handleHostHeight","height","domResizeHostRect","update","commit","newValue","onCommit","cancel","destroy","handleHostRect","domWrapper","_domResizerWrapper","existsInDom","widgetWrapper","parentElement","handleHost","resizerWrapper","currentDimensions","newDimensions","isSameNode","clientRect","undefined","offsetWidth","offsetHeight","offsetLeft","offsetTop","left","top","containsHandle","contains","isResizeHandle","classList","_dismiss","currentCoordinates","extractCoordinates","isCentered","enlargement","x","_referenceCoordinates","originalWidth","y","originalHeight","activeHandlePosition","endsWith","proposedSize","abs","dominant","aspectRatio","max","targetSize","min","originalWidthPercents","getResizeHost","getHandleHost","domConverter","mapViewToDom","resizerPositions","currentPosition","appendChild","tag","attributes","getResizerClass","render","element","resizerPosition","pageX","pageY","ownerDocument"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-widget/src/widgetresize/resizer.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizer\n */\n\nimport Template from '@ckeditor/ckeditor5-ui/src/template';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport ResizeState from './resizerstate';\nimport SizeView from './sizeview';\n\n/**\n * Represents a resizer for a single resizable object.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Resizer {\n\t/**\n\t * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n\t */\n\tconstructor( options ) {\n\t\t/**\n\t\t * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n\t\t *\n\t\t * Note that a new state is created for each resize transaction.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:widget/widgetresize/resizerstate~ResizerState} #state\n\t\t */\n\n\t\t/**\n\t\t * A view displaying the proposed new element size during the resizing.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:widget/widgetresize/sizeview~SizeView} #_sizeView\n\t\t */\n\n\t\t/**\n\t\t * Options passed to the {@link #constructor}.\n\t\t *\n\t\t * @private\n\t\t * @type {module:widget/widgetresize~ResizerOptions}\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * A wrapper that is controlled by the resizer. This is usually a widget element.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/view/element~Element|null}\n\t\t */\n\t\tthis._viewResizerWrapper = null;\n\n\t\t/**\n\t\t * The width of the resized {@link module:widget/widgetresize~ResizerOptions#viewElement viewElement} before the resizing started.\n\t\t *\n\t\t * @private\n\t\t * @member {Number|String|undefined} #_initialViewWidth\n\t\t */\n\n\t\t/**\n\t\t * Flag that indicates whether resizer can be used.\n\t\t *\n\t\t * @observable\n\t\t */\n\t\tthis.set( 'isEnabled', true );\n\n\t\t/**\n\t\t * Flag that indicates that resizer is currently focused.\n\t\t *\n\t\t * @observable\n\t\t */\n\t\tthis.set( 'isSelected', false );\n\n\t\t/**\n\t\t * Flag that indicates whether resizer is rendered (visible on the screen).\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t */\n\t\tthis.bind( 'isVisible' ).to( this, 'isEnabled', this, 'isSelected', ( isEnabled, isSelected ) => isEnabled && isSelected );\n\n\t\tthis.decorate( 'begin' );\n\t\tthis.decorate( 'cancel' );\n\t\tthis.decorate( 'commit' );\n\t\tthis.decorate( 'updateSize' );\n\n\t\tthis.on( 'commit', event => {\n\t\t\t// State might not be initialized yet. In this case, prevent further handling and make sure that the resizer is\n\t\t\t// cleaned up (#5195).\n\t\t\tif ( !this.state.proposedWidth && !this.state.proposedWidthPercents ) {\n\t\t\t\tthis._cleanup();\n\t\t\t\tevent.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\tthis.on( 'change:isVisible', () => {\n\t\t\tif ( this.isVisible ) {\n\t\t\t\tthis.show();\n\t\t\t\tthis.redraw();\n\t\t\t} else {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Makes resizer visible in the UI.\n\t */\n\tshow() {\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\twriter.removeClass( 'ck-hidden', this._viewResizerWrapper );\n\t\t} );\n\t}\n\n\t/**\n\t * Hides resizer in the UI.\n\t */\n\thide() {\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\twriter.addClass( 'ck-hidden', this._viewResizerWrapper );\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches the resizer to the DOM.\n\t */\n\tattach() {\n\t\tconst that = this;\n\t\tconst widgetElement = this._options.viewElement;\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\tconst viewResizerWrapper = writer.createUIElement( 'div', {\n\t\t\t\tclass: 'ck ck-reset_all ck-widget__resizer'\n\t\t\t}, function( domDocument ) {\n\t\t\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t\t\tthat._appendHandles( domElement );\n\t\t\t\tthat._appendSizeUI( domElement );\n\n\t\t\t\treturn domElement;\n\t\t\t} );\n\n\t\t\t// Append the resizer wrapper to the widget's wrapper.\n\t\t\twriter.insert( writer.createPositionAt( widgetElement, 'end' ), viewResizerWrapper );\n\t\t\twriter.addClass( 'ck-widget_with-resizer', widgetElement );\n\n\t\t\tthis._viewResizerWrapper = viewResizerWrapper;\n\n\t\t\tif ( !this.isVisible ) {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Starts the resizing process.\n\t *\n\t * Creates a new {@link #state} for the current process.\n\t *\n\t * @fires begin\n\t * @param {HTMLElement} domResizeHandle Clicked handle.\n\t */\n\tbegin( domResizeHandle ) {\n\t\tthis.state = new ResizeState( this._options );\n\n\t\tthis._sizeView._bindToState( this._options, this.state );\n\n\t\tthis._initialViewWidth = this._options.viewElement.getStyle( 'width' );\n\n\t\tthis.state.begin( domResizeHandle, this._getHandleHost(), this._getResizeHost() );\n\t}\n\n\t/**\n\t * Updates the proposed size based on `domEventData`.\n\t *\n\t * @fires updateSize\n\t * @param {Event} domEventData\n\t */\n\tupdateSize( domEventData ) {\n\t\tconst newSize = this._proposeNewSize( domEventData );\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\tconst unit = this._options.unit || '%';\n\t\t\tconst newWidth = ( unit === '%' ? newSize.widthPercents : newSize.width ) + unit;\n\n\t\t\twriter.setStyle( 'width', newWidth, this._options.viewElement );\n\t\t} );\n\n\t\t// Get an actual image width, and:\n\t\t// * reflect this size to the resize wrapper\n\t\t// * apply this **real** size to the state\n\t\tconst domHandleHost = this._getHandleHost();\n\t\tconst domHandleHostRect = new Rect( domHandleHost );\n\n\t\tnewSize.handleHostWidth = Math.round( domHandleHostRect.width );\n\t\tnewSize.handleHostHeight = Math.round( domHandleHostRect.height );\n\n\t\t// Handle max-width limitation.\n\t\tconst domResizeHostRect = new Rect( domHandleHost );\n\n\t\tnewSize.width = Math.round( domResizeHostRect.width );\n\t\tnewSize.height = Math.round( domResizeHostRect.height );\n\n\t\tthis.redraw( domHandleHostRect );\n\n\t\tthis.state.update( newSize );\n\t}\n\n\t/**\n\t * Applies the geometry proposed with the resizer.\n\t *\n\t * @fires commit\n\t */\n\tcommit() {\n\t\tconst unit = this._options.unit || '%';\n\t\tconst newValue = ( unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth ) + unit;\n\n\t\t// Both cleanup and onCommit callback are very likely to make view changes. Ensure that it is made in a single step.\n\t\tthis._options.editor.editing.view.change( () => {\n\t\t\tthis._cleanup();\n\t\t\tthis._options.onCommit( newValue );\n\t\t} );\n\t}\n\n\t/**\n\t * Cancels and rejects the proposed resize dimensions, hiding the UI.\n\t *\n\t * @fires cancel\n\t */\n\tcancel() {\n\t\tthis._cleanup();\n\t}\n\n\t/**\n\t * Destroys the resizer.\n\t */\n\tdestroy() {\n\t\tthis.cancel();\n\t}\n\n\t/**\n\t * Redraws the resizer.\n\t *\n\t * @param {module:utils/dom/rect~Rect} [handleHostRect] Handle host rectangle might be given to improve performance.\n\t */\n\tredraw( handleHostRect ) {\n\t\tconst domWrapper = this._domResizerWrapper;\n\n\t\t// Refresh only if resizer exists in the DOM.\n\t\tif ( !existsInDom( domWrapper ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst widgetWrapper = domWrapper.parentElement;\n\t\tconst handleHost = this._getHandleHost();\n\t\tconst resizerWrapper = this._viewResizerWrapper;\n\t\tconst currentDimensions = [\n\t\t\tresizerWrapper.getStyle( 'width' ),\n\t\t\tresizerWrapper.getStyle( 'height' ),\n\t\t\tresizerWrapper.getStyle( 'left' ),\n\t\t\tresizerWrapper.getStyle( 'top' )\n\t\t];\n\t\tlet newDimensions;\n\n\t\tif ( widgetWrapper.isSameNode( handleHost ) ) {\n\t\t\tconst clientRect = handleHostRect || new Rect( handleHost );\n\n\t\t\tnewDimensions = [\n\t\t\t\tclientRect.width + 'px',\n\t\t\t\tclientRect.height + 'px',\n\t\t\t\tundefined,\n\t\t\t\tundefined\n\t\t\t];\n\t\t}\n\t\t// In case a resizing host is not a widget wrapper, we need to compensate\n\t\t// for any additional offsets the resize host might have. E.g. wrapper padding\n\t\t// or simply another editable. By doing that the border and resizers are shown\n\t\t// only around the resize host.\n\t\telse {\n\t\t\tnewDimensions = [\n\t\t\t\thandleHost.offsetWidth + 'px',\n\t\t\t\thandleHost.offsetHeight + 'px',\n\t\t\t\thandleHost.offsetLeft + 'px',\n\t\t\t\thandleHost.offsetTop + 'px'\n\t\t\t];\n\t\t}\n\n\t\t// Make changes to the view only if the resizer should actually get new dimensions.\n\t\t// Otherwise, if View#change() was always called, this would cause EditorUI#update\n\t\t// loops because the WidgetResize plugin listens to EditorUI#update and updates\n\t\t// the resizer.\n\t\t// https://github.com/ckeditor/ckeditor5/issues/7633\n\t\tif ( compareArrays( currentDimensions, newDimensions ) !== 'same' ) {\n\t\t\tthis._options.editor.editing.view.change( writer => {\n\t\t\t\twriter.setStyle( {\n\t\t\t\t\twidth: newDimensions[ 0 ],\n\t\t\t\t\theight: newDimensions[ 1 ],\n\t\t\t\t\tleft: newDimensions[ 2 ],\n\t\t\t\t\ttop: newDimensions[ 3 ]\n\t\t\t\t}, resizerWrapper );\n\t\t\t} );\n\t\t}\n\t}\n\n\tcontainsHandle( domElement ) {\n\t\treturn this._domResizerWrapper.contains( domElement );\n\t}\n\n\tstatic isResizeHandle( domElement ) {\n\t\treturn domElement.classList.contains( 'ck-widget__resizer__handle' );\n\t}\n\n\t/**\n\t * Cleans up the context state.\n\t *\n\t * @protected\n\t */\n\t_cleanup() {\n\t\tthis._sizeView._dismiss();\n\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\twriter.setStyle( 'width', this._initialViewWidth, this._options.viewElement );\n\t\t} );\n\t}\n\n\t/**\n\t * Calculates the proposed size as the resize handles are dragged.\n\t *\n\t * @private\n\t * @param {Event} domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n\t * @returns {Object} return\n\t * @returns {Number} return.width Proposed width.\n\t * @returns {Number} return.height Proposed height.\n\t */\n\t_proposeNewSize( domEventData ) {\n\t\tconst state = this.state;\n\t\tconst currentCoordinates = extractCoordinates( domEventData );\n\t\tconst isCentered = this._options.isCentered ? this._options.isCentered( this ) : true;\n\n\t\t// Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n\t\t// meaning that it has been shrunk.\n\t\t//\n\t\t// +----------------+--+\n\t\t// |                |  |\n\t\t// |       img      |  |\n\t\t// |  /handle host  |  |\n\t\t// +----------------+  | ^\n\t\t// |                   | | - enlarge y\n\t\t// +-------------------+ v\n\t\t// \t\t\t\t\t<-->\n\t\t// \t\t\t\t\t enlarge x\n\t\tconst enlargement = {\n\t\t\tx: state._referenceCoordinates.x - ( currentCoordinates.x + state.originalWidth ),\n\t\t\ty: ( currentCoordinates.y - state.originalHeight ) - state._referenceCoordinates.y\n\t\t};\n\n\t\tif ( isCentered && state.activeHandlePosition.endsWith( '-right' ) ) {\n\t\t\tenlargement.x = currentCoordinates.x - ( state._referenceCoordinates.x + state.originalWidth );\n\t\t}\n\n\t\t// Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n\t\t// one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n\t\tif ( isCentered ) {\n\t\t\tenlargement.x *= 2;\n\t\t}\n\n\t\t// const resizeHost = this._getResizeHost();\n\n\t\t// The size proposed by the user. It does not consider the aspect ratio.\n\t\tconst proposedSize = {\n\t\t\twidth: Math.abs( state.originalWidth + enlargement.x ),\n\t\t\theight: Math.abs( state.originalHeight + enlargement.y )\n\t\t};\n\n\t\t// Dominant determination must take the ratio into account.\n\t\tproposedSize.dominant = proposedSize.width / state.aspectRatio > proposedSize.height ? 'width' : 'height';\n\t\tproposedSize.max = proposedSize[ proposedSize.dominant ];\n\n\t\t// Proposed size, respecting the aspect ratio.\n\t\tconst targetSize = {\n\t\t\twidth: proposedSize.width,\n\t\t\theight: proposedSize.height\n\t\t};\n\n\t\tif ( proposedSize.dominant == 'width' ) {\n\t\t\ttargetSize.height = targetSize.width / state.aspectRatio;\n\t\t} else {\n\t\t\ttargetSize.width = targetSize.height * state.aspectRatio;\n\t\t}\n\n\t\treturn {\n\t\t\twidth: Math.round( targetSize.width ),\n\t\t\theight: Math.round( targetSize.height ),\n\t\t\twidthPercents: Math.min( Math.round( state.originalWidthPercents / state.originalWidth * targetSize.width * 100 ) / 100, 100 )\n\t\t};\n\t}\n\n\t/**\n\t * Obtains the resize host.\n\t *\n\t * Resize host is an object that receives dimensions which are the result of resizing.\n\t *\n\t * @protected\n\t * @returns {HTMLElement}\n\t */\n\t_getResizeHost() {\n\t\tconst widgetWrapper = this._domResizerWrapper.parentElement;\n\n\t\treturn this._options.getResizeHost( widgetWrapper );\n\t}\n\n\t/**\n\t * Obtains the handle host.\n\t *\n\t * Handle host is an object that the handles are aligned to.\n\t *\n\t * Handle host will not always be an entire widget itself. Take an image as an example. The image widget\n\t * contains an image and a caption. Only the image should be surrounded with handles.\n\t *\n\t * @protected\n\t * @returns {HTMLElement}\n\t */\n\t_getHandleHost() {\n\t\tconst widgetWrapper = this._domResizerWrapper.parentElement;\n\n\t\treturn this._options.getHandleHost( widgetWrapper );\n\t}\n\n\t/**\n\t * DOM container of the entire resize UI.\n\t *\n\t * Note that this property will have a value only after the element bound with the resizer is rendered\n\t * (otherwise `null`).\n\t *\n\t * @private\n\t * @member {HTMLElement|null}\n\t */\n\tget _domResizerWrapper() {\n\t\treturn this._options.editor.editing.view.domConverter.mapViewToDom( this._viewResizerWrapper );\n\t}\n\n\t/**\n\t * Renders the resize handles in the DOM.\n\t *\n\t * @private\n\t * @param {HTMLElement} domElement The resizer wrapper.\n\t */\n\t_appendHandles( domElement ) {\n\t\tconst resizerPositions = [ 'top-left', 'top-right', 'bottom-right', 'bottom-left' ];\n\n\t\tfor ( const currentPosition of resizerPositions ) {\n\t\t\tdomElement.appendChild( ( new Template( {\n\t\t\t\ttag: 'div',\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: `ck-widget__resizer__handle ${ getResizerClass( currentPosition ) }`\n\t\t\t\t}\n\t\t\t} ).render() ) );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up the {@link #_sizeView} property and adds it to the passed `domElement`.\n\t *\n\t * @private\n\t * @param {HTMLElement} domElement\n\t */\n\t_appendSizeUI( domElement ) {\n\t\tthis._sizeView = new SizeView();\n\n\t\t// Make sure icon#element is rendered before passing to appendChild().\n\t\tthis._sizeView.render();\n\n\t\tdomElement.appendChild( this._sizeView.element );\n\t}\n\n\t/**\n\t * @event begin\n\t */\n\n\t/**\n\t * @event updateSize\n\t */\n\n\t/**\n\t * @event commit\n\t */\n\n\t/**\n\t * @event cancel\n\t */\n}\n\nmix( Resizer, ObservableMixin );\n\n// @private\n// @param {String} resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n// @returns {String} A prefixed HTML class name for the resizer element\nfunction getResizerClass( resizerPosition ) {\n\treturn `ck-widget__resizer__handle-${ resizerPosition }`;\n}\n\nfunction extractCoordinates( event ) {\n\treturn {\n\t\tx: event.pageX,\n\t\ty: event.pageY\n\t};\n}\n\nfunction existsInDom( element ) {\n\treturn element && element.ownerDocument && element.ownerDocument.contains( element );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}