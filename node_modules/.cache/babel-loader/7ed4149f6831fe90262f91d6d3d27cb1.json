{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/rootelement\n */\nimport Element from './element';\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n * @extends module:engine/model/element~Element\n */\nexport default class RootElement extends Element {\n  /**\n   * Creates root element.\n   *\n   * @param {module:engine/model/document~Document} document Document that is an owner of this root.\n   * @param {String} name Node name.\n   * @param {String} [rootName='main'] Unique root name used to identify this root\n   * element by {@link module:engine/model/document~Document}.\n   */\n  constructor(document, name) {\n    let rootName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'main';\n    super(name);\n    /**\n     * Document that is an owner of this root.\n     *\n     * @private\n     * @member {module:engine/model/document~Document}\n     */\n    this._document = document;\n    /**\n     * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n     *\n     * @readonly\n     * @member {String}\n     */\n    this.rootName = rootName;\n  }\n  /**\n   * {@link module:engine/model/document~Document Document} that owns this root element.\n   *\n   * @readonly\n   * @type {module:engine/model/document~Document|null}\n   */\n  get document() {\n    return this._document;\n  }\n  /**\n   * Converts `RootElement` instance to `String` containing it's name.\n   *\n   * @returns {String} `RootElement` instance converted to `String`.\n   */\n  toJSON() {\n    return this.rootName;\n  }\n}\n/**\n * Checks whether this object is of the given.\n *\n *\t\trootElement.is( 'rootElement' ); // -> true\n *\t\trootElement.is( 'element' ); // -> true\n *\t\trootElement.is( 'node' ); // -> true\n *\t\trootElement.is( 'model:rootElement' ); // -> true\n *\t\trootElement.is( 'model:element' ); // -> true\n *\t\trootElement.is( 'model:node' ); // -> true\n *\n *\t\trootElement.is( 'view:element' ); // -> false\n *\t\trootElement.is( 'documentFragment' ); // -> false\n *\n * Assuming that the object being checked is an element, you can also check its\n * {@link module:engine/model/element~Element#name name}:\n *\n *\t\trootElement.is( 'rootElement', '$root' ); // -> same as above\n *\n * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n *\n * @param {String} type Type to check.\n * @param {String} [name] Element name.\n * @returns {Boolean}\n */\nRootElement.prototype.is = function (type, name) {\n  if (!name) {\n    return type === 'rootElement' || type === 'model:rootElement' ||\n    // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n    type === 'element' || type === 'model:element' || type === 'node' || type === 'model:node';\n  }\n  return name === this.name && (type === 'rootElement' || type === 'model:rootElement' ||\n  // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n  type === 'element' || type === 'model:element');\n};","map":{"version":3,"names":["Element","RootElement","constructor","document","name","rootName","_document","toJSON","prototype","is","type"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/model/rootelement.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/rootelement\n */\nimport Element from './element';\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n * @extends module:engine/model/element~Element\n */\nexport default class RootElement extends Element {\n    /**\n     * Creates root element.\n     *\n     * @param {module:engine/model/document~Document} document Document that is an owner of this root.\n     * @param {String} name Node name.\n     * @param {String} [rootName='main'] Unique root name used to identify this root\n     * element by {@link module:engine/model/document~Document}.\n     */\n    constructor(document, name, rootName = 'main') {\n        super(name);\n        /**\n         * Document that is an owner of this root.\n         *\n         * @private\n         * @member {module:engine/model/document~Document}\n         */\n        this._document = document;\n        /**\n         * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n         *\n         * @readonly\n         * @member {String}\n         */\n        this.rootName = rootName;\n    }\n    /**\n     * {@link module:engine/model/document~Document Document} that owns this root element.\n     *\n     * @readonly\n     * @type {module:engine/model/document~Document|null}\n     */\n    get document() {\n        return this._document;\n    }\n    /**\n     * Converts `RootElement` instance to `String` containing it's name.\n     *\n     * @returns {String} `RootElement` instance converted to `String`.\n     */\n    toJSON() {\n        return this.rootName;\n    }\n}\n/**\n * Checks whether this object is of the given.\n *\n *\t\trootElement.is( 'rootElement' ); // -> true\n *\t\trootElement.is( 'element' ); // -> true\n *\t\trootElement.is( 'node' ); // -> true\n *\t\trootElement.is( 'model:rootElement' ); // -> true\n *\t\trootElement.is( 'model:element' ); // -> true\n *\t\trootElement.is( 'model:node' ); // -> true\n *\n *\t\trootElement.is( 'view:element' ); // -> false\n *\t\trootElement.is( 'documentFragment' ); // -> false\n *\n * Assuming that the object being checked is an element, you can also check its\n * {@link module:engine/model/element~Element#name name}:\n *\n *\t\trootElement.is( 'rootElement', '$root' ); // -> same as above\n *\n * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n *\n * @param {String} type Type to check.\n * @param {String} [name] Element name.\n * @returns {Boolean}\n */\nRootElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'rootElement' || type === 'model:rootElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'model:element' ||\n            type === 'node' || type === 'model:node';\n    }\n    return name === this.name && (type === 'rootElement' || type === 'model:rootElement' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'element' || type === 'model:element');\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,OAAO,MAAM,WAAW;AAC/B;AACA;AACA;AACA;AACA,eAAe,MAAMC,WAAW,SAASD,OAAO,CAAC;EAC7C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,WAAW,CAACC,QAAQ,EAAEC,IAAI,EAAqB;IAAA,IAAnBC,QAAQ,uEAAG,MAAM;IACzC,KAAK,CAACD,IAAI,CAAC;IACX;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACE,SAAS,GAAGH,QAAQ;IACzB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACE,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIF,QAAQ,GAAG;IACX,OAAO,IAAI,CAACG,SAAS;EACzB;EACA;AACJ;AACA;AACA;AACA;EACIC,MAAM,GAAG;IACL,OAAO,IAAI,CAACF,QAAQ;EACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,WAAW,CAACO,SAAS,CAACC,EAAE,GAAG,UAAUC,IAAI,EAAEN,IAAI,EAAE;EAC7C,IAAI,CAACA,IAAI,EAAE;IACP,OAAOM,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,mBAAmB;IACzD;IACAA,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,eAAe,IAC9CA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,YAAY;EAChD;EACA,OAAON,IAAI,KAAK,IAAI,CAACA,IAAI,KAAKM,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,mBAAmB;EAChF;EACAA,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,eAAe,CAAC;AACvD,CAAC"},"metadata":{},"sourceType":"module"}