{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { getShorthandValues, getBoxSidesValueReducer, getBoxSidesValues, isLength, isLineStyle } from './utils';\n/**\n * Adds a border CSS styles processing rules.\n *\n *\t\teditor.data.addStyleProcessorRules( addBorderRules );\n *\n * This rules merges all [border](https://developer.mozilla.org/en-US/docs/Web/CSS/border) styles notation shorthands:\n *\n * - border\n * - border-top\n * - border-right\n * - border-bottom\n * - border-left\n * - border-color\n * - border-style\n * - border-width\n *\n * and all corresponding longhand forms (like `border-top-color`, `border-top-style`, etc).\n *\n * It does not handle other shorthands (like `border-radius` or `border-image`).\n *\n * The normalized model stores border values as:\n *\n *\t\tconst styles = {\n *\t\t\tborder: {\n *\t\t\t\tcolor: { top, right, bottom, left },\n *\t\t\t\tstyle: { top, right, bottom, left },\n *\t\t\t\twidth: { top, right, bottom, left },\n *\t\t\t}\n *\t\t};\n *\n * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor\n */\nexport function addBorderRules(stylesProcessor) {\n  stylesProcessor.setNormalizer('border', getBorderNormalizer());\n  // Border-position shorthands.\n  stylesProcessor.setNormalizer('border-top', getBorderPositionNormalizer('top'));\n  stylesProcessor.setNormalizer('border-right', getBorderPositionNormalizer('right'));\n  stylesProcessor.setNormalizer('border-bottom', getBorderPositionNormalizer('bottom'));\n  stylesProcessor.setNormalizer('border-left', getBorderPositionNormalizer('left'));\n  // Border-property shorthands.\n  stylesProcessor.setNormalizer('border-color', getBorderPropertyNormalizer('color'));\n  stylesProcessor.setNormalizer('border-width', getBorderPropertyNormalizer('width'));\n  stylesProcessor.setNormalizer('border-style', getBorderPropertyNormalizer('style'));\n  // Border longhands.\n  stylesProcessor.setNormalizer('border-top-color', getBorderPropertyPositionNormalizer('color', 'top'));\n  stylesProcessor.setNormalizer('border-top-style', getBorderPropertyPositionNormalizer('style', 'top'));\n  stylesProcessor.setNormalizer('border-top-width', getBorderPropertyPositionNormalizer('width', 'top'));\n  stylesProcessor.setNormalizer('border-right-color', getBorderPropertyPositionNormalizer('color', 'right'));\n  stylesProcessor.setNormalizer('border-right-style', getBorderPropertyPositionNormalizer('style', 'right'));\n  stylesProcessor.setNormalizer('border-right-width', getBorderPropertyPositionNormalizer('width', 'right'));\n  stylesProcessor.setNormalizer('border-bottom-color', getBorderPropertyPositionNormalizer('color', 'bottom'));\n  stylesProcessor.setNormalizer('border-bottom-style', getBorderPropertyPositionNormalizer('style', 'bottom'));\n  stylesProcessor.setNormalizer('border-bottom-width', getBorderPropertyPositionNormalizer('width', 'bottom'));\n  stylesProcessor.setNormalizer('border-left-color', getBorderPropertyPositionNormalizer('color', 'left'));\n  stylesProcessor.setNormalizer('border-left-style', getBorderPropertyPositionNormalizer('style', 'left'));\n  stylesProcessor.setNormalizer('border-left-width', getBorderPropertyPositionNormalizer('width', 'left'));\n  stylesProcessor.setExtractor('border-top', getBorderPositionExtractor('top'));\n  stylesProcessor.setExtractor('border-right', getBorderPositionExtractor('right'));\n  stylesProcessor.setExtractor('border-bottom', getBorderPositionExtractor('bottom'));\n  stylesProcessor.setExtractor('border-left', getBorderPositionExtractor('left'));\n  stylesProcessor.setExtractor('border-top-color', 'border.color.top');\n  stylesProcessor.setExtractor('border-right-color', 'border.color.right');\n  stylesProcessor.setExtractor('border-bottom-color', 'border.color.bottom');\n  stylesProcessor.setExtractor('border-left-color', 'border.color.left');\n  stylesProcessor.setExtractor('border-top-width', 'border.width.top');\n  stylesProcessor.setExtractor('border-right-width', 'border.width.right');\n  stylesProcessor.setExtractor('border-bottom-width', 'border.width.bottom');\n  stylesProcessor.setExtractor('border-left-width', 'border.width.left');\n  stylesProcessor.setExtractor('border-top-style', 'border.style.top');\n  stylesProcessor.setExtractor('border-right-style', 'border.style.right');\n  stylesProcessor.setExtractor('border-bottom-style', 'border.style.bottom');\n  stylesProcessor.setExtractor('border-left-style', 'border.style.left');\n  stylesProcessor.setReducer('border-color', getBoxSidesValueReducer('border-color'));\n  stylesProcessor.setReducer('border-style', getBoxSidesValueReducer('border-style'));\n  stylesProcessor.setReducer('border-width', getBoxSidesValueReducer('border-width'));\n  stylesProcessor.setReducer('border-top', getBorderPositionReducer('top'));\n  stylesProcessor.setReducer('border-right', getBorderPositionReducer('right'));\n  stylesProcessor.setReducer('border-bottom', getBorderPositionReducer('bottom'));\n  stylesProcessor.setReducer('border-left', getBorderPositionReducer('left'));\n  stylesProcessor.setReducer('border', getBorderReducer());\n  stylesProcessor.setStyleRelation('border', ['border-color', 'border-style', 'border-width', 'border-top', 'border-right', 'border-bottom', 'border-left', 'border-top-color', 'border-right-color', 'border-bottom-color', 'border-left-color', 'border-top-style', 'border-right-style', 'border-bottom-style', 'border-left-style', 'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width']);\n  stylesProcessor.setStyleRelation('border-color', ['border-top-color', 'border-right-color', 'border-bottom-color', 'border-left-color']);\n  stylesProcessor.setStyleRelation('border-style', ['border-top-style', 'border-right-style', 'border-bottom-style', 'border-left-style']);\n  stylesProcessor.setStyleRelation('border-width', ['border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width']);\n  stylesProcessor.setStyleRelation('border-top', ['border-top-color', 'border-top-style', 'border-top-width']);\n  stylesProcessor.setStyleRelation('border-right', ['border-right-color', 'border-right-style', 'border-right-width']);\n  stylesProcessor.setStyleRelation('border-bottom', ['border-bottom-color', 'border-bottom-style', 'border-bottom-width']);\n  stylesProcessor.setStyleRelation('border-left', ['border-left-color', 'border-left-style', 'border-left-width']);\n}\nfunction getBorderNormalizer() {\n  return value => {\n    const {\n      color,\n      style,\n      width\n    } = normalizeBorderShorthand(value);\n    return {\n      path: 'border',\n      value: {\n        color: getBoxSidesValues(color),\n        style: getBoxSidesValues(style),\n        width: getBoxSidesValues(width)\n      }\n    };\n  };\n}\nfunction getBorderPositionNormalizer(side) {\n  return value => {\n    const {\n      color,\n      style,\n      width\n    } = normalizeBorderShorthand(value);\n    const border = {};\n    if (color !== undefined) {\n      border.color = {\n        [side]: color\n      };\n    }\n    if (style !== undefined) {\n      border.style = {\n        [side]: style\n      };\n    }\n    if (width !== undefined) {\n      border.width = {\n        [side]: width\n      };\n    }\n    return {\n      path: 'border',\n      value: border\n    };\n  };\n}\nfunction getBorderPropertyNormalizer(propertyName) {\n  return value => {\n    return {\n      path: 'border',\n      value: toBorderPropertyShorthand(value, propertyName)\n    };\n  };\n}\nfunction toBorderPropertyShorthand(value, property) {\n  return {\n    [property]: getBoxSidesValues(value)\n  };\n}\nfunction getBorderPropertyPositionNormalizer(property, side) {\n  return value => {\n    return {\n      path: 'border',\n      value: {\n        [property]: {\n          [side]: value\n        }\n      }\n    };\n  };\n}\nfunction getBorderPositionExtractor(which) {\n  return (name, styles) => {\n    if (styles.border) {\n      return extractBorderPosition(styles.border, which);\n    }\n  };\n}\nfunction extractBorderPosition(border, which) {\n  const value = {};\n  if (border.width && border.width[which]) {\n    value.width = border.width[which];\n  }\n  if (border.style && border.style[which]) {\n    value.style = border.style[which];\n  }\n  if (border.color && border.color[which]) {\n    value.color = border.color[which];\n  }\n  return value;\n}\nfunction normalizeBorderShorthand(string) {\n  const result = {};\n  const parts = getShorthandValues(string);\n  for (const part of parts) {\n    if (isLength(part) || /thin|medium|thick/.test(part)) {\n      result.width = part;\n    } else if (isLineStyle(part)) {\n      result.style = part;\n    } else {\n      result.color = part;\n    }\n  }\n  return result;\n}\n// The border reducer factory.\n//\n// It tries to produce the most optimal output for the specified styles.\n//\n// For a border style:\n//\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//\n// It will produce: `border-style: solid`.\n// For a border style and color:\n//\n//      color: {top: \"#ff0\", bottom: \"#ff0\", right: \"#ff0\", left: \"#ff0\"}\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//\n// It will produce: `border-color: #ff0; border-style: solid`.\n// If all border parameters are specified:\n//\n//      color: {top: \"#ff0\", bottom: \"#ff0\", right: \"#ff0\", left: \"#ff0\"}\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//      width: {top: \"2px\", bottom: \"2px\", right: \"2px\", left: \"2px\"}\n//\n// It will combine everything into a single property: `border: 2px solid #ff0`.\n//\n// The definitions are merged only if all border selectors have the same values.\n//\n// @returns {Function}\nfunction getBorderReducer() {\n  return value => {\n    const topStyles = extractBorderPosition(value, 'top');\n    const rightStyles = extractBorderPosition(value, 'right');\n    const bottomStyles = extractBorderPosition(value, 'bottom');\n    const leftStyles = extractBorderPosition(value, 'left');\n    const borderStyles = [topStyles, rightStyles, bottomStyles, leftStyles];\n    const borderStylesByType = {\n      width: getReducedStyleValueForType(borderStyles, 'width'),\n      style: getReducedStyleValueForType(borderStyles, 'style'),\n      color: getReducedStyleValueForType(borderStyles, 'color')\n    };\n    // Try reducing to a single `border:` property.\n    const reducedBorderStyle = reduceBorderPosition(borderStylesByType, 'all');\n    if (reducedBorderStyle.length) {\n      return reducedBorderStyle;\n    }\n    // Try reducing to `border-style:`, `border-width:`, `border-color:` properties.\n    const reducedStyleTypes = Object.entries(borderStylesByType).reduce((reducedStyleTypes, _ref) => {\n      let [type, value] = _ref;\n      if (value) {\n        reducedStyleTypes.push([`border-${type}`, value]);\n        // Remove it from the full set to not include it in the most specific properties later.\n        borderStyles.forEach(style => delete style[type]);\n      }\n      return reducedStyleTypes;\n    }, []);\n    // The reduced properties (by type) and all that remains that could not be reduced.\n    return [...reducedStyleTypes, ...reduceBorderPosition(topStyles, 'top'), ...reduceBorderPosition(rightStyles, 'right'), ...reduceBorderPosition(bottomStyles, 'bottom'), ...reduceBorderPosition(leftStyles, 'left')];\n  };\n  // @param {Array.<Object>} styles The array of objects with `style`, `color`, `width` properties.\n  // @param {'width'|'style'|'color'} type\n  function getReducedStyleValueForType(styles, type) {\n    return styles.map(style => style[type]).reduce((result, style) => result == style ? result : null);\n  }\n}\nfunction getBorderPositionReducer(which) {\n  return value => reduceBorderPosition(value, which);\n}\n// Returns an array with reduced border styles depending on the specified values.\n//\n// If all border properties (width, style, color) are specified, the returned selector will be\n// merged into a group: `border-*: [width] [style] [color]`.\n//\n// Otherwise, the specific definitions will be returned: `border-(width|style|color)-*: [value]`.\n//\n// @param {Object|null} value Styles if defined.\n// @param {'top'|'right'|'bottom'|'left'|'all'} which The border position.\n// @returns {Array}\nfunction reduceBorderPosition(value, which) {\n  const borderTypes = [];\n  if (value && value.width) {\n    borderTypes.push('width');\n  }\n  if (value && value.style) {\n    borderTypes.push('style');\n  }\n  if (value && value.color) {\n    borderTypes.push('color');\n  }\n  if (borderTypes.length == 3) {\n    const borderValue = borderTypes.map(item => value[item]).join(' ');\n    return [which == 'all' ? ['border', borderValue] : [`border-${which}`, borderValue]];\n  }\n  // We are unable to reduce to a single `border:` property.\n  if (which == 'all') {\n    return [];\n  }\n  return borderTypes.map(type => {\n    return [`border-${which}-${type}`, value[type]];\n  });\n}","map":{"version":3,"names":["getShorthandValues","getBoxSidesValueReducer","getBoxSidesValues","isLength","isLineStyle","addBorderRules","stylesProcessor","setNormalizer","getBorderNormalizer","getBorderPositionNormalizer","getBorderPropertyNormalizer","getBorderPropertyPositionNormalizer","setExtractor","getBorderPositionExtractor","setReducer","getBorderPositionReducer","getBorderReducer","setStyleRelation","value","color","style","width","normalizeBorderShorthand","path","side","border","undefined","propertyName","toBorderPropertyShorthand","property","which","name","styles","extractBorderPosition","string","result","parts","part","test","topStyles","rightStyles","bottomStyles","leftStyles","borderStyles","borderStylesByType","getReducedStyleValueForType","reducedBorderStyle","reduceBorderPosition","length","reducedStyleTypes","Object","entries","reduce","type","push","forEach","map","borderTypes","borderValue","item","join"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/styles/border.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { getShorthandValues, getBoxSidesValueReducer, getBoxSidesValues, isLength, isLineStyle } from './utils';\n/**\n * Adds a border CSS styles processing rules.\n *\n *\t\teditor.data.addStyleProcessorRules( addBorderRules );\n *\n * This rules merges all [border](https://developer.mozilla.org/en-US/docs/Web/CSS/border) styles notation shorthands:\n *\n * - border\n * - border-top\n * - border-right\n * - border-bottom\n * - border-left\n * - border-color\n * - border-style\n * - border-width\n *\n * and all corresponding longhand forms (like `border-top-color`, `border-top-style`, etc).\n *\n * It does not handle other shorthands (like `border-radius` or `border-image`).\n *\n * The normalized model stores border values as:\n *\n *\t\tconst styles = {\n *\t\t\tborder: {\n *\t\t\t\tcolor: { top, right, bottom, left },\n *\t\t\t\tstyle: { top, right, bottom, left },\n *\t\t\t\twidth: { top, right, bottom, left },\n *\t\t\t}\n *\t\t};\n *\n * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor\n */\nexport function addBorderRules(stylesProcessor) {\n    stylesProcessor.setNormalizer('border', getBorderNormalizer());\n    // Border-position shorthands.\n    stylesProcessor.setNormalizer('border-top', getBorderPositionNormalizer('top'));\n    stylesProcessor.setNormalizer('border-right', getBorderPositionNormalizer('right'));\n    stylesProcessor.setNormalizer('border-bottom', getBorderPositionNormalizer('bottom'));\n    stylesProcessor.setNormalizer('border-left', getBorderPositionNormalizer('left'));\n    // Border-property shorthands.\n    stylesProcessor.setNormalizer('border-color', getBorderPropertyNormalizer('color'));\n    stylesProcessor.setNormalizer('border-width', getBorderPropertyNormalizer('width'));\n    stylesProcessor.setNormalizer('border-style', getBorderPropertyNormalizer('style'));\n    // Border longhands.\n    stylesProcessor.setNormalizer('border-top-color', getBorderPropertyPositionNormalizer('color', 'top'));\n    stylesProcessor.setNormalizer('border-top-style', getBorderPropertyPositionNormalizer('style', 'top'));\n    stylesProcessor.setNormalizer('border-top-width', getBorderPropertyPositionNormalizer('width', 'top'));\n    stylesProcessor.setNormalizer('border-right-color', getBorderPropertyPositionNormalizer('color', 'right'));\n    stylesProcessor.setNormalizer('border-right-style', getBorderPropertyPositionNormalizer('style', 'right'));\n    stylesProcessor.setNormalizer('border-right-width', getBorderPropertyPositionNormalizer('width', 'right'));\n    stylesProcessor.setNormalizer('border-bottom-color', getBorderPropertyPositionNormalizer('color', 'bottom'));\n    stylesProcessor.setNormalizer('border-bottom-style', getBorderPropertyPositionNormalizer('style', 'bottom'));\n    stylesProcessor.setNormalizer('border-bottom-width', getBorderPropertyPositionNormalizer('width', 'bottom'));\n    stylesProcessor.setNormalizer('border-left-color', getBorderPropertyPositionNormalizer('color', 'left'));\n    stylesProcessor.setNormalizer('border-left-style', getBorderPropertyPositionNormalizer('style', 'left'));\n    stylesProcessor.setNormalizer('border-left-width', getBorderPropertyPositionNormalizer('width', 'left'));\n    stylesProcessor.setExtractor('border-top', getBorderPositionExtractor('top'));\n    stylesProcessor.setExtractor('border-right', getBorderPositionExtractor('right'));\n    stylesProcessor.setExtractor('border-bottom', getBorderPositionExtractor('bottom'));\n    stylesProcessor.setExtractor('border-left', getBorderPositionExtractor('left'));\n    stylesProcessor.setExtractor('border-top-color', 'border.color.top');\n    stylesProcessor.setExtractor('border-right-color', 'border.color.right');\n    stylesProcessor.setExtractor('border-bottom-color', 'border.color.bottom');\n    stylesProcessor.setExtractor('border-left-color', 'border.color.left');\n    stylesProcessor.setExtractor('border-top-width', 'border.width.top');\n    stylesProcessor.setExtractor('border-right-width', 'border.width.right');\n    stylesProcessor.setExtractor('border-bottom-width', 'border.width.bottom');\n    stylesProcessor.setExtractor('border-left-width', 'border.width.left');\n    stylesProcessor.setExtractor('border-top-style', 'border.style.top');\n    stylesProcessor.setExtractor('border-right-style', 'border.style.right');\n    stylesProcessor.setExtractor('border-bottom-style', 'border.style.bottom');\n    stylesProcessor.setExtractor('border-left-style', 'border.style.left');\n    stylesProcessor.setReducer('border-color', getBoxSidesValueReducer('border-color'));\n    stylesProcessor.setReducer('border-style', getBoxSidesValueReducer('border-style'));\n    stylesProcessor.setReducer('border-width', getBoxSidesValueReducer('border-width'));\n    stylesProcessor.setReducer('border-top', getBorderPositionReducer('top'));\n    stylesProcessor.setReducer('border-right', getBorderPositionReducer('right'));\n    stylesProcessor.setReducer('border-bottom', getBorderPositionReducer('bottom'));\n    stylesProcessor.setReducer('border-left', getBorderPositionReducer('left'));\n    stylesProcessor.setReducer('border', getBorderReducer());\n    stylesProcessor.setStyleRelation('border', [\n        'border-color', 'border-style', 'border-width',\n        'border-top', 'border-right', 'border-bottom', 'border-left',\n        'border-top-color', 'border-right-color', 'border-bottom-color', 'border-left-color',\n        'border-top-style', 'border-right-style', 'border-bottom-style', 'border-left-style',\n        'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width'\n    ]);\n    stylesProcessor.setStyleRelation('border-color', [\n        'border-top-color', 'border-right-color', 'border-bottom-color', 'border-left-color'\n    ]);\n    stylesProcessor.setStyleRelation('border-style', [\n        'border-top-style', 'border-right-style', 'border-bottom-style', 'border-left-style'\n    ]);\n    stylesProcessor.setStyleRelation('border-width', [\n        'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width'\n    ]);\n    stylesProcessor.setStyleRelation('border-top', ['border-top-color', 'border-top-style', 'border-top-width']);\n    stylesProcessor.setStyleRelation('border-right', ['border-right-color', 'border-right-style', 'border-right-width']);\n    stylesProcessor.setStyleRelation('border-bottom', ['border-bottom-color', 'border-bottom-style', 'border-bottom-width']);\n    stylesProcessor.setStyleRelation('border-left', ['border-left-color', 'border-left-style', 'border-left-width']);\n}\nfunction getBorderNormalizer() {\n    return value => {\n        const { color, style, width } = normalizeBorderShorthand(value);\n        return {\n            path: 'border',\n            value: {\n                color: getBoxSidesValues(color),\n                style: getBoxSidesValues(style),\n                width: getBoxSidesValues(width)\n            }\n        };\n    };\n}\nfunction getBorderPositionNormalizer(side) {\n    return value => {\n        const { color, style, width } = normalizeBorderShorthand(value);\n        const border = {};\n        if (color !== undefined) {\n            border.color = { [side]: color };\n        }\n        if (style !== undefined) {\n            border.style = { [side]: style };\n        }\n        if (width !== undefined) {\n            border.width = { [side]: width };\n        }\n        return {\n            path: 'border',\n            value: border\n        };\n    };\n}\nfunction getBorderPropertyNormalizer(propertyName) {\n    return value => {\n        return {\n            path: 'border',\n            value: toBorderPropertyShorthand(value, propertyName)\n        };\n    };\n}\nfunction toBorderPropertyShorthand(value, property) {\n    return {\n        [property]: getBoxSidesValues(value)\n    };\n}\nfunction getBorderPropertyPositionNormalizer(property, side) {\n    return value => {\n        return {\n            path: 'border',\n            value: {\n                [property]: {\n                    [side]: value\n                }\n            }\n        };\n    };\n}\nfunction getBorderPositionExtractor(which) {\n    return (name, styles) => {\n        if (styles.border) {\n            return extractBorderPosition(styles.border, which);\n        }\n    };\n}\nfunction extractBorderPosition(border, which) {\n    const value = {};\n    if (border.width && border.width[which]) {\n        value.width = border.width[which];\n    }\n    if (border.style && border.style[which]) {\n        value.style = border.style[which];\n    }\n    if (border.color && border.color[which]) {\n        value.color = border.color[which];\n    }\n    return value;\n}\nfunction normalizeBorderShorthand(string) {\n    const result = {};\n    const parts = getShorthandValues(string);\n    for (const part of parts) {\n        if (isLength(part) || /thin|medium|thick/.test(part)) {\n            result.width = part;\n        }\n        else if (isLineStyle(part)) {\n            result.style = part;\n        }\n        else {\n            result.color = part;\n        }\n    }\n    return result;\n}\n// The border reducer factory.\n//\n// It tries to produce the most optimal output for the specified styles.\n//\n// For a border style:\n//\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//\n// It will produce: `border-style: solid`.\n// For a border style and color:\n//\n//      color: {top: \"#ff0\", bottom: \"#ff0\", right: \"#ff0\", left: \"#ff0\"}\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//\n// It will produce: `border-color: #ff0; border-style: solid`.\n// If all border parameters are specified:\n//\n//      color: {top: \"#ff0\", bottom: \"#ff0\", right: \"#ff0\", left: \"#ff0\"}\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//      width: {top: \"2px\", bottom: \"2px\", right: \"2px\", left: \"2px\"}\n//\n// It will combine everything into a single property: `border: 2px solid #ff0`.\n//\n// The definitions are merged only if all border selectors have the same values.\n//\n// @returns {Function}\nfunction getBorderReducer() {\n    return value => {\n        const topStyles = extractBorderPosition(value, 'top');\n        const rightStyles = extractBorderPosition(value, 'right');\n        const bottomStyles = extractBorderPosition(value, 'bottom');\n        const leftStyles = extractBorderPosition(value, 'left');\n        const borderStyles = [topStyles, rightStyles, bottomStyles, leftStyles];\n        const borderStylesByType = {\n            width: getReducedStyleValueForType(borderStyles, 'width'),\n            style: getReducedStyleValueForType(borderStyles, 'style'),\n            color: getReducedStyleValueForType(borderStyles, 'color')\n        };\n        // Try reducing to a single `border:` property.\n        const reducedBorderStyle = reduceBorderPosition(borderStylesByType, 'all');\n        if (reducedBorderStyle.length) {\n            return reducedBorderStyle;\n        }\n        // Try reducing to `border-style:`, `border-width:`, `border-color:` properties.\n        const reducedStyleTypes = Object.entries(borderStylesByType).reduce((reducedStyleTypes, [type, value]) => {\n            if (value) {\n                reducedStyleTypes.push([`border-${type}`, value]);\n                // Remove it from the full set to not include it in the most specific properties later.\n                borderStyles.forEach(style => delete style[type]);\n            }\n            return reducedStyleTypes;\n        }, []);\n        // The reduced properties (by type) and all that remains that could not be reduced.\n        return [\n            ...reducedStyleTypes,\n            ...reduceBorderPosition(topStyles, 'top'),\n            ...reduceBorderPosition(rightStyles, 'right'),\n            ...reduceBorderPosition(bottomStyles, 'bottom'),\n            ...reduceBorderPosition(leftStyles, 'left')\n        ];\n    };\n    // @param {Array.<Object>} styles The array of objects with `style`, `color`, `width` properties.\n    // @param {'width'|'style'|'color'} type\n    function getReducedStyleValueForType(styles, type) {\n        return styles\n            .map(style => style[type])\n            .reduce((result, style) => result == style ? result : null);\n    }\n}\nfunction getBorderPositionReducer(which) {\n    return value => reduceBorderPosition(value, which);\n}\n// Returns an array with reduced border styles depending on the specified values.\n//\n// If all border properties (width, style, color) are specified, the returned selector will be\n// merged into a group: `border-*: [width] [style] [color]`.\n//\n// Otherwise, the specific definitions will be returned: `border-(width|style|color)-*: [value]`.\n//\n// @param {Object|null} value Styles if defined.\n// @param {'top'|'right'|'bottom'|'left'|'all'} which The border position.\n// @returns {Array}\nfunction reduceBorderPosition(value, which) {\n    const borderTypes = [];\n    if (value && (value.width)) {\n        borderTypes.push('width');\n    }\n    if (value && (value.style)) {\n        borderTypes.push('style');\n    }\n    if (value && (value.color)) {\n        borderTypes.push('color');\n    }\n    if (borderTypes.length == 3) {\n        const borderValue = borderTypes.map(item => value[item]).join(' ');\n        return [\n            which == 'all' ? ['border', borderValue] : [`border-${which}`, borderValue]\n        ];\n    }\n    // We are unable to reduce to a single `border:` property.\n    if (which == 'all') {\n        return [];\n    }\n    return borderTypes.map(type => {\n        return [`border-${which}-${type}`, value[type]];\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}