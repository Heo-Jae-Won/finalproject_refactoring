{"ast":null,"code":"var _jsxFileName = \"C:\\\\data\\\\project\\\\realproject\\\\src\\\\my\\\\MyChatList.jsx\",\n  _s = $RefreshSig$();\nimport { addDoc, collection, deleteDoc, doc, getFirestore, limit, onSnapshot, orderBy, query } from 'firebase/firestore';\nimport moment from 'moment/moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Form, Row } from 'react-bootstrap';\nimport { UserContext } from '../context/UserContext';\nimport { app } from '../fireStore';\nimport './chat.css';\nimport MyChatItem from './MyChatItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyChatList = _ref => {\n  _s();\n  let {\n    match\n  } = _ref;\n  const {\n    loginUser\n  } = useContext(UserContext);\n  const db = getFirestore(app);\n  const roomId = match.params.roomId;\n  const [msg, setMsg] = useState('');\n  const [messages, setMessages] = useState(null);\n\n  //Doc element를 최초 생성\n  const sendMessage = async e => {\n    if (e.keyCode === 13) {\n      if (msg === '') {\n        alert('보낼 내용을 입력하세요');\n        return;\n      }\n      if (e.ctrlKey) {\n        let val = e.target.value;\n        let start = e.target.selectionStart;\n        let end = e.target.selectionEnd;\n        e.target.value = val.substring(0, start) + \"\\n\" + val.substring(end);\n        setMsg(e.target.value);\n        return false; //  prevent focus\n      }\n\n      await db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\n        uid: loginUser.uid,\n        text: msg,\n        date: moment(new Date()).format('LTS'),\n        uprofile: loginUser.uprofile,\n        unickname: loginUser.unickname\n      });\n      setMsg('');\n    }\n  };\n\n  //만든 Doc element를 fetch. 새로 배열 하나 만들어서 뿌려야함.\n  /*     const getMessages = () => {\r\n          const q = query(\r\n              collection(db, 'messages'),\r\n              orderBy('date', 'asc'),\r\n              limit(100)\r\n          );\r\n  \r\n          onSnapshot(q, (snapshot) => {\r\n              let rows = [];\r\n              snapshot.forEach((doc) => {\r\n                  rows.push({\r\n                      id: doc.id,\r\n                      uid: doc.data().uid,\r\n                      text: doc.data().text,\r\n                      date: doc.data().date,\r\n                      uprofile: doc.data().uprofile,\r\n                      unickname: doc.data().unickname\r\n                  });\r\n              });\r\n              setMessages(rows);\r\n          });\r\n      } */\n\n  const onClickDelete = async id => {\n    if (!window.confirm(`${id}번 알림을 삭제하실래요?`)) return;\n    await deleteDoc(doc(db, 'messages', id));\n  };\n\n  /*     //나중에 roomID 부여하게 되면 roomID로 초기화하면 될듯.\r\n      const onClickDeleteAll = async (roomId) => {\r\n          if (!window.confirm(`삭제하실래요?`)) return;\r\n          await deleteDoc(doc(db, 'messages',roomId));\r\n      } */\n\n  useEffect(() => {\n    if (roomId) {\n      db.collection(\"rooms\").doc(roomId).onSnapshot(snapshot => setRoomName(snapshot.data().unickname));\n      db.collection(\"rooms\").doc(roomId).collection(\"messages\").orderBy(\"date\", \"asc\").onSnapshot(snapshot => setMessages(snapshot.docs.map(doc => doc.data())));\n    }\n  }, [roomId]);\n  if (!messages) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading......\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '50px 0px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrap\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.uid === loginUser.uid ? 'chat ch2' : 'chat ch1',\n        children: /*#__PURE__*/_jsxDEV(MyChatItem, {\n          message: message,\n          onClickDelete: onClickDelete\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mt-5 justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        className: \"d-flex my-3\",\n        style: {\n          width: '52rem'\n        },\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"textarea\",\n          value: msg,\n          onChange: e => setMsg(e.target.value),\n          onKeyDown: sendMessage,\n          placeholder: \"enter\\uB97C \\uB204\\uB974\\uC138\\uC694\",\n          className: \"mx-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(MyChatList, \"iGZZaG5FZKiwM8qCDAPW6B9Bn0s=\");\n_c = MyChatList;\nexport default MyChatList;\nvar _c;\n$RefreshReg$(_c, \"MyChatList\");","map":{"version":3,"names":["addDoc","collection","deleteDoc","doc","getFirestore","limit","onSnapshot","orderBy","query","moment","React","useContext","useEffect","useState","Form","Row","UserContext","app","MyChatItem","MyChatList","match","loginUser","db","roomId","params","msg","setMsg","messages","setMessages","sendMessage","e","keyCode","alert","ctrlKey","val","target","value","start","selectionStart","end","selectionEnd","substring","add","uid","text","date","Date","format","uprofile","unickname","onClickDelete","id","window","confirm","snapshot","setRoomName","data","docs","map","margin","message","width"],"sources":["C:/data/project/realproject/src/my/MyChatList.jsx"],"sourcesContent":["import { addDoc, collection, deleteDoc, doc, getFirestore, limit, onSnapshot, orderBy, query } from 'firebase/firestore';\r\nimport moment from 'moment/moment';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Form, Row } from 'react-bootstrap';\r\nimport { UserContext } from '../context/UserContext';\r\nimport { app } from '../fireStore';\r\nimport './chat.css';\r\nimport MyChatItem from './MyChatItem';\r\n\r\nconst MyChatList = ({match}) => {\r\n    const { loginUser } = useContext(UserContext);\r\n    const db = getFirestore(app);\r\n    const roomId=match.params.roomId\r\n    const [msg, setMsg] = useState('');\r\n    const [messages, setMessages] = useState(null);\r\n\r\n    //Doc element를 최초 생성\r\n    const sendMessage = async (e) => {\r\n        if (e.keyCode === 13) {\r\n            if (msg === '') {\r\n                alert('보낼 내용을 입력하세요')\r\n                return;\r\n            }\r\n            if (e.ctrlKey) {\r\n                let val = e.target.value;\r\n                let start = e.target.selectionStart;\r\n                let end = e.target.selectionEnd;\r\n                e.target.value = val.substring(0, start) + \"\\n\" + val.substring(end);\r\n                setMsg(e.target.value);\r\n                return false; //  prevent focus\r\n            }\r\n\r\n            await db.collection(\"rooms\")\r\n                .doc(roomId)\r\n                .collection(\"messages\")\r\n                .add({\r\n                    uid: loginUser.uid,\r\n                    text: msg,\r\n                    date: moment(new Date()).format('LTS'),\r\n                    uprofile: loginUser.uprofile,\r\n                    unickname: loginUser.unickname\r\n                })\r\n            setMsg('');\r\n        }\r\n    }\r\n\r\n    //만든 Doc element를 fetch. 새로 배열 하나 만들어서 뿌려야함.\r\n/*     const getMessages = () => {\r\n        const q = query(\r\n            collection(db, 'messages'),\r\n            orderBy('date', 'asc'),\r\n            limit(100)\r\n        );\r\n\r\n        onSnapshot(q, (snapshot) => {\r\n            let rows = [];\r\n            snapshot.forEach((doc) => {\r\n                rows.push({\r\n                    id: doc.id,\r\n                    uid: doc.data().uid,\r\n                    text: doc.data().text,\r\n                    date: doc.data().date,\r\n                    uprofile: doc.data().uprofile,\r\n                    unickname: doc.data().unickname\r\n                });\r\n            });\r\n            setMessages(rows);\r\n        });\r\n    } */\r\n\r\n    const onClickDelete = async (id) => {\r\n        if (!window.confirm(`${id}번 알림을 삭제하실래요?`)) return;\r\n        await deleteDoc(doc(db, 'messages', id));\r\n    }\r\n\r\n    /*     //나중에 roomID 부여하게 되면 roomID로 초기화하면 될듯.\r\n        const onClickDeleteAll = async (roomId) => {\r\n            if (!window.confirm(`삭제하실래요?`)) return;\r\n            await deleteDoc(doc(db, 'messages',roomId));\r\n        } */\r\n\r\n    useEffect(() => {\r\n        if (roomId) {\r\n            db.collection(\"rooms\")\r\n                .doc(roomId)\r\n                .onSnapshot((snapshot) => setRoomName(snapshot.data().unickname));\r\n\r\n            db.collection(\"rooms\")\r\n                .doc(roomId)\r\n                .collection(\"messages\")\r\n                .orderBy(\"date\", \"asc\")\r\n                .onSnapshot((snapshot) =>\r\n                    setMessages(snapshot.docs.map((doc) => doc.data()))\r\n                );\r\n        }\r\n    }, [roomId]);\r\n\r\n    if (!messages) return <h1>Loading......</h1>\r\n\r\n    return (\r\n        <div style={{ margin: '50px 0px' }}>\r\n            {/*         <Button onClick={()=>onClickDeleteAll()}>채팅창초기화</Button> */}\r\n            <div className=\"wrap\">\r\n\r\n                {messages.map(message =>\r\n                    <div className={message.uid === loginUser.uid ? 'chat ch2' : 'chat ch1'}>\r\n                        <MyChatItem key={message.id}\r\n                            message={message}\r\n                            onClickDelete={onClickDelete} />\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n\r\n            <Row className=\"mt-5 justify-content-center\">\r\n                <Form className=\"d-flex my-3\" style={{ width: '52rem' }}>\r\n                    <Form.Control\r\n                        as=\"textarea\"\r\n                        value={msg}\r\n                        onChange={(e) => setMsg(e.target.value)}\r\n                        onKeyDown={sendMessage}\r\n                        placeholder='enter를 누르세요' className=\"mx-2\" />\r\n                </Form>\r\n            </Row>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default MyChatList"],"mappings":"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"},"metadata":{},"sourceType":"module"}