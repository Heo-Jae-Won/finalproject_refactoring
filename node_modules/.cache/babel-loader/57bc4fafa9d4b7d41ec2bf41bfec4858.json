{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/domeventobserver\n */\nimport Observer from './observer';\nimport DomEventData from './domeventdata';\n/**\n * Base class for DOM event observers. This class handles\n * {@link module:engine/view/observer/observer~Observer#observe adding} listeners to DOM elements,\n * {@link module:engine/view/observer/observer~Observer#disable disabling} and\n * {@link module:engine/view/observer/observer~Observer#enable re-enabling} events.\n * Child class needs to define\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#domEventType DOM event type} and\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#onDomEvent callback}.\n *\n * For instance:\n *\n *\t\tclass ClickObserver extends DomEventObserver {\n *\t\t\t// It can also be defined as a normal property in the constructor.\n *\t\t\tget domEventType() {\n *\t\t\t\treturn 'click';\n *\t\t\t}\n *\n *\t\t\tonDomEvent( domEvent ) {\n *\t\t\t\tthis.fire( 'click', domEvent );\n *\t\t\t}\n *\t\t}\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DomEventObserver extends Observer {\n  /**\n   * @inheritDoc\n   */\n  constructor(view) {\n    super(view);\n    /**\n     * If set to `true` DOM events will be listened on the capturing phase.\n     * Default value is `false`.\n     *\n     * @member {Boolean}\n     */\n    this.useCapture = false;\n  }\n  /**\n   * @inheritDoc\n   */\n  observe(domElement) {\n    const types = typeof this.domEventType == 'string' ? [this.domEventType] : this.domEventType;\n    types.forEach(type => {\n      this.listenTo(domElement, type, (eventInfo, domEvent) => {\n        if (this.isEnabled && !this.checkShouldIgnoreEventFromTarget(domEvent.target)) {\n          this.onDomEvent(domEvent);\n        }\n      }, {\n        useCapture: this.useCapture\n      });\n    });\n  }\n  /**\n   * Calls `Document#fire()` if observer {@link #isEnabled is enabled}.\n   *\n   * @see module:utils/emittermixin~EmitterMixin#fire\n   * @param {String} eventType The event type (name).\n   * @param {Event} domEvent The DOM event.\n   * @param {Object} [additionalData] The additional data which should extend the\n   * {@link module:engine/view/observer/domeventdata~DomEventData event data} object.\n   */\n  fire(eventType, domEvent, additionalData) {\n    if (this.isEnabled) {\n      this.document.fire(eventType, new DomEventData(this.view, domEvent, additionalData));\n    }\n  }\n}","map":{"version":3,"names":["Observer","DomEventData","DomEventObserver","constructor","view","useCapture","observe","domElement","types","domEventType","forEach","type","listenTo","eventInfo","domEvent","isEnabled","checkShouldIgnoreEventFromTarget","target","onDomEvent","fire","eventType","additionalData","document"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/domeventobserver\n */\nimport Observer from './observer';\nimport DomEventData from './domeventdata';\n/**\n * Base class for DOM event observers. This class handles\n * {@link module:engine/view/observer/observer~Observer#observe adding} listeners to DOM elements,\n * {@link module:engine/view/observer/observer~Observer#disable disabling} and\n * {@link module:engine/view/observer/observer~Observer#enable re-enabling} events.\n * Child class needs to define\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#domEventType DOM event type} and\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#onDomEvent callback}.\n *\n * For instance:\n *\n *\t\tclass ClickObserver extends DomEventObserver {\n *\t\t\t// It can also be defined as a normal property in the constructor.\n *\t\t\tget domEventType() {\n *\t\t\t\treturn 'click';\n *\t\t\t}\n *\n *\t\t\tonDomEvent( domEvent ) {\n *\t\t\t\tthis.fire( 'click', domEvent );\n *\t\t\t}\n *\t\t}\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DomEventObserver extends Observer {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        /**\n         * If set to `true` DOM events will be listened on the capturing phase.\n         * Default value is `false`.\n         *\n         * @member {Boolean}\n         */\n        this.useCapture = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    observe(domElement) {\n        const types = typeof this.domEventType == 'string' ? [this.domEventType] : this.domEventType;\n        types.forEach(type => {\n            this.listenTo(domElement, type, (eventInfo, domEvent) => {\n                if (this.isEnabled && !this.checkShouldIgnoreEventFromTarget(domEvent.target)) {\n                    this.onDomEvent(domEvent);\n                }\n            }, { useCapture: this.useCapture });\n        });\n    }\n    /**\n     * Calls `Document#fire()` if observer {@link #isEnabled is enabled}.\n     *\n     * @see module:utils/emittermixin~EmitterMixin#fire\n     * @param {String} eventType The event type (name).\n     * @param {Event} domEvent The DOM event.\n     * @param {Object} [additionalData] The additional data which should extend the\n     * {@link module:engine/view/observer/domeventdata~DomEventData event data} object.\n     */\n    fire(eventType, domEvent, additionalData) {\n        if (this.isEnabled) {\n            this.document.fire(eventType, new DomEventData(this.view, domEvent, additionalData));\n        }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,YAAY;AACjC,OAAOC,YAAY,MAAM,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,gBAAgB,SAASF,QAAQ,CAAC;EACnD;AACJ;AACA;EACIG,WAAW,CAACC,IAAI,EAAE;IACd,KAAK,CAACA,IAAI,CAAC;IACX;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,KAAK;EAC3B;EACA;AACJ;AACA;EACIC,OAAO,CAACC,UAAU,EAAE;IAChB,MAAMC,KAAK,GAAG,OAAO,IAAI,CAACC,YAAY,IAAI,QAAQ,GAAG,CAAC,IAAI,CAACA,YAAY,CAAC,GAAG,IAAI,CAACA,YAAY;IAC5FD,KAAK,CAACE,OAAO,CAACC,IAAI,IAAI;MAClB,IAAI,CAACC,QAAQ,CAACL,UAAU,EAAEI,IAAI,EAAE,CAACE,SAAS,EAAEC,QAAQ,KAAK;QACrD,IAAI,IAAI,CAACC,SAAS,IAAI,CAAC,IAAI,CAACC,gCAAgC,CAACF,QAAQ,CAACG,MAAM,CAAC,EAAE;UAC3E,IAAI,CAACC,UAAU,CAACJ,QAAQ,CAAC;QAC7B;MACJ,CAAC,EAAE;QAAET,UAAU,EAAE,IAAI,CAACA;MAAW,CAAC,CAAC;IACvC,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIc,IAAI,CAACC,SAAS,EAAEN,QAAQ,EAAEO,cAAc,EAAE;IACtC,IAAI,IAAI,CAACN,SAAS,EAAE;MAChB,IAAI,CAACO,QAAQ,CAACH,IAAI,CAACC,SAAS,EAAE,IAAInB,YAAY,CAAC,IAAI,CAACG,IAAI,EAAEU,QAAQ,EAAEO,cAAc,CAAC,CAAC;IACxF;EACJ;AACJ"},"metadata":{},"sourceType":"module"}