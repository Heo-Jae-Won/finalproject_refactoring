{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* globals Node */\n/**\n * @module utils/dom/getancestors\n */\n/**\n * Returns all ancestors of given DOM node, starting from the top-most (root). Includes the given node itself. If the\n * node is a part of `DocumentFragment` that `DocumentFragment` will be returned. In contrary, if the node is\n * appended to a `Document`, that `Document` will not be returned (algorithms operating on DOM tree care for `Document#documentElement`\n * at most, which will be returned).\n *\n * @param {Node} node DOM node.\n * @returns {Array.<Node|DocumentFragment>} Array of given `node` parents.\n */\nexport default function getAncestors(node) {\n  const nodes = [];\n  let currentNode = node;\n  // We are interested in `Node`s `DocumentFragment`s only.\n  while (currentNode && currentNode.nodeType != Node.DOCUMENT_NODE) {\n    nodes.unshift(currentNode);\n    currentNode = currentNode.parentNode;\n  }\n  return nodes;\n}","map":{"version":3,"names":["getAncestors","node","nodes","currentNode","nodeType","Node","DOCUMENT_NODE","unshift","parentNode"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/dom/getancestors.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* globals Node */\n/**\n * @module utils/dom/getancestors\n */\n/**\n * Returns all ancestors of given DOM node, starting from the top-most (root). Includes the given node itself. If the\n * node is a part of `DocumentFragment` that `DocumentFragment` will be returned. In contrary, if the node is\n * appended to a `Document`, that `Document` will not be returned (algorithms operating on DOM tree care for `Document#documentElement`\n * at most, which will be returned).\n *\n * @param {Node} node DOM node.\n * @returns {Array.<Node|DocumentFragment>} Array of given `node` parents.\n */\nexport default function getAncestors(node) {\n    const nodes = [];\n    let currentNode = node;\n    // We are interested in `Node`s `DocumentFragment`s only.\n    while (currentNode && currentNode.nodeType != Node.DOCUMENT_NODE) {\n        nodes.unshift(currentNode);\n        currentNode = currentNode.parentNode;\n    }\n    return nodes;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,YAAY,CAACC,IAAI,EAAE;EACvC,MAAMC,KAAK,GAAG,EAAE;EAChB,IAAIC,WAAW,GAAGF,IAAI;EACtB;EACA,OAAOE,WAAW,IAAIA,WAAW,CAACC,QAAQ,IAAIC,IAAI,CAACC,aAAa,EAAE;IAC9DJ,KAAK,CAACK,OAAO,CAACJ,WAAW,CAAC;IAC1BA,WAAW,GAAGA,WAAW,CAACK,UAAU;EACxC;EACA,OAAON,KAAK;AAChB"},"metadata":{},"sourceType":"module"}