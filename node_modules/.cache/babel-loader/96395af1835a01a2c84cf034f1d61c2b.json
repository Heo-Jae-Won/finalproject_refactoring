{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgettoolbarrepository\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\nimport BalloonPanelView from '@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview';\nimport { isWidget } from './utils';\nimport CKEditorError, { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Widget toolbar repository plugin. A central point for registering widget toolbars. This plugin handles the whole\n * toolbar rendering process and exposes a concise API.\n *\n * To add a toolbar for your widget use the {@link ~WidgetToolbarRepository#register `WidgetToolbarRepository#register()`} method.\n *\n * The following example comes from the {@link module:image/imagetoolbar~ImageToolbar} plugin:\n *\n * \t\tclass ImageToolbar extends Plugin {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ WidgetToolbarRepository ];\n *\t\t\t}\n *\n *\t\t\tafterInit() {\n *\t\t\t\tconst editor = this.editor;\n *\t\t\t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n *\n *\t\t\t\twidgetToolbarRepository.register( 'image', {\n *\t\t\t\t\titems: editor.config.get( 'image.toolbar' ),\n *\t\t\t\t\tgetRelatedElement: getClosestSelectedImageWidget\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n */\nexport default class WidgetToolbarRepository extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ContextualBalloon];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'WidgetToolbarRepository';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    const editor = this.editor;\n\n    // Disables the default balloon toolbar for all widgets.\n    if (editor.plugins.has('BalloonToolbar')) {\n      const balloonToolbar = editor.plugins.get('BalloonToolbar');\n      this.listenTo(balloonToolbar, 'show', evt => {\n        if (isWidgetSelected(editor.editing.view.document.selection)) {\n          evt.stop();\n        }\n      }, {\n        priority: 'high'\n      });\n    }\n\n    /**\n     * A map of toolbar definitions.\n     *\n     * @protected\n     * @member {Map.<String,module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition>} #_toolbarDefinitions\n     */\n    this._toolbarDefinitions = new Map();\n\n    /**\n     * @private\n     */\n    this._balloon = this.editor.plugins.get('ContextualBalloon');\n    this.on('change:isEnabled', () => {\n      this._updateToolbarsVisibility();\n    });\n    this.listenTo(editor.ui, 'update', () => {\n      this._updateToolbarsVisibility();\n    });\n\n    // UI#update is not fired after focus is back in editor, we need to check if balloon panel should be visible.\n    this.listenTo(editor.ui.focusTracker, 'change:isFocused', () => {\n      this._updateToolbarsVisibility();\n    }, {\n      priority: 'low'\n    });\n  }\n  destroy() {\n    super.destroy();\n    for (const toolbarConfig of this._toolbarDefinitions.values()) {\n      toolbarConfig.view.destroy();\n    }\n  }\n\n  /**\n   * Registers toolbar in the WidgetToolbarRepository. It renders it in the `ContextualBalloon` based on the value of the invoked\n   * `getRelatedElement` function. Toolbar items are gathered from `items` array.\n   * The balloon's CSS class is by default `ck-toolbar-container` and may be override with the `balloonClassName` option.\n   *\n   * Note: This method should be called in the {@link module:core/plugin~PluginInterface#afterInit `Plugin#afterInit()`}\n   * callback (or later) to make sure that the given toolbar items were already registered by other plugins.\n   *\n   * @param {String} toolbarId An id for the toolbar. Used to\n   * @param {Object} options\n   * @param {String} [options.ariaLabel] Label used by assistive technologies to describe this toolbar element.\n   * @param {Array.<String>} options.items Array of toolbar items.\n   * @param {Function} options.getRelatedElement Callback which returns an element the toolbar should be attached to.\n   * @param {String} [options.balloonClassName='ck-toolbar-container'] CSS class for the widget balloon.\n   */\n  register(toolbarId, _ref) {\n    let {\n      ariaLabel,\n      items,\n      getRelatedElement,\n      balloonClassName = 'ck-toolbar-container'\n    } = _ref;\n    // Trying to register a toolbar without any item.\n    if (!items.length) {\n      /**\n       * When {@link #register registering} a new widget toolbar, you need to provide a non-empty array with\n       * the items that will be inserted into the toolbar.\n       *\n       * If you see this error when integrating the editor, you likely forgot to configure one of the widget toolbars.\n       *\n       * See for instance:\n       *\n       * * {@link module:table/table~TableConfig#contentToolbar `config.table.contentToolbar`}\n       * * {@link module:image/image~ImageConfig#toolbar `config.image.toolbar`}\n       *\n       * @error widget-toolbar-no-items\n       * @param {String} toolbarId The id of the toolbar that has not been configured correctly.\n       */\n      logWarning('widget-toolbar-no-items', {\n        toolbarId\n      });\n      return;\n    }\n    const editor = this.editor;\n    const t = editor.t;\n    const toolbarView = new ToolbarView(editor.locale);\n    toolbarView.ariaLabel = ariaLabel || t('Widget toolbar');\n    if (this._toolbarDefinitions.has(toolbarId)) {\n      /**\n       * Toolbar with the given id was already added.\n       *\n       * @error widget-toolbar-duplicated\n       * @param toolbarId Toolbar id.\n       */\n      throw new CKEditorError('widget-toolbar-duplicated', this, {\n        toolbarId\n      });\n    }\n    toolbarView.fillFromConfig(items, editor.ui.componentFactory);\n    const toolbarDefinition = {\n      view: toolbarView,\n      getRelatedElement,\n      balloonClassName\n    };\n\n    // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n    editor.ui.addToolbar(toolbarView, {\n      isContextual: true,\n      beforeFocus: () => {\n        const relatedElement = getRelatedElement(editor.editing.view.document.selection);\n        if (relatedElement) {\n          this._showToolbar(toolbarDefinition, relatedElement);\n        }\n      },\n      afterBlur: () => {\n        this._hideToolbar(toolbarDefinition);\n      }\n    });\n    this._toolbarDefinitions.set(toolbarId, toolbarDefinition);\n  }\n\n  /**\n   * Iterates over stored toolbars and makes them visible or hidden.\n   *\n   * @private\n   */\n  _updateToolbarsVisibility() {\n    let maxRelatedElementDepth = 0;\n    let deepestRelatedElement = null;\n    let deepestToolbarDefinition = null;\n    for (const definition of this._toolbarDefinitions.values()) {\n      const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n      if (!this.isEnabled || !relatedElement) {\n        if (this._isToolbarInBalloon(definition)) {\n          this._hideToolbar(definition);\n        }\n      } else if (!this.editor.ui.focusTracker.isFocused) {\n        if (this._isToolbarVisible(definition)) {\n          this._hideToolbar(definition);\n        }\n      } else {\n        const relatedElementDepth = relatedElement.getAncestors().length;\n\n        // Many toolbars can express willingness to be displayed but they do not know about\n        // each other. Figure out which toolbar is deepest in the view tree to decide which\n        // should be displayed. For instance, if a selected image is inside a table cell, display\n        // the ImageToolbar rather than the TableToolbar (#60).\n        if (relatedElementDepth > maxRelatedElementDepth) {\n          maxRelatedElementDepth = relatedElementDepth;\n          deepestRelatedElement = relatedElement;\n          deepestToolbarDefinition = definition;\n        }\n      }\n    }\n    if (deepestToolbarDefinition) {\n      this._showToolbar(deepestToolbarDefinition, deepestRelatedElement);\n    }\n  }\n\n  /**\n   * Hides the given toolbar.\n   *\n   * @private\n   * @param {module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition} toolbarDefinition\n   */\n  _hideToolbar(toolbarDefinition) {\n    this._balloon.remove(toolbarDefinition.view);\n    this.stopListening(this._balloon, 'change:visibleView');\n  }\n\n  /**\n   * Shows up the toolbar if the toolbar is not visible.\n   * Otherwise, repositions the toolbar's balloon when toolbar's view is the most top view in balloon stack.\n   *\n   * It might happen here that the toolbar's view is under another view. Then do nothing as the other toolbar view\n   * should be still visible after the {@link module:core/editor/editorui~EditorUI#event:update}.\n   *\n   * @private\n   * @param {module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition} toolbarDefinition\n   * @param {module:engine/view/element~Element} relatedElement\n   */\n  _showToolbar(toolbarDefinition, relatedElement) {\n    if (this._isToolbarVisible(toolbarDefinition)) {\n      repositionContextualBalloon(this.editor, relatedElement);\n    } else if (!this._isToolbarInBalloon(toolbarDefinition)) {\n      this._balloon.add({\n        view: toolbarDefinition.view,\n        position: getBalloonPositionData(this.editor, relatedElement),\n        balloonClassName: toolbarDefinition.balloonClassName\n      });\n\n      // Update toolbar position each time stack with toolbar view is switched to visible.\n      // This is in a case target element has changed when toolbar was in invisible stack\n      // e.g. target image was wrapped by a block quote.\n      // See https://github.com/ckeditor/ckeditor5-widget/issues/92.\n      this.listenTo(this._balloon, 'change:visibleView', () => {\n        for (const definition of this._toolbarDefinitions.values()) {\n          if (this._isToolbarVisible(definition)) {\n            const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n            repositionContextualBalloon(this.editor, relatedElement);\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * @private\n   * @param {Object} toolbar\n   * @returns {Boolean}\n   */\n  _isToolbarVisible(toolbar) {\n    return this._balloon.visibleView === toolbar.view;\n  }\n\n  /**\n   * @private\n   * @param {Object} toolbar\n   * @returns {Boolean}\n   */\n  _isToolbarInBalloon(toolbar) {\n    return this._balloon.hasView(toolbar.view);\n  }\n}\nfunction repositionContextualBalloon(editor, relatedElement) {\n  const balloon = editor.plugins.get('ContextualBalloon');\n  const position = getBalloonPositionData(editor, relatedElement);\n  balloon.updatePosition(position);\n}\nfunction getBalloonPositionData(editor, relatedElement) {\n  const editingView = editor.editing.view;\n  const defaultPositions = BalloonPanelView.defaultPositions;\n  return {\n    target: editingView.domConverter.mapViewToDom(relatedElement),\n    positions: [defaultPositions.northArrowSouth, defaultPositions.northArrowSouthWest, defaultPositions.northArrowSouthEast, defaultPositions.southArrowNorth, defaultPositions.southArrowNorthWest, defaultPositions.southArrowNorthEast, defaultPositions.viewportStickyNorth]\n  };\n}\nfunction isWidgetSelected(selection) {\n  const viewElement = selection.getSelectedElement();\n  return !!(viewElement && isWidget(viewElement));\n}\n\n/**\n * The toolbar definition object used by the toolbar repository to manage toolbars.\n * It contains information necessary to display the toolbar in the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} and\n * update it during its life (display) cycle.\n *\n * @typedef {Object} module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition\n *\n * @property {module:ui/view~View} view The UI view of the toolbar.\n * @property {Function} getRelatedElement A function that returns an engine {@link module:engine/view/view~View}\n * element the toolbar is to be attached to. For instance, an image widget or a table widget (or `null` when\n * there is no such element). The function accepts an instance of {@link module:engine/view/selection~Selection}.\n * @property {String} balloonClassName CSS class for the widget balloon when a toolbar is displayed.\n */","map":{"version":3,"names":["Plugin","ContextualBalloon","ToolbarView","BalloonPanelView","isWidget","CKEditorError","logWarning","WidgetToolbarRepository","requires","pluginName","init","editor","plugins","has","balloonToolbar","get","listenTo","evt","isWidgetSelected","editing","view","document","selection","stop","priority","_toolbarDefinitions","Map","_balloon","on","_updateToolbarsVisibility","ui","focusTracker","destroy","toolbarConfig","values","register","toolbarId","ariaLabel","items","getRelatedElement","balloonClassName","length","t","toolbarView","locale","fillFromConfig","componentFactory","toolbarDefinition","addToolbar","isContextual","beforeFocus","relatedElement","_showToolbar","afterBlur","_hideToolbar","set","maxRelatedElementDepth","deepestRelatedElement","deepestToolbarDefinition","definition","isEnabled","_isToolbarInBalloon","isFocused","_isToolbarVisible","relatedElementDepth","getAncestors","remove","stopListening","repositionContextualBalloon","add","position","getBalloonPositionData","toolbar","visibleView","hasView","balloon","updatePosition","editingView","defaultPositions","target","domConverter","mapViewToDom","positions","northArrowSouth","northArrowSouthWest","northArrowSouthEast","southArrowNorth","southArrowNorthWest","southArrowNorthEast","viewportStickyNorth","viewElement","getSelectedElement"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-widget/src/widgettoolbarrepository.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgettoolbarrepository\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\nimport BalloonPanelView from '@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview';\nimport { isWidget } from './utils';\nimport CKEditorError, { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Widget toolbar repository plugin. A central point for registering widget toolbars. This plugin handles the whole\n * toolbar rendering process and exposes a concise API.\n *\n * To add a toolbar for your widget use the {@link ~WidgetToolbarRepository#register `WidgetToolbarRepository#register()`} method.\n *\n * The following example comes from the {@link module:image/imagetoolbar~ImageToolbar} plugin:\n *\n * \t\tclass ImageToolbar extends Plugin {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ WidgetToolbarRepository ];\n *\t\t\t}\n *\n *\t\t\tafterInit() {\n *\t\t\t\tconst editor = this.editor;\n *\t\t\t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n *\n *\t\t\t\twidgetToolbarRepository.register( 'image', {\n *\t\t\t\t\titems: editor.config.get( 'image.toolbar' ),\n *\t\t\t\t\tgetRelatedElement: getClosestSelectedImageWidget\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n */\nexport default class WidgetToolbarRepository extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ContextualBalloon ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'WidgetToolbarRepository';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Disables the default balloon toolbar for all widgets.\n\t\tif ( editor.plugins.has( 'BalloonToolbar' ) ) {\n\t\t\tconst balloonToolbar = editor.plugins.get( 'BalloonToolbar' );\n\n\t\t\tthis.listenTo( balloonToolbar, 'show', evt => {\n\t\t\t\tif ( isWidgetSelected( editor.editing.view.document.selection ) ) {\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}, { priority: 'high' } );\n\t\t}\n\n\t\t/**\n\t\t * A map of toolbar definitions.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<String,module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition>} #_toolbarDefinitions\n\t\t */\n\t\tthis._toolbarDefinitions = new Map();\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tthis._balloon = this.editor.plugins.get( 'ContextualBalloon' );\n\n\t\tthis.on( 'change:isEnabled', () => {\n\t\t\tthis._updateToolbarsVisibility();\n\t\t} );\n\n\t\tthis.listenTo( editor.ui, 'update', () => {\n\t\t\tthis._updateToolbarsVisibility();\n\t\t} );\n\n\t\t// UI#update is not fired after focus is back in editor, we need to check if balloon panel should be visible.\n\t\tthis.listenTo( editor.ui.focusTracker, 'change:isFocused', () => {\n\t\t\tthis._updateToolbarsVisibility();\n\t\t}, { priority: 'low' } );\n\t}\n\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tfor ( const toolbarConfig of this._toolbarDefinitions.values() ) {\n\t\t\ttoolbarConfig.view.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Registers toolbar in the WidgetToolbarRepository. It renders it in the `ContextualBalloon` based on the value of the invoked\n\t * `getRelatedElement` function. Toolbar items are gathered from `items` array.\n\t * The balloon's CSS class is by default `ck-toolbar-container` and may be override with the `balloonClassName` option.\n\t *\n\t * Note: This method should be called in the {@link module:core/plugin~PluginInterface#afterInit `Plugin#afterInit()`}\n\t * callback (or later) to make sure that the given toolbar items were already registered by other plugins.\n\t *\n\t * @param {String} toolbarId An id for the toolbar. Used to\n\t * @param {Object} options\n\t * @param {String} [options.ariaLabel] Label used by assistive technologies to describe this toolbar element.\n\t * @param {Array.<String>} options.items Array of toolbar items.\n\t * @param {Function} options.getRelatedElement Callback which returns an element the toolbar should be attached to.\n\t * @param {String} [options.balloonClassName='ck-toolbar-container'] CSS class for the widget balloon.\n\t */\n\tregister( toolbarId, { ariaLabel, items, getRelatedElement, balloonClassName = 'ck-toolbar-container' } ) {\n\t\t// Trying to register a toolbar without any item.\n\t\tif ( !items.length ) {\n\t\t\t/**\n\t\t\t * When {@link #register registering} a new widget toolbar, you need to provide a non-empty array with\n\t\t\t * the items that will be inserted into the toolbar.\n\t\t\t *\n\t\t\t * If you see this error when integrating the editor, you likely forgot to configure one of the widget toolbars.\n\t\t\t *\n\t\t\t * See for instance:\n\t\t\t *\n\t\t\t * * {@link module:table/table~TableConfig#contentToolbar `config.table.contentToolbar`}\n\t\t\t * * {@link module:image/image~ImageConfig#toolbar `config.image.toolbar`}\n\t\t\t *\n\t\t\t * @error widget-toolbar-no-items\n\t\t\t * @param {String} toolbarId The id of the toolbar that has not been configured correctly.\n\t\t\t */\n\t\t\tlogWarning( 'widget-toolbar-no-items', { toolbarId } );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst toolbarView = new ToolbarView( editor.locale );\n\n\t\ttoolbarView.ariaLabel = ariaLabel || t( 'Widget toolbar' );\n\n\t\tif ( this._toolbarDefinitions.has( toolbarId ) ) {\n\t\t\t/**\n\t\t\t * Toolbar with the given id was already added.\n\t\t\t *\n\t\t\t * @error widget-toolbar-duplicated\n\t\t\t * @param toolbarId Toolbar id.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'widget-toolbar-duplicated', this, { toolbarId } );\n\t\t}\n\n\t\ttoolbarView.fillFromConfig( items, editor.ui.componentFactory );\n\n\t\tconst toolbarDefinition = {\n\t\t\tview: toolbarView,\n\t\t\tgetRelatedElement,\n\t\t\tballoonClassName\n\t\t};\n\n\t\t// Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n\t\teditor.ui.addToolbar( toolbarView, {\n\t\t\tisContextual: true,\n\t\t\tbeforeFocus: () => {\n\t\t\t\tconst relatedElement = getRelatedElement( editor.editing.view.document.selection );\n\n\t\t\t\tif ( relatedElement ) {\n\t\t\t\t\tthis._showToolbar( toolbarDefinition, relatedElement );\n\t\t\t\t}\n\t\t\t},\n\t\t\tafterBlur: () => {\n\t\t\t\tthis._hideToolbar( toolbarDefinition );\n\t\t\t}\n\t\t} );\n\n\t\tthis._toolbarDefinitions.set( toolbarId, toolbarDefinition );\n\t}\n\n\t/**\n\t * Iterates over stored toolbars and makes them visible or hidden.\n\t *\n\t * @private\n\t */\n\t_updateToolbarsVisibility() {\n\t\tlet maxRelatedElementDepth = 0;\n\t\tlet deepestRelatedElement = null;\n\t\tlet deepestToolbarDefinition = null;\n\n\t\tfor ( const definition of this._toolbarDefinitions.values() ) {\n\t\t\tconst relatedElement = definition.getRelatedElement( this.editor.editing.view.document.selection );\n\n\t\t\tif ( !this.isEnabled || !relatedElement ) {\n\t\t\t\tif ( this._isToolbarInBalloon( definition ) ) {\n\t\t\t\t\tthis._hideToolbar( definition );\n\t\t\t\t}\n\t\t\t} else if ( !this.editor.ui.focusTracker.isFocused ) {\n\t\t\t\tif ( this._isToolbarVisible( definition ) ) {\n\t\t\t\t\tthis._hideToolbar( definition );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst relatedElementDepth = relatedElement.getAncestors().length;\n\n\t\t\t\t// Many toolbars can express willingness to be displayed but they do not know about\n\t\t\t\t// each other. Figure out which toolbar is deepest in the view tree to decide which\n\t\t\t\t// should be displayed. For instance, if a selected image is inside a table cell, display\n\t\t\t\t// the ImageToolbar rather than the TableToolbar (#60).\n\t\t\t\tif ( relatedElementDepth > maxRelatedElementDepth ) {\n\t\t\t\t\tmaxRelatedElementDepth = relatedElementDepth;\n\t\t\t\t\tdeepestRelatedElement = relatedElement;\n\t\t\t\t\tdeepestToolbarDefinition = definition;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( deepestToolbarDefinition ) {\n\t\t\tthis._showToolbar( deepestToolbarDefinition, deepestRelatedElement );\n\t\t}\n\t}\n\n\t/**\n\t * Hides the given toolbar.\n\t *\n\t * @private\n\t * @param {module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition} toolbarDefinition\n\t */\n\t_hideToolbar( toolbarDefinition ) {\n\t\tthis._balloon.remove( toolbarDefinition.view );\n\t\tthis.stopListening( this._balloon, 'change:visibleView' );\n\t}\n\n\t/**\n\t * Shows up the toolbar if the toolbar is not visible.\n\t * Otherwise, repositions the toolbar's balloon when toolbar's view is the most top view in balloon stack.\n\t *\n\t * It might happen here that the toolbar's view is under another view. Then do nothing as the other toolbar view\n\t * should be still visible after the {@link module:core/editor/editorui~EditorUI#event:update}.\n\t *\n\t * @private\n\t * @param {module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition} toolbarDefinition\n\t * @param {module:engine/view/element~Element} relatedElement\n\t */\n\t_showToolbar( toolbarDefinition, relatedElement ) {\n\t\tif ( this._isToolbarVisible( toolbarDefinition ) ) {\n\t\t\trepositionContextualBalloon( this.editor, relatedElement );\n\t\t} else if ( !this._isToolbarInBalloon( toolbarDefinition ) ) {\n\t\t\tthis._balloon.add( {\n\t\t\t\tview: toolbarDefinition.view,\n\t\t\t\tposition: getBalloonPositionData( this.editor, relatedElement ),\n\t\t\t\tballoonClassName: toolbarDefinition.balloonClassName\n\t\t\t} );\n\n\t\t\t// Update toolbar position each time stack with toolbar view is switched to visible.\n\t\t\t// This is in a case target element has changed when toolbar was in invisible stack\n\t\t\t// e.g. target image was wrapped by a block quote.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-widget/issues/92.\n\t\t\tthis.listenTo( this._balloon, 'change:visibleView', () => {\n\t\t\t\tfor ( const definition of this._toolbarDefinitions.values() ) {\n\t\t\t\t\tif ( this._isToolbarVisible( definition ) ) {\n\t\t\t\t\t\tconst relatedElement = definition.getRelatedElement( this.editor.editing.view.document.selection );\n\t\t\t\t\t\trepositionContextualBalloon( this.editor, relatedElement );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {Object} toolbar\n\t * @returns {Boolean}\n\t */\n\t_isToolbarVisible( toolbar ) {\n\t\treturn this._balloon.visibleView === toolbar.view;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Object} toolbar\n\t * @returns {Boolean}\n\t */\n\t_isToolbarInBalloon( toolbar ) {\n\t\treturn this._balloon.hasView( toolbar.view );\n\t}\n}\n\nfunction repositionContextualBalloon( editor, relatedElement ) {\n\tconst balloon = editor.plugins.get( 'ContextualBalloon' );\n\tconst position = getBalloonPositionData( editor, relatedElement );\n\n\tballoon.updatePosition( position );\n}\n\nfunction getBalloonPositionData( editor, relatedElement ) {\n\tconst editingView = editor.editing.view;\n\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\n\treturn {\n\t\ttarget: editingView.domConverter.mapViewToDom( relatedElement ),\n\t\tpositions: [\n\t\t\tdefaultPositions.northArrowSouth,\n\t\t\tdefaultPositions.northArrowSouthWest,\n\t\t\tdefaultPositions.northArrowSouthEast,\n\t\t\tdefaultPositions.southArrowNorth,\n\t\t\tdefaultPositions.southArrowNorthWest,\n\t\t\tdefaultPositions.southArrowNorthEast,\n\t\t\tdefaultPositions.viewportStickyNorth\n\t\t]\n\t};\n}\n\nfunction isWidgetSelected( selection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\treturn !!( viewElement && isWidget( viewElement ) );\n}\n\n/**\n * The toolbar definition object used by the toolbar repository to manage toolbars.\n * It contains information necessary to display the toolbar in the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} and\n * update it during its life (display) cycle.\n *\n * @typedef {Object} module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition\n *\n * @property {module:ui/view~View} view The UI view of the toolbar.\n * @property {Function} getRelatedElement A function that returns an engine {@link module:engine/view/view~View}\n * element the toolbar is to be attached to. For instance, an image widget or a table widget (or `null` when\n * there is no such element). The function accepts an instance of {@link module:engine/view/selection~Selection}.\n * @property {String} balloonClassName CSS class for the widget balloon when a toolbar is displayed.\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}