{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/highlightstack\n */\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Class used to handle correct order of highlights on elements.\n *\n * When different highlights are applied to same element correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\nexport default class HighlightStack {\n  /**\n   * Creates class instance.\n   */\n  constructor() {\n    this._stack = [];\n  }\n\n  /**\n   * Adds highlight descriptor to the stack.\n   *\n   * @fires change:top\n   * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n   */\n  add(descriptor, writer) {\n    const stack = this._stack;\n\n    // Save top descriptor and insert new one. If top is changed - fire event.\n    const oldTop = stack[0];\n    this._insertDescriptor(descriptor);\n    const newTop = stack[0];\n\n    // When new object is at the top and stores different information.\n    if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n      this.fire('change:top', {\n        oldDescriptor: oldTop,\n        newDescriptor: newTop,\n        writer\n      });\n    }\n  }\n\n  /**\n   * Removes highlight descriptor from the stack.\n   *\n   * @fires change:top\n   * @param {String} id Id of the descriptor to remove.\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n   */\n  remove(id, writer) {\n    const stack = this._stack;\n    const oldTop = stack[0];\n    this._removeDescriptor(id);\n    const newTop = stack[0];\n\n    // When new object is at the top and stores different information.\n    if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n      this.fire('change:top', {\n        oldDescriptor: oldTop,\n        newDescriptor: newTop,\n        writer\n      });\n    }\n  }\n\n  /**\n   * Inserts given descriptor in correct place in the stack. It also takes care about updating information when\n   * descriptor with same id is already present.\n   *\n   * @private\n   * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n   */\n  _insertDescriptor(descriptor) {\n    const stack = this._stack;\n    const index = stack.findIndex(item => item.id === descriptor.id);\n\n    // Inserting exact same descriptor - do nothing.\n    if (compareDescriptors(descriptor, stack[index])) {\n      return;\n    }\n\n    // If descriptor with same id but with different information is on the stack - remove it.\n    if (index > -1) {\n      stack.splice(index, 1);\n    }\n\n    // Find correct place to insert descriptor in the stack.\n    // It have different information (for example priority) so it must be re-inserted in correct place.\n    let i = 0;\n    while (stack[i] && shouldABeBeforeB(stack[i], descriptor)) {\n      i++;\n    }\n    stack.splice(i, 0, descriptor);\n  }\n\n  /**\n   * Removes descriptor with given id from the stack.\n   *\n   * @private\n   * @param {String} id Descriptor's id.\n   */\n  _removeDescriptor(id) {\n    const stack = this._stack;\n    const index = stack.findIndex(item => item.id === id);\n\n    // If descriptor with same id is on the list - remove it.\n    if (index > -1) {\n      stack.splice(index, 1);\n    }\n  }\n}\nmix(HighlightStack, EmitterMixin);\n\n// Compares two descriptors by checking their priority and class list.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean} Returns true if both descriptors are defined and have same priority and classes.\nfunction compareDescriptors(a, b) {\n  return a && b && a.priority == b.priority && classesToString(a.classes) == classesToString(b.classes);\n}\n\n// Checks whenever first descriptor should be placed in the stack before second one.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean}\nfunction shouldABeBeforeB(a, b) {\n  if (a.priority > b.priority) {\n    return true;\n  } else if (a.priority < b.priority) {\n    return false;\n  }\n\n  // When priorities are equal and names are different - use classes to compare.\n  return classesToString(a.classes) > classesToString(b.classes);\n}\n\n// Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} to\n// sorted string.\n//\n// @param {String|Array<String>} descriptor\n// @returns {String}\nfunction classesToString(classes) {\n  return Array.isArray(classes) ? classes.sort().join(',') : classes;\n}\n\n/**\n * Fired when top element on {@link module:widget/highlightstack~HighlightStack} has been changed\n *\n * @event change:top\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.newDescriptor] New highlight\n * descriptor. It will be `undefined` when last descriptor is removed from the stack.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.oldDescriptor] Old highlight\n * descriptor. It will be `undefined` when first descriptor is added to the stack.\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that can be used to modify element.\n */","map":{"version":3,"names":["EmitterMixin","mix","HighlightStack","constructor","_stack","add","descriptor","writer","stack","oldTop","_insertDescriptor","newTop","compareDescriptors","fire","oldDescriptor","newDescriptor","remove","id","_removeDescriptor","index","findIndex","item","splice","i","shouldABeBeforeB","a","b","priority","classesToString","classes","Array","isArray","sort","join"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-widget/src/highlightstack.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/highlightstack\n */\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Class used to handle correct order of highlights on elements.\n *\n * When different highlights are applied to same element correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\nexport default class HighlightStack {\n\t/**\n\t * Creates class instance.\n\t */\n\tconstructor() {\n\t\tthis._stack = [];\n\t}\n\n\t/**\n\t * Adds highlight descriptor to the stack.\n\t *\n\t * @fires change:top\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\tadd( descriptor, writer ) {\n\t\tconst stack = this._stack;\n\n\t\t// Save top descriptor and insert new one. If top is changed - fire event.\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._insertDescriptor( descriptor );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Removes highlight descriptor from the stack.\n\t *\n\t * @fires change:top\n\t * @param {String} id Id of the descriptor to remove.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\tremove( id, writer ) {\n\t\tconst stack = this._stack;\n\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._removeDescriptor( id );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts given descriptor in correct place in the stack. It also takes care about updating information when\n\t * descriptor with same id is already present.\n\t *\n\t * @private\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n\t */\n\t_insertDescriptor( descriptor ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === descriptor.id );\n\n\t\t// Inserting exact same descriptor - do nothing.\n\t\tif ( compareDescriptors( descriptor, stack[ index ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If descriptor with same id but with different information is on the stack - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\n\t\t// Find correct place to insert descriptor in the stack.\n\t\t// It have different information (for example priority) so it must be re-inserted in correct place.\n\t\tlet i = 0;\n\n\t\twhile ( stack[ i ] && shouldABeBeforeB( stack[ i ], descriptor ) ) {\n\t\t\ti++;\n\t\t}\n\n\t\tstack.splice( i, 0, descriptor );\n\t}\n\n\t/**\n\t * Removes descriptor with given id from the stack.\n\t *\n\t * @private\n\t * @param {String} id Descriptor's id.\n\t */\n\t_removeDescriptor( id ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === id );\n\n\t\t// If descriptor with same id is on the list - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\t}\n}\n\nmix( HighlightStack, EmitterMixin );\n\n// Compares two descriptors by checking their priority and class list.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean} Returns true if both descriptors are defined and have same priority and classes.\nfunction compareDescriptors( a, b ) {\n\treturn a && b && a.priority == b.priority && classesToString( a.classes ) == classesToString( b.classes );\n}\n\n// Checks whenever first descriptor should be placed in the stack before second one.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean}\nfunction shouldABeBeforeB( a, b ) {\n\tif ( a.priority > b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority < b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use classes to compare.\n\treturn classesToString( a.classes ) > classesToString( b.classes );\n}\n\n// Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} to\n// sorted string.\n//\n// @param {String|Array<String>} descriptor\n// @returns {String}\nfunction classesToString( classes ) {\n\treturn Array.isArray( classes ) ? classes.sort().join( ',' ) : classes;\n}\n\n/**\n * Fired when top element on {@link module:widget/highlightstack~HighlightStack} has been changed\n *\n * @event change:top\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.newDescriptor] New highlight\n * descriptor. It will be `undefined` when last descriptor is removed from the stack.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.oldDescriptor] Old highlight\n * descriptor. It will be `undefined` when first descriptor is added to the stack.\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that can be used to modify element.\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}