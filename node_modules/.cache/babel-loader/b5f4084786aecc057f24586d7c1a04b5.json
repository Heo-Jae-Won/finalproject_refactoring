{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n/* globals DOMParser */\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class HtmlDataProcessor {\n  /**\n   * Creates a new instance of the HTML data processor class.\n   *\n   * @param {module:engine/view/document~Document} document The view document instance.\n   */\n  constructor(document) {\n    /**\n     * A DOM parser instance used to parse an HTML string to an HTML document.\n     *\n     * @member {DOMParser}\n     */\n    this.domParser = new DOMParser();\n    /**\n     * A DOM converter used to convert DOM elements to view elements.\n     *\n     * @member {module:engine/view/domconverter~DomConverter}\n     */\n    this.domConverter = new DomConverter(document, {\n      renderingMode: 'data'\n    });\n    /**\n     * A basic HTML writer instance used to convert DOM elements to an HTML string.\n     *\n     * @member {module:engine/dataprocessor/htmlwriter~HtmlWriter}\n     */\n    this.htmlWriter = new BasicHtmlWriter();\n  }\n  /**\n   * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n   * to data format &mdash; in this case to an HTML string.\n   *\n   * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n   * @returns {String} HTML string.\n   */\n  toData(viewFragment) {\n    // Convert view DocumentFragment to DOM DocumentFragment.\n    const domFragment = this.domConverter.viewToDom(viewFragment);\n    // Convert DOM DocumentFragment to HTML output.\n    return this.htmlWriter.getHtml(domFragment);\n  }\n  /**\n   * Converts the provided HTML string to a view tree.\n   *\n   * @param {String} data An HTML string.\n   * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n   */\n  toView(data) {\n    // Convert input HTML data to DOM DocumentFragment.\n    const domFragment = this._toDom(data);\n    // Convert DOM DocumentFragment to view DocumentFragment.\n    return this.domConverter.domToView(domFragment);\n  }\n  /**\n   * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n   * and not processed during the conversion from the DOM to the view elements.\n   *\n   * The raw data can be later accessed by a\n   * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n   *\n   * @param {module:engine/view/matcher~MatcherPattern} pattern Pattern matching all view elements whose content should\n   * be treated as raw data.\n   */\n  registerRawContentMatcher(pattern) {\n    this.domConverter.registerRawContentMatcher(pattern);\n  }\n  /**\n   * If the processor is set to use marked fillers, it will insert `&nbsp;` fillers wrapped in `<span>` elements\n   * (`<span data-cke-filler=\"true\">&nbsp;</span>`) instead of regular `&nbsp;` characters.\n   *\n   * This mode allows for a more precise handling of the block fillers (so they do not leak into the editor content) but\n   * bloats the editor data with additional markup.\n   *\n   * This mode may be required by some features and will be turned on by them automatically.\n   *\n   * @param {'default'|'marked'} type Whether to use the default or the marked `&nbsp;` block fillers.\n   */\n  useFillerType(type) {\n    this.domConverter.blockFillerMode = type == 'marked' ? 'markedNbsp' : 'nbsp';\n  }\n  /**\n   * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n   * the provided data.\n   *\n   * @private\n   * @param {String} data\n   * @returns {DocumentFragment}\n   */\n  _toDom(data) {\n    // Wrap data with a <body> tag so leading non-layout nodes (like <script>, <style>, HTML comment)\n    // will be preserved in the body collection.\n    // Do it only for data that is not a full HTML document.\n    if (!data.match(/<(?:html|body|head|meta)(?:\\s[^>]*)?>/i)) {\n      data = `<body>${data}</body>`;\n    }\n    const document = this.domParser.parseFromString(data, 'text/html');\n    const fragment = document.createDocumentFragment();\n    const bodyChildNodes = document.body.childNodes;\n    while (bodyChildNodes.length > 0) {\n      fragment.appendChild(bodyChildNodes[0]);\n    }\n    return fragment;\n  }\n}","map":{"version":3,"names":["BasicHtmlWriter","DomConverter","HtmlDataProcessor","constructor","document","domParser","DOMParser","domConverter","renderingMode","htmlWriter","toData","viewFragment","domFragment","viewToDom","getHtml","toView","data","_toDom","domToView","registerRawContentMatcher","pattern","useFillerType","type","blockFillerMode","match","parseFromString","fragment","createDocumentFragment","bodyChildNodes","body","childNodes","length","appendChild"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n/* globals DOMParser */\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class HtmlDataProcessor {\n    /**\n     * Creates a new instance of the HTML data processor class.\n     *\n     * @param {module:engine/view/document~Document} document The view document instance.\n     */\n    constructor(document) {\n        /**\n         * A DOM parser instance used to parse an HTML string to an HTML document.\n         *\n         * @member {DOMParser}\n         */\n        this.domParser = new DOMParser();\n        /**\n         * A DOM converter used to convert DOM elements to view elements.\n         *\n         * @member {module:engine/view/domconverter~DomConverter}\n         */\n        this.domConverter = new DomConverter(document, { renderingMode: 'data' });\n        /**\n         * A basic HTML writer instance used to convert DOM elements to an HTML string.\n         *\n         * @member {module:engine/dataprocessor/htmlwriter~HtmlWriter}\n         */\n        this.htmlWriter = new BasicHtmlWriter();\n    }\n    /**\n     * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n     * to data format &mdash; in this case to an HTML string.\n     *\n     * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n     * @returns {String} HTML string.\n     */\n    toData(viewFragment) {\n        // Convert view DocumentFragment to DOM DocumentFragment.\n        const domFragment = this.domConverter.viewToDom(viewFragment);\n        // Convert DOM DocumentFragment to HTML output.\n        return this.htmlWriter.getHtml(domFragment);\n    }\n    /**\n     * Converts the provided HTML string to a view tree.\n     *\n     * @param {String} data An HTML string.\n     * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n     */\n    toView(data) {\n        // Convert input HTML data to DOM DocumentFragment.\n        const domFragment = this._toDom(data);\n        // Convert DOM DocumentFragment to view DocumentFragment.\n        return this.domConverter.domToView(domFragment);\n    }\n    /**\n     * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n     * and not processed during the conversion from the DOM to the view elements.\n     *\n     * The raw data can be later accessed by a\n     * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n     *\n     * @param {module:engine/view/matcher~MatcherPattern} pattern Pattern matching all view elements whose content should\n     * be treated as raw data.\n     */\n    registerRawContentMatcher(pattern) {\n        this.domConverter.registerRawContentMatcher(pattern);\n    }\n    /**\n     * If the processor is set to use marked fillers, it will insert `&nbsp;` fillers wrapped in `<span>` elements\n     * (`<span data-cke-filler=\"true\">&nbsp;</span>`) instead of regular `&nbsp;` characters.\n     *\n     * This mode allows for a more precise handling of the block fillers (so they do not leak into the editor content) but\n     * bloats the editor data with additional markup.\n     *\n     * This mode may be required by some features and will be turned on by them automatically.\n     *\n     * @param {'default'|'marked'} type Whether to use the default or the marked `&nbsp;` block fillers.\n     */\n    useFillerType(type) {\n        this.domConverter.blockFillerMode = type == 'marked' ? 'markedNbsp' : 'nbsp';\n    }\n    /**\n     * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n     * the provided data.\n     *\n     * @private\n     * @param {String} data\n     * @returns {DocumentFragment}\n     */\n    _toDom(data) {\n        // Wrap data with a <body> tag so leading non-layout nodes (like <script>, <style>, HTML comment)\n        // will be preserved in the body collection.\n        // Do it only for data that is not a full HTML document.\n        if (!data.match(/<(?:html|body|head|meta)(?:\\s[^>]*)?>/i)) {\n            data = `<body>${data}</body>`;\n        }\n        const document = this.domParser.parseFromString(data, 'text/html');\n        const fragment = document.createDocumentFragment();\n        const bodyChildNodes = document.body.childNodes;\n        while (bodyChildNodes.length > 0) {\n            fragment.appendChild(bodyChildNodes[0]);\n        }\n        return fragment;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,YAAY,MAAM,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,iBAAiB,CAAC;EACnC;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACC,QAAQ,EAAE;IAClB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,IAAIC,SAAS,EAAE;IAChC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,YAAY,GAAG,IAAIN,YAAY,CAACG,QAAQ,EAAE;MAAEI,aAAa,EAAE;IAAO,CAAC,CAAC;IACzE;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,IAAIT,eAAe,EAAE;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIU,MAAM,CAACC,YAAY,EAAE;IACjB;IACA,MAAMC,WAAW,GAAG,IAAI,CAACL,YAAY,CAACM,SAAS,CAACF,YAAY,CAAC;IAC7D;IACA,OAAO,IAAI,CAACF,UAAU,CAACK,OAAO,CAACF,WAAW,CAAC;EAC/C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIG,MAAM,CAACC,IAAI,EAAE;IACT;IACA,MAAMJ,WAAW,GAAG,IAAI,CAACK,MAAM,CAACD,IAAI,CAAC;IACrC;IACA,OAAO,IAAI,CAACT,YAAY,CAACW,SAAS,CAACN,WAAW,CAAC;EACnD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIO,yBAAyB,CAACC,OAAO,EAAE;IAC/B,IAAI,CAACb,YAAY,CAACY,yBAAyB,CAACC,OAAO,CAAC;EACxD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,aAAa,CAACC,IAAI,EAAE;IAChB,IAAI,CAACf,YAAY,CAACgB,eAAe,GAAGD,IAAI,IAAI,QAAQ,GAAG,YAAY,GAAG,MAAM;EAChF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIL,MAAM,CAACD,IAAI,EAAE;IACT;IACA;IACA;IACA,IAAI,CAACA,IAAI,CAACQ,KAAK,CAAC,wCAAwC,CAAC,EAAE;MACvDR,IAAI,GAAI,SAAQA,IAAK,SAAQ;IACjC;IACA,MAAMZ,QAAQ,GAAG,IAAI,CAACC,SAAS,CAACoB,eAAe,CAACT,IAAI,EAAE,WAAW,CAAC;IAClE,MAAMU,QAAQ,GAAGtB,QAAQ,CAACuB,sBAAsB,EAAE;IAClD,MAAMC,cAAc,GAAGxB,QAAQ,CAACyB,IAAI,CAACC,UAAU;IAC/C,OAAOF,cAAc,CAACG,MAAM,GAAG,CAAC,EAAE;MAC9BL,QAAQ,CAACM,WAAW,CAACJ,cAAc,CAAC,CAAC,CAAC,CAAC;IAC3C;IACA,OAAOF,QAAQ;EACnB;AACJ"},"metadata":{},"sourceType":"module"}