{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable new-cap */\n/**\n * @module engine/model/liveposition\n */\nimport Position from './position';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n *\n * @extends module:engine/model/position~Position\n */\nexport default class LivePosition extends EmitterMixin(Position) {\n  /**\n   * Creates a live position.\n   *\n   * @see module:engine/model/position~Position\n   * @param {module:engine/model/rootelement~RootElement} root\n   * @param {Array.<Number>} path\n   * @param {module:engine/model/position~PositionStickiness} [stickiness]\n   */\n  constructor(root, path) {\n    let stickiness = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'toNone';\n    super(root, path, stickiness);\n    if (!this.root.is('rootElement')) {\n      /**\n       * LivePosition's root has to be an instance of RootElement.\n       *\n       * @error model-liveposition-root-not-rootelement\n       */\n      throw new CKEditorError('model-liveposition-root-not-rootelement', root);\n    }\n    bindWithDocument.call(this);\n  }\n  /**\n   * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n   * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n   * referring to it).\n   */\n  detach() {\n    this.stopListening();\n  }\n  /**\n   * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.\n   *\n   * @returns {module:engine/model/position~Position}\n   */\n  toPosition() {\n    return new Position(this.root, this.path.slice(), this.stickiness);\n  }\n  /**\n   * Creates a `LivePosition` instance that is equal to position.\n   *\n   * @param {module:engine/model/position~Position} position\n   * @param {module:engine/model/position~PositionStickiness} [stickiness]\n   * @returns {module:engine/model/liveposition~LivePosition}\n   */\n  static fromPosition(position, stickiness) {\n    return new this(position.root, position.path.slice(), stickiness ? stickiness : position.stickiness);\n  }\n}\n/**\n * Checks whether this object is of the given.\n *\n *\t\tlivePosition.is( 'position' ); // -> true\n *\t\tlivePosition.is( 'model:position' ); // -> true\n *\t\tlivePosition.is( 'liveposition' ); // -> true\n *\t\tlivePosition.is( 'model:livePosition' ); // -> true\n *\n *\t\tlivePosition.is( 'view:position' ); // -> false\n *\t\tlivePosition.is( 'documentSelection' ); // -> false\n *\n * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n *\n * @param {String} type\n * @returns {Boolean}\n */\nLivePosition.prototype.is = function (type) {\n  return type === 'livePosition' || type === 'model:livePosition' ||\n  // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n  type == 'position' || type === 'model:position';\n};\n// Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n// this position's {@link module:engine/model/position~Position#root root}.\n//\n// @private\nfunction bindWithDocument() {\n  this.listenTo(this.root.document.model, 'applyOperation', (event, args) => {\n    const operation = args[0];\n    if (!operation.isDocumentOperation) {\n      return;\n    }\n    transform.call(this, operation);\n  }, {\n    priority: 'low'\n  });\n}\n// Updates this position accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform(operation) {\n  const result = this.getTransformedByOperation(operation);\n  if (!this.isEqual(result)) {\n    const oldPosition = this.toPosition();\n    this.path = result.path;\n    this.root = result.root;\n    this.fire('change', oldPosition);\n  }\n}","map":{"version":3,"names":["Position","EmitterMixin","CKEditorError","LivePosition","constructor","root","path","stickiness","is","bindWithDocument","call","detach","stopListening","toPosition","slice","fromPosition","position","prototype","type","listenTo","document","model","event","args","operation","isDocumentOperation","transform","priority","result","getTransformedByOperation","isEqual","oldPosition","fire"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/model/liveposition.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable new-cap */\n/**\n * @module engine/model/liveposition\n */\nimport Position from './position';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n *\n * @extends module:engine/model/position~Position\n */\nexport default class LivePosition extends EmitterMixin(Position) {\n    /**\n     * Creates a live position.\n     *\n     * @see module:engine/model/position~Position\n     * @param {module:engine/model/rootelement~RootElement} root\n     * @param {Array.<Number>} path\n     * @param {module:engine/model/position~PositionStickiness} [stickiness]\n     */\n    constructor(root, path, stickiness = 'toNone') {\n        super(root, path, stickiness);\n        if (!this.root.is('rootElement')) {\n            /**\n             * LivePosition's root has to be an instance of RootElement.\n             *\n             * @error model-liveposition-root-not-rootelement\n             */\n            throw new CKEditorError('model-liveposition-root-not-rootelement', root);\n        }\n        bindWithDocument.call(this);\n    }\n    /**\n     * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n     * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n     * referring to it).\n     */\n    detach() {\n        this.stopListening();\n    }\n    /**\n     * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.\n     *\n     * @returns {module:engine/model/position~Position}\n     */\n    toPosition() {\n        return new Position(this.root, this.path.slice(), this.stickiness);\n    }\n    /**\n     * Creates a `LivePosition` instance that is equal to position.\n     *\n     * @param {module:engine/model/position~Position} position\n     * @param {module:engine/model/position~PositionStickiness} [stickiness]\n     * @returns {module:engine/model/liveposition~LivePosition}\n     */\n    static fromPosition(position, stickiness) {\n        return new this(position.root, position.path.slice(), stickiness ? stickiness : position.stickiness);\n    }\n}\n/**\n * Checks whether this object is of the given.\n *\n *\t\tlivePosition.is( 'position' ); // -> true\n *\t\tlivePosition.is( 'model:position' ); // -> true\n *\t\tlivePosition.is( 'liveposition' ); // -> true\n *\t\tlivePosition.is( 'model:livePosition' ); // -> true\n *\n *\t\tlivePosition.is( 'view:position' ); // -> false\n *\t\tlivePosition.is( 'documentSelection' ); // -> false\n *\n * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n *\n * @param {String} type\n * @returns {Boolean}\n */\nLivePosition.prototype.is = function (type) {\n    return type === 'livePosition' || type === 'model:livePosition' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type == 'position' || type === 'model:position';\n};\n// Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n// this position's {@link module:engine/model/position~Position#root root}.\n//\n// @private\nfunction bindWithDocument() {\n    this.listenTo(this.root.document.model, 'applyOperation', (event, args) => {\n        const operation = args[0];\n        if (!operation.isDocumentOperation) {\n            return;\n        }\n        transform.call(this, operation);\n    }, { priority: 'low' });\n}\n// Updates this position accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform(operation) {\n    const result = this.getTransformedByOperation(operation);\n    if (!this.isEqual(result)) {\n        const oldPosition = this.toPosition();\n        this.path = result.path;\n        this.root = result.root;\n        this.fire('change', oldPosition);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,YAAY;AACjC,OAAOC,YAAY,MAAM,4CAA4C;AACrE,OAAOC,aAAa,MAAM,6CAA6C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,YAAY,SAASF,YAAY,CAACD,QAAQ,CAAC,CAAC;EAC7D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACII,WAAW,CAACC,IAAI,EAAEC,IAAI,EAAyB;IAAA,IAAvBC,UAAU,uEAAG,QAAQ;IACzC,KAAK,CAACF,IAAI,EAAEC,IAAI,EAAEC,UAAU,CAAC;IAC7B,IAAI,CAAC,IAAI,CAACF,IAAI,CAACG,EAAE,CAAC,aAAa,CAAC,EAAE;MAC9B;AACZ;AACA;AACA;AACA;MACY,MAAM,IAAIN,aAAa,CAAC,yCAAyC,EAAEG,IAAI,CAAC;IAC5E;IACAI,gBAAgB,CAACC,IAAI,CAAC,IAAI,CAAC;EAC/B;EACA;AACJ;AACA;AACA;AACA;EACIC,MAAM,GAAG;IACL,IAAI,CAACC,aAAa,EAAE;EACxB;EACA;AACJ;AACA;AACA;AACA;EACIC,UAAU,GAAG;IACT,OAAO,IAAIb,QAAQ,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACC,IAAI,CAACQ,KAAK,EAAE,EAAE,IAAI,CAACP,UAAU,CAAC;EACtE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOQ,YAAY,CAACC,QAAQ,EAAET,UAAU,EAAE;IACtC,OAAO,IAAI,IAAI,CAACS,QAAQ,CAACX,IAAI,EAAEW,QAAQ,CAACV,IAAI,CAACQ,KAAK,EAAE,EAAEP,UAAU,GAAGA,UAAU,GAAGS,QAAQ,CAACT,UAAU,CAAC;EACxG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,YAAY,CAACc,SAAS,CAACT,EAAE,GAAG,UAAUU,IAAI,EAAE;EACxC,OAAOA,IAAI,KAAK,cAAc,IAAIA,IAAI,KAAK,oBAAoB;EAC3D;EACAA,IAAI,IAAI,UAAU,IAAIA,IAAI,KAAK,gBAAgB;AACvD,CAAC;AACD;AACA;AACA;AACA;AACA,SAAST,gBAAgB,GAAG;EACxB,IAAI,CAACU,QAAQ,CAAC,IAAI,CAACd,IAAI,CAACe,QAAQ,CAACC,KAAK,EAAE,gBAAgB,EAAE,CAACC,KAAK,EAAEC,IAAI,KAAK;IACvE,MAAMC,SAAS,GAAGD,IAAI,CAAC,CAAC,CAAC;IACzB,IAAI,CAACC,SAAS,CAACC,mBAAmB,EAAE;MAChC;IACJ;IACAC,SAAS,CAAChB,IAAI,CAAC,IAAI,EAAEc,SAAS,CAAC;EACnC,CAAC,EAAE;IAAEG,QAAQ,EAAE;EAAM,CAAC,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA,SAASD,SAAS,CAACF,SAAS,EAAE;EAC1B,MAAMI,MAAM,GAAG,IAAI,CAACC,yBAAyB,CAACL,SAAS,CAAC;EACxD,IAAI,CAAC,IAAI,CAACM,OAAO,CAACF,MAAM,CAAC,EAAE;IACvB,MAAMG,WAAW,GAAG,IAAI,CAAClB,UAAU,EAAE;IACrC,IAAI,CAACP,IAAI,GAAGsB,MAAM,CAACtB,IAAI;IACvB,IAAI,CAACD,IAAI,GAAGuB,MAAM,CAACvB,IAAI;IACvB,IAAI,CAAC2B,IAAI,CAAC,QAAQ,EAAED,WAAW,CAAC;EACpC;AACJ"},"metadata":{},"sourceType":"module"}