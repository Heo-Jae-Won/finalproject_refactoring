{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/domeventdata\n */\nimport { extend } from 'lodash-es';\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n */\nexport default class DomEventData {\n  /**\n   * @param {module:engine/view/view~View} view The instance of the view controller.\n   * @param {Event} domEvent The DOM event.\n   * @param {Object} [additionalData] Additional properties that the instance should contain.\n   */\n  constructor(view, domEvent, additionalData) {\n    /**\n     * Instance of the view controller.\n     *\n     * @readonly\n     * @member {module:engine/view/view~View} module:engine/view/observer/observer~Observer.DomEvent#view\n     */\n    this.view = view;\n    /**\n     * The instance of the document.\n     *\n     * @readonly\n     * @member {module:engine/view/document~Document} module:engine/view/observer/observer~Observer.DomEvent#document\n     */\n    this.document = view.document;\n    /**\n     * The DOM event.\n     *\n     * @readonly\n     * @member {Event} module:engine/view/observer/observer~Observer.DomEvent#domEvent\n     */\n    this.domEvent = domEvent;\n    /**\n     * The DOM target.\n     *\n     * @readonly\n     * @member {HTMLElement} module:engine/view/observer/observer~Observer.DomEvent#target\n     */\n    this.domTarget = domEvent.target;\n    extend(this, additionalData);\n  }\n  /**\n   * The tree view element representing the target.\n   *\n   * @readonly\n   * @type module:engine/view/element~Element\n   */\n  get target() {\n    return this.view.domConverter.mapDomToView(this.domTarget);\n  }\n  /**\n   * Prevents the native's event default action.\n   */\n  preventDefault() {\n    this.domEvent.preventDefault();\n  }\n  /**\n   * Stops native event propagation.\n   */\n  stopPropagation() {\n    this.domEvent.stopPropagation();\n  }\n}","map":{"version":3,"names":["extend","DomEventData","constructor","view","domEvent","additionalData","document","domTarget","target","domConverter","mapDomToView","preventDefault","stopPropagation"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventdata.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/domeventdata\n */\nimport { extend } from 'lodash-es';\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n */\nexport default class DomEventData {\n    /**\n     * @param {module:engine/view/view~View} view The instance of the view controller.\n     * @param {Event} domEvent The DOM event.\n     * @param {Object} [additionalData] Additional properties that the instance should contain.\n     */\n    constructor(view, domEvent, additionalData) {\n        /**\n         * Instance of the view controller.\n         *\n         * @readonly\n         * @member {module:engine/view/view~View} module:engine/view/observer/observer~Observer.DomEvent#view\n         */\n        this.view = view;\n        /**\n         * The instance of the document.\n         *\n         * @readonly\n         * @member {module:engine/view/document~Document} module:engine/view/observer/observer~Observer.DomEvent#document\n         */\n        this.document = view.document;\n        /**\n         * The DOM event.\n         *\n         * @readonly\n         * @member {Event} module:engine/view/observer/observer~Observer.DomEvent#domEvent\n         */\n        this.domEvent = domEvent;\n        /**\n         * The DOM target.\n         *\n         * @readonly\n         * @member {HTMLElement} module:engine/view/observer/observer~Observer.DomEvent#target\n         */\n        this.domTarget = domEvent.target;\n        extend(this, additionalData);\n    }\n    /**\n     * The tree view element representing the target.\n     *\n     * @readonly\n     * @type module:engine/view/element~Element\n     */\n    get target() {\n        return this.view.domConverter.mapDomToView(this.domTarget);\n    }\n    /**\n     * Prevents the native's event default action.\n     */\n    preventDefault() {\n        this.domEvent.preventDefault();\n    }\n    /**\n     * Stops native event propagation.\n     */\n    stopPropagation() {\n        this.domEvent.stopPropagation();\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,YAAY,CAAC;EAC9B;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACC,IAAI,EAAEC,QAAQ,EAAEC,cAAc,EAAE;IACxC;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACG,QAAQ,GAAGH,IAAI,CAACG,QAAQ;IAC7B;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACG,SAAS,GAAGH,QAAQ,CAACI,MAAM;IAChCR,MAAM,CAAC,IAAI,EAAEK,cAAc,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIG,MAAM,GAAG;IACT,OAAO,IAAI,CAACL,IAAI,CAACM,YAAY,CAACC,YAAY,CAAC,IAAI,CAACH,SAAS,CAAC;EAC9D;EACA;AACJ;AACA;EACII,cAAc,GAAG;IACb,IAAI,CAACP,QAAQ,CAACO,cAAc,EAAE;EAClC;EACA;AACJ;AACA;EACIC,eAAe,GAAG;IACd,IAAI,CAACR,QAAQ,CAACQ,eAAe,EAAE;EACnC;AACJ"},"metadata":{},"sourceType":"module"}