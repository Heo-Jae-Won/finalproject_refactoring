{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/markeroperation\n */\nimport Operation from './operation';\nimport Range from '../range';\n/**\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MarkerOperation extends Operation {\n  /**\n   * @param {String} name Marker name.\n   * @param {module:engine/model/range~Range|null} oldRange Marker range before the change.\n   * @param {module:engine/model/range~Range|null} newRange Marker range after the change.\n   * @param {module:engine/model/markercollection~MarkerCollection} markers Marker collection on which change should be executed.\n   * @param {Boolean} affectsData Specifies whether the marker operation affects the data produced by the data pipeline\n   * (is persisted in the editor's data).\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(name, oldRange, newRange, markers, affectsData, baseVersion) {\n    super(baseVersion);\n    /**\n     * Marker name.\n     *\n     * @readonly\n     * @member {String}\n     */\n    this.name = name;\n    /**\n     * Marker range before the change.\n     *\n     * @readonly\n     * @member {module:engine/model/range~Range|null}\n     */\n    this.oldRange = oldRange ? oldRange.clone() : null;\n    /**\n     * Marker range after the change.\n     *\n     * @readonly\n     * @member {module:engine/model/range~Range}\n     */\n    this.newRange = newRange ? newRange.clone() : null;\n    /**\n     * Specifies whether the marker operation affects the data produced by the data pipeline\n     * (is persisted in the editor's data).\n     *\n     * @readonly\n     * @member {Boolean}\n     */\n    this.affectsData = affectsData;\n    /**\n     * Marker collection on which change should be executed.\n     *\n     * @private\n     * @member {module:engine/model/markercollection~MarkerCollection}\n     */\n    this._markers = markers;\n  }\n  /**\n   * @inheritDoc\n   */\n  get type() {\n    return 'marker';\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/markeroperation~MarkerOperation} Clone of this operation.\n   */\n  clone() {\n    return new MarkerOperation(this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n   */\n  getReversed() {\n    return new MarkerOperation(this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   * @internal\n   */\n  _execute() {\n    if (this.newRange) {\n      this._markers._set(this.name, this.newRange, true, this.affectsData);\n    } else {\n      this._markers._remove(this.name);\n    }\n  }\n  /**\n   * @inheritDoc\n   * @internal\n   */\n  toJSON() {\n    const json = super.toJSON();\n    if (this.oldRange) {\n      json.oldRange = this.oldRange.toJSON();\n    }\n    if (this.newRange) {\n      json.newRange = this.newRange.toJSON();\n    }\n    delete json._markers;\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n  static get className() {\n    return 'MarkerOperation';\n  }\n  /**\n   * Creates `MarkerOperation` object from deserialized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n   */\n  static fromJSON(json, document) {\n    return new MarkerOperation(json.name, json.oldRange ? Range.fromJSON(json.oldRange, document) : null, json.newRange ? Range.fromJSON(json.newRange, document) : null, document.model.markers, json.affectsData, json.baseVersion);\n  }\n}","map":{"version":3,"names":["Operation","Range","MarkerOperation","constructor","name","oldRange","newRange","markers","affectsData","baseVersion","clone","_markers","type","getReversed","_execute","_set","_remove","toJSON","json","className","fromJSON","document","model"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/markeroperation.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/markeroperation\n */\nimport Operation from './operation';\nimport Range from '../range';\n/**\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MarkerOperation extends Operation {\n    /**\n     * @param {String} name Marker name.\n     * @param {module:engine/model/range~Range|null} oldRange Marker range before the change.\n     * @param {module:engine/model/range~Range|null} newRange Marker range after the change.\n     * @param {module:engine/model/markercollection~MarkerCollection} markers Marker collection on which change should be executed.\n     * @param {Boolean} affectsData Specifies whether the marker operation affects the data produced by the data pipeline\n     * (is persisted in the editor's data).\n     * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(name, oldRange, newRange, markers, affectsData, baseVersion) {\n        super(baseVersion);\n        /**\n         * Marker name.\n         *\n         * @readonly\n         * @member {String}\n         */\n        this.name = name;\n        /**\n         * Marker range before the change.\n         *\n         * @readonly\n         * @member {module:engine/model/range~Range|null}\n         */\n        this.oldRange = oldRange ? oldRange.clone() : null;\n        /**\n         * Marker range after the change.\n         *\n         * @readonly\n         * @member {module:engine/model/range~Range}\n         */\n        this.newRange = newRange ? newRange.clone() : null;\n        /**\n         * Specifies whether the marker operation affects the data produced by the data pipeline\n         * (is persisted in the editor's data).\n         *\n         * @readonly\n         * @member {Boolean}\n         */\n        this.affectsData = affectsData;\n        /**\n         * Marker collection on which change should be executed.\n         *\n         * @private\n         * @member {module:engine/model/markercollection~MarkerCollection}\n         */\n        this._markers = markers;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'marker';\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @returns {module:engine/model/operation/markeroperation~MarkerOperation} Clone of this operation.\n     */\n    clone() {\n        return new MarkerOperation(this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     *\n     * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n     */\n    getReversed() {\n        return new MarkerOperation(this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        if (this.newRange) {\n            this._markers._set(this.name, this.newRange, true, this.affectsData);\n        }\n        else {\n            this._markers._remove(this.name);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    toJSON() {\n        const json = super.toJSON();\n        if (this.oldRange) {\n            json.oldRange = this.oldRange.toJSON();\n        }\n        if (this.newRange) {\n            json.newRange = this.newRange.toJSON();\n        }\n        delete json._markers;\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'MarkerOperation';\n    }\n    /**\n     * Creates `MarkerOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param {Object} json Deserialized JSON object.\n     * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n     * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n     */\n    static fromJSON(json, document) {\n        return new MarkerOperation(json.name, json.oldRange ? Range.fromJSON(json.oldRange, document) : null, json.newRange ? Range.fromJSON(json.newRange, document) : null, document.model.markers, json.affectsData, json.baseVersion);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}