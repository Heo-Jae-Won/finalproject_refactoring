{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/moveoperation\n */\nimport Operation from './operation';\nimport Position from '../position';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { _move } from './utils';\n// @if CK_DEBUG_ENGINE // const ModelRange = require( '../range' ).default;\n/**\n * Operation to move a range of {@link module:engine/model/item~Item model items}\n * to given {@link module:engine/model/position~Position target position}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MoveOperation extends Operation {\n  /**\n   * Creates a move operation.\n   *\n   * @param {module:engine/model/position~Position} sourcePosition\n   * Position before the first {@link module:engine/model/item~Item model item} to move.\n   * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n   * `sourcePosition` with offset shifted by `howMany`.\n   * @param {module:engine/model/position~Position} targetPosition Position at which moved nodes will be inserted.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(sourcePosition, howMany, targetPosition, baseVersion) {\n    super(baseVersion);\n    /**\n     * Position before the first {@link module:engine/model/item~Item model item} to move.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#sourcePosition\n     */\n    this.sourcePosition = sourcePosition.clone();\n    // `'toNext'` because `sourcePosition` is a bit like a start of the moved range.\n    this.sourcePosition.stickiness = 'toNext';\n    /**\n     * Offset size of moved range.\n     *\n     * @member {Number} module:engine/model/operation/moveoperation~MoveOperation#howMany\n     */\n    this.howMany = howMany;\n    /**\n     * Position at which moved nodes will be inserted.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#targetPosition\n     */\n    this.targetPosition = targetPosition.clone();\n    this.targetPosition.stickiness = 'toNone';\n  }\n  /**\n   * @inheritDoc\n   */\n  get type() {\n    if (this.targetPosition.root.rootName == '$graveyard') {\n      return 'remove';\n    } else if (this.sourcePosition.root.rootName == '$graveyard') {\n      return 'reinsert';\n    }\n    return 'move';\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/moveoperation~MoveOperation} Clone of this operation.\n   */\n  clone() {\n    return new MoveOperation(this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion);\n  }\n  /**\n   * Returns the start position of the moved range after it got moved. This may be different than\n   * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition} in some cases, i.e. when a range is moved\n   * inside the same parent but {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition targetPosition}\n   * is after {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition sourcePosition}.\n   *\n   *\t\t vv              vv\n   *\t\tabcdefg ===> adefbcg\n   *\t\t     ^          ^\n   *\t\t     targetPos\tmovedRangeStart\n   *\t\t     offset 6\toffset 4\n   *\n   * @returns {module:engine/model/position~Position}\n   */\n  getMovedRangeStart() {\n    return this.targetPosition._getTransformedByDeletion(this.sourcePosition, this.howMany);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n   */\n  getReversed() {\n    const newTargetPosition = this.sourcePosition._getTransformedByInsertion(this.targetPosition, this.howMany);\n    return new MoveOperation(this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   * @internal\n   */\n  _validate() {\n    const sourceElement = this.sourcePosition.parent;\n    const targetElement = this.targetPosition.parent;\n    const sourceOffset = this.sourcePosition.offset;\n    const targetOffset = this.targetPosition.offset;\n    // Validate whether move operation has correct parameters.\n    // Validation is pretty complex but move operation is one of the core ways to manipulate the document state.\n    // We expect that many errors might be connected with one of scenarios described below.\n    if (sourceOffset + this.howMany > sourceElement.maxOffset) {\n      /**\n       * The nodes which should be moved do not exist.\n       *\n       * @error move-operation-nodes-do-not-exist\n       */\n      throw new CKEditorError('move-operation-nodes-do-not-exist', this);\n    } else if (sourceElement === targetElement && sourceOffset < targetOffset && targetOffset < sourceOffset + this.howMany) {\n      /**\n       * Trying to move a range of nodes into the middle of that range.\n       *\n       * @error move-operation-range-into-itself\n       */\n      throw new CKEditorError('move-operation-range-into-itself', this);\n    } else if (this.sourcePosition.root == this.targetPosition.root) {\n      if (compareArrays(this.sourcePosition.getParentPath(), this.targetPosition.getParentPath()) == 'prefix') {\n        const i = this.sourcePosition.path.length - 1;\n        if (this.targetPosition.path[i] >= sourceOffset && this.targetPosition.path[i] < sourceOffset + this.howMany) {\n          /**\n           * Trying to move a range of nodes into one of nodes from that range.\n           *\n           * @error move-operation-node-into-itself\n           */\n          throw new CKEditorError('move-operation-node-into-itself', this);\n        }\n      }\n    }\n  }\n  /**\n   * @inheritDoc\n   * @internal\n   */\n  _execute() {\n    _move(Range._createFromPositionAndShift(this.sourcePosition, this.howMany), this.targetPosition);\n  }\n  /**\n   * @inheritDoc\n   */\n  toJSON() {\n    const json = super.toJSON();\n    json.sourcePosition = this.sourcePosition.toJSON();\n    json.targetPosition = this.targetPosition.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n  static get className() {\n    return 'MoveOperation';\n  }\n  /**\n   * Creates `MoveOperation` object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n   */\n  static fromJSON(json, document) {\n    const sourcePosition = Position.fromJSON(json.sourcePosition, document);\n    const targetPosition = Position.fromJSON(json.targetPosition, document);\n    return new this(sourcePosition, json.howMany, targetPosition, json.baseVersion);\n  }\n}","map":{"version":3,"names":["Operation","Position","Range","CKEditorError","compareArrays","_move","MoveOperation","constructor","sourcePosition","howMany","targetPosition","baseVersion","clone","stickiness","type","root","rootName","getMovedRangeStart","_getTransformedByDeletion","getReversed","newTargetPosition","_getTransformedByInsertion","_validate","sourceElement","parent","targetElement","sourceOffset","offset","targetOffset","maxOffset","getParentPath","i","path","length","_execute","_createFromPositionAndShift","toJSON","json","className","fromJSON","document"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/moveoperation.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/moveoperation\n */\nimport Operation from './operation';\nimport Position from '../position';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { _move } from './utils';\n// @if CK_DEBUG_ENGINE // const ModelRange = require( '../range' ).default;\n/**\n * Operation to move a range of {@link module:engine/model/item~Item model items}\n * to given {@link module:engine/model/position~Position target position}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MoveOperation extends Operation {\n    /**\n     * Creates a move operation.\n     *\n     * @param {module:engine/model/position~Position} sourcePosition\n     * Position before the first {@link module:engine/model/item~Item model item} to move.\n     * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n     * `sourcePosition` with offset shifted by `howMany`.\n     * @param {module:engine/model/position~Position} targetPosition Position at which moved nodes will be inserted.\n     * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(sourcePosition, howMany, targetPosition, baseVersion) {\n        super(baseVersion);\n        /**\n         * Position before the first {@link module:engine/model/item~Item model item} to move.\n         *\n         * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#sourcePosition\n         */\n        this.sourcePosition = sourcePosition.clone();\n        // `'toNext'` because `sourcePosition` is a bit like a start of the moved range.\n        this.sourcePosition.stickiness = 'toNext';\n        /**\n         * Offset size of moved range.\n         *\n         * @member {Number} module:engine/model/operation/moveoperation~MoveOperation#howMany\n         */\n        this.howMany = howMany;\n        /**\n         * Position at which moved nodes will be inserted.\n         *\n         * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#targetPosition\n         */\n        this.targetPosition = targetPosition.clone();\n        this.targetPosition.stickiness = 'toNone';\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        if (this.targetPosition.root.rootName == '$graveyard') {\n            return 'remove';\n        }\n        else if (this.sourcePosition.root.rootName == '$graveyard') {\n            return 'reinsert';\n        }\n        return 'move';\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @returns {module:engine/model/operation/moveoperation~MoveOperation} Clone of this operation.\n     */\n    clone() {\n        return new MoveOperation(this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion);\n    }\n    /**\n     * Returns the start position of the moved range after it got moved. This may be different than\n     * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition} in some cases, i.e. when a range is moved\n     * inside the same parent but {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition targetPosition}\n     * is after {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition sourcePosition}.\n     *\n     *\t\t vv              vv\n     *\t\tabcdefg ===> adefbcg\n     *\t\t     ^          ^\n     *\t\t     targetPos\tmovedRangeStart\n     *\t\t     offset 6\toffset 4\n     *\n     * @returns {module:engine/model/position~Position}\n     */\n    getMovedRangeStart() {\n        return this.targetPosition._getTransformedByDeletion(this.sourcePosition, this.howMany);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     *\n     * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n     */\n    getReversed() {\n        const newTargetPosition = this.sourcePosition._getTransformedByInsertion(this.targetPosition, this.howMany);\n        return new MoveOperation(this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        const sourceElement = this.sourcePosition.parent;\n        const targetElement = this.targetPosition.parent;\n        const sourceOffset = this.sourcePosition.offset;\n        const targetOffset = this.targetPosition.offset;\n        // Validate whether move operation has correct parameters.\n        // Validation is pretty complex but move operation is one of the core ways to manipulate the document state.\n        // We expect that many errors might be connected with one of scenarios described below.\n        if (sourceOffset + this.howMany > sourceElement.maxOffset) {\n            /**\n             * The nodes which should be moved do not exist.\n             *\n             * @error move-operation-nodes-do-not-exist\n             */\n            throw new CKEditorError('move-operation-nodes-do-not-exist', this);\n        }\n        else if (sourceElement === targetElement && sourceOffset < targetOffset && targetOffset < sourceOffset + this.howMany) {\n            /**\n             * Trying to move a range of nodes into the middle of that range.\n             *\n             * @error move-operation-range-into-itself\n             */\n            throw new CKEditorError('move-operation-range-into-itself', this);\n        }\n        else if (this.sourcePosition.root == this.targetPosition.root) {\n            if (compareArrays(this.sourcePosition.getParentPath(), this.targetPosition.getParentPath()) == 'prefix') {\n                const i = this.sourcePosition.path.length - 1;\n                if (this.targetPosition.path[i] >= sourceOffset && this.targetPosition.path[i] < sourceOffset + this.howMany) {\n                    /**\n                     * Trying to move a range of nodes into one of nodes from that range.\n                     *\n                     * @error move-operation-node-into-itself\n                     */\n                    throw new CKEditorError('move-operation-node-into-itself', this);\n                }\n            }\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        _move(Range._createFromPositionAndShift(this.sourcePosition, this.howMany), this.targetPosition);\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.sourcePosition = this.sourcePosition.toJSON();\n        json.targetPosition = this.targetPosition.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'MoveOperation';\n    }\n    /**\n     * Creates `MoveOperation` object from deserilized object, i.e. from parsed JSON string.\n     *\n     * @param {Object} json Deserialized JSON object.\n     * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n     * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n     */\n    static fromJSON(json, document) {\n        const sourcePosition = Position.fromJSON(json.sourcePosition, document);\n        const targetPosition = Position.fromJSON(json.targetPosition, document);\n        return new this(sourcePosition, json.howMany, targetPosition, json.baseVersion);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}