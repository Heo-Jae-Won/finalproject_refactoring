{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/enterobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport BubblingEventInfo from '@ckeditor/ckeditor5-engine/src/view/observer/bubblingeventinfo';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter `Document#enter`} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class EnterObserver extends Observer {\n  /**\n   * @inheritDoc\n   */\n  constructor(view) {\n    super(view);\n    const doc = this.document;\n    doc.on('keydown', (evt, data) => {\n      if (this.isEnabled && data.keyCode == keyCodes.enter) {\n        const event = new BubblingEventInfo(doc, 'enter', doc.selection.getFirstRange());\n        doc.fire(event, new DomEventData(doc, data.domEvent, {\n          isSoft: data.shiftKey\n        }));\n\n        // Stop `keydown` event if `enter` event was stopped.\n        // https://github.com/ckeditor/ckeditor5/issues/753\n        if (event.stop.called) {\n          evt.stop();\n        }\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  observe() {}\n}\n\n/**\n * Event fired when the user presses the <kbd>Enter</kbd> key.\n *\n * Note: This event is fired by the {@link module:enter/enterobserver~EnterObserver observer}\n * (usually registered by the {@link module:enter/enter~Enter Enter feature} and\n * {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature}).\n *\n * @event module:engine/view/document~Document#event:enter\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {Boolean} data.isSoft Whether it's a soft enter (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or hard enter (<kbd>Enter</kbd>).\n */","map":{"version":3,"names":["Observer","DomEventData","BubblingEventInfo","keyCodes","EnterObserver","constructor","view","doc","document","on","evt","data","isEnabled","keyCode","enter","event","selection","getFirstRange","fire","domEvent","isSoft","shiftKey","stop","called","observe"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-enter/src/enterobserver.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/enterobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport BubblingEventInfo from '@ckeditor/ckeditor5-engine/src/view/observer/bubblingeventinfo';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter `Document#enter`} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class EnterObserver extends Observer {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst doc = this.document;\n\n\t\tdoc.on( 'keydown', ( evt, data ) => {\n\t\t\tif ( this.isEnabled && data.keyCode == keyCodes.enter ) {\n\t\t\t\tconst event = new BubblingEventInfo( doc, 'enter', doc.selection.getFirstRange() );\n\n\t\t\t\tdoc.fire( event, new DomEventData( doc, data.domEvent, {\n\t\t\t\t\tisSoft: data.shiftKey\n\t\t\t\t} ) );\n\n\t\t\t\t// Stop `keydown` event if `enter` event was stopped.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\t\tif ( event.stop.called ) {\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user presses the <kbd>Enter</kbd> key.\n *\n * Note: This event is fired by the {@link module:enter/enterobserver~EnterObserver observer}\n * (usually registered by the {@link module:enter/enter~Enter Enter feature} and\n * {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature}).\n *\n * @event module:engine/view/document~Document#event:enter\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {Boolean} data.isSoft Whether it's a soft enter (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or hard enter (<kbd>Enter</kbd>).\n */\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAOA,QAAQ,MAAM,uDAAuD;AAC5E,OAAOC,YAAY,MAAM,2DAA2D;AACpF,OAAOC,iBAAiB,MAAM,gEAAgE;AAC9F,SAASC,QAAQ,QAAQ,wCAAwC;;AAEjE;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,aAAa,SAASJ,QAAQ,CAAC;EACnD;AACD;AACA;EACCK,WAAW,CAAEC,IAAI,EAAG;IACnB,KAAK,CAAEA,IAAI,CAAE;IAEb,MAAMC,GAAG,GAAG,IAAI,CAACC,QAAQ;IAEzBD,GAAG,CAACE,EAAE,CAAE,SAAS,EAAE,CAAEC,GAAG,EAAEC,IAAI,KAAM;MACnC,IAAK,IAAI,CAACC,SAAS,IAAID,IAAI,CAACE,OAAO,IAAIV,QAAQ,CAACW,KAAK,EAAG;QACvD,MAAMC,KAAK,GAAG,IAAIb,iBAAiB,CAAEK,GAAG,EAAE,OAAO,EAAEA,GAAG,CAACS,SAAS,CAACC,aAAa,EAAE,CAAE;QAElFV,GAAG,CAACW,IAAI,CAAEH,KAAK,EAAE,IAAId,YAAY,CAAEM,GAAG,EAAEI,IAAI,CAACQ,QAAQ,EAAE;UACtDC,MAAM,EAAET,IAAI,CAACU;QACd,CAAC,CAAE,CAAE;;QAEL;QACA;QACA,IAAKN,KAAK,CAACO,IAAI,CAACC,MAAM,EAAG;UACxBb,GAAG,CAACY,IAAI,EAAE;QACX;MACD;IACD,CAAC,CAAE;EACJ;;EAEA;AACD;AACA;EACCE,OAAO,GAAG,CAAC;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}