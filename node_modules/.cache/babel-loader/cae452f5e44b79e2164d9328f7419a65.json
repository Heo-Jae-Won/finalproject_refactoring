{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/view\n */\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\nimport InputObserver from './observer/inputobserver';\nimport ArrowKeysObserver from './observer/arrowkeysobserver';\nimport TabObserver from './observer/tabobserver';\nimport { Observable } from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n * * {@link module:engine/view/observer/arrowkeysobserver~ArrowKeysObserver}.\n * * {@link module:engine/view/observer/tabobserver~TabObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View extends Observable {\n  /**\n   * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor The styles processor instance.\n   */\n  constructor(stylesProcessor) {\n    super();\n    /**\n     * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n     *\n     * @readonly\n     * @type {module:engine/view/document~Document}\n     */\n    this.document = new Document(stylesProcessor);\n    /**\n     * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} used by\n     * {@link module:engine/view/view~View#_renderer renderer}\n     * and {@link module:engine/view/observer/observer~Observer observers}.\n     *\n     * @readonly\n     * @type {module:engine/view/domconverter~DomConverter}\n     */\n    this.domConverter = new DomConverter(this.document);\n    /**\n     * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n     *\n     * @readonly\n     * @type {Map.<String, HTMLElement>}\n     */\n    this.domRoots = new Map();\n    /**\n     * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n     *\n     * @readonly\n     * @member {Boolean} #isRenderingInProgress\n     */\n    this.set('isRenderingInProgress', false);\n    /**\n     * Informs whether the DOM selection is inside any of the DOM roots managed by the view.\n     *\n     * @readonly\n     * @member {Boolean} #hasDomSelection\n     */\n    this.set('hasDomSelection', false);\n    /**\n     * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n     *\n     * @protected\n     * @type {module:engine/view/renderer~Renderer}\n     */\n    this._renderer = new Renderer(this.domConverter, this.document.selection);\n    this._renderer.bind('isFocused', 'isSelecting').to(this.document, 'isFocused', 'isSelecting');\n    /**\n     * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n     * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n     * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n     * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n     *\n     * @private\n     * @member {WeakMap.<HTMLElement,Object>}\n     */\n    this._initialDomRootAttributes = new WeakMap();\n    /**\n     * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n     *\n     * @private\n     * @type {Map.<Function, module:engine/view/observer/observer~Observer>}\n     */\n    this._observers = new Map();\n    /**\n     * Is set to `true` when {@link #change view changes} are currently in progress.\n     *\n     * @private\n     * @type {Boolean}\n     */\n    this._ongoingChange = false;\n    /**\n     * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n     *\n     * @private\n     * @type {Boolean}\n     */\n    this._postFixersInProgress = false;\n    /**\n     * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n     *\n     * @private\n     * @type {Boolean}\n     */\n    this._renderingDisabled = false;\n    /**\n     * Internal flag that disables rendering when there are no changes since the last rendering.\n     * It stores information about changed selection and changed elements from attached document roots.\n     *\n     * @private\n     * @type {Boolean}\n     */\n    this._hasChangedSinceTheLastRendering = false;\n    /**\n     * DowncastWriter instance used in {@link #change change method} callbacks.\n     *\n     * @private\n     * @type {module:engine/view/downcastwriter~DowncastWriter}\n     */\n    this._writer = new DowncastWriter(this.document);\n    // Add default observers.\n    this.addObserver(MutationObserver);\n    this.addObserver(SelectionObserver);\n    this.addObserver(FocusObserver);\n    this.addObserver(KeyObserver);\n    this.addObserver(FakeSelectionObserver);\n    this.addObserver(CompositionObserver);\n    this.addObserver(ArrowKeysObserver);\n    this.addObserver(TabObserver);\n    if (env.isAndroid) {\n      this.addObserver(InputObserver);\n    }\n    // Inject quirks handlers.\n    injectQuirksHandling(this);\n    injectUiElementHandling(this);\n    // Use 'normal' priority so that rendering is performed as first when using that priority.\n    this.on('render', () => {\n      this._render();\n      // Informs that layout has changed after render.\n      this.document.fire('layoutChanged');\n      // Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n      this._hasChangedSinceTheLastRendering = false;\n    });\n    // Listen to the document selection changes directly.\n    this.listenTo(this.document.selection, 'change', () => {\n      this._hasChangedSinceTheLastRendering = true;\n    });\n    // Trigger re-render if only the focus changed.\n    this.listenTo(this.document, 'change:isFocused', () => {\n      this._hasChangedSinceTheLastRendering = true;\n    });\n  }\n  /**\n   * Attaches a DOM root element to the view element and enable all observers on that element.\n   * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n   * with the view what means that all child nodes will be removed and replaced with content of the view root.\n   *\n   * This method also will change view element name as the same as tag name of given dom root.\n   * Name is always transformed to lower case.\n   *\n   * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n   *\n   * @param {Element} domRoot DOM root element.\n   * @param {String} [name='main'] Name of the root.\n   */\n  attachDomRoot(domRoot) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'main';\n    const viewRoot = this.document.getRoot(name);\n    // Set view root name the same as DOM root tag name.\n    viewRoot._name = domRoot.tagName.toLowerCase();\n    const initialDomRootAttributes = {};\n    // 1. Copy and cache the attributes to remember the state of the element before attaching.\n    //    The cached attributes will be restored in detachDomRoot() so the element goes to the\n    //    clean state as if the editing view never used it.\n    // 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n    //    The editing view takes over the attribute management completely because various\n    //    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n    //    cannot be managed by the engine and the UI library at the same time.\n    for (const {\n      name,\n      value\n    } of Array.from(domRoot.attributes)) {\n      initialDomRootAttributes[name] = value;\n      // Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n      // and its descendants could have already set some using the writer.addClass() on the view\n      // document root. They haven't been rendered yet so they are not present in the DOM root.\n      // Using writer.setAttribute( 'class', ... ) would override them completely.\n      if (name === 'class') {\n        this._writer.addClass(value.split(' '), viewRoot);\n      } else {\n        this._writer.setAttribute(name, value, viewRoot);\n      }\n    }\n    this._initialDomRootAttributes.set(domRoot, initialDomRootAttributes);\n    const updateContenteditableAttribute = () => {\n      this._writer.setAttribute('contenteditable', (!viewRoot.isReadOnly).toString(), viewRoot);\n      if (viewRoot.isReadOnly) {\n        this._writer.addClass('ck-read-only', viewRoot);\n      } else {\n        this._writer.removeClass('ck-read-only', viewRoot);\n      }\n    };\n    // Set initial value.\n    updateContenteditableAttribute();\n    this.domRoots.set(name, domRoot);\n    this.domConverter.bindElements(domRoot, viewRoot);\n    this._renderer.markToSync('children', viewRoot);\n    this._renderer.markToSync('attributes', viewRoot);\n    this._renderer.domDocuments.add(domRoot.ownerDocument);\n    viewRoot.on('change:children', (evt, node) => this._renderer.markToSync('children', node));\n    viewRoot.on('change:attributes', (evt, node) => this._renderer.markToSync('attributes', node));\n    viewRoot.on('change:text', (evt, node) => this._renderer.markToSync('text', node));\n    viewRoot.on('change:isReadOnly', () => this.change(updateContenteditableAttribute));\n    viewRoot.on('change', () => {\n      this._hasChangedSinceTheLastRendering = true;\n    });\n    for (const observer of this._observers.values()) {\n      observer.observe(domRoot, name);\n    }\n  }\n  /**\n   * Detaches a DOM root element from the view element and restores its attributes to the state before\n   * {@link #attachDomRoot `attachDomRoot()`}.\n   *\n   * @param {String} name Name of the root to detach.\n   */\n  detachDomRoot(name) {\n    const domRoot = this.domRoots.get(name);\n    // Remove all root attributes so the DOM element is \"bare\".\n    Array.from(domRoot.attributes).forEach(_ref => {\n      let {\n        name\n      } = _ref;\n      return domRoot.removeAttribute(name);\n    });\n    const initialDomRootAttributes = this._initialDomRootAttributes.get(domRoot);\n    // Revert all view root attributes back to the state before attachDomRoot was called.\n    for (const attribute in initialDomRootAttributes) {\n      domRoot.setAttribute(attribute, initialDomRootAttributes[attribute]);\n    }\n    this.domRoots.delete(name);\n    this.domConverter.unbindDomElement(domRoot);\n  }\n  /**\n   * Gets DOM root element.\n   *\n   * @param {String} [name='main']  Name of the root.\n   * @returns {Element} DOM root element instance.\n   */\n  getDomRoot() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'main';\n    return this.domRoots.get(name);\n  }\n  /**\n   * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n   * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n   * {@link #domRoots DOM roots}.\n   *\n   * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n   * when registered for the first time. This means that features and other components can register a single observer\n   * multiple times without caring whether it has been already added or not.\n   *\n   * @param {Function} Observer The constructor of an observer to add.\n   * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n   * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n   */\n  addObserver(ObserverConstructor) {\n    let observer = this._observers.get(ObserverConstructor);\n    if (observer) {\n      return observer;\n    }\n    observer = new ObserverConstructor(this);\n    this._observers.set(ObserverConstructor, observer);\n    for (const [name, domElement] of this.domRoots) {\n      observer.observe(domElement, name);\n    }\n    observer.enable();\n    return observer;\n  }\n  /**\n   * Returns observer of the given type or `undefined` if such observer has not been added yet.\n   *\n   * @param {Function} Observer The constructor of an observer to get.\n   * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n   */\n  getObserver(ObserverConstructor) {\n    return this._observers.get(ObserverConstructor);\n  }\n  /**\n   * Disables all added observers.\n   */\n  disableObservers() {\n    for (const observer of this._observers.values()) {\n      observer.disable();\n    }\n  }\n  /**\n   * Enables all added observers.\n   */\n  enableObservers() {\n    for (const observer of this._observers.values()) {\n      observer.enable();\n    }\n  }\n  /**\n   * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n   * caret, if not already visible to the user.\n   */\n  scrollToTheSelection() {\n    const range = this.document.selection.getFirstRange();\n    if (range) {\n      scrollViewportToShowTarget({\n        target: this.domConverter.viewRangeToDom(range),\n        viewportOffset: 20\n      });\n    }\n  }\n  /**\n   * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n   * that is currently having selection inside.\n   */\n  focus() {\n    if (!this.document.isFocused) {\n      const editable = this.document.selection.editableElement;\n      if (editable) {\n        this.domConverter.focus(editable);\n        this.forceRender();\n      } else {\n        // Before focusing view document, selection should be placed inside one of the view's editables.\n        // Normally its selection will be converted from model document (which have default selection), but\n        // when using view document on its own, we need to manually place selection before focusing it.\n        //\n        // @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n      }\n    }\n  }\n  /**\n   * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n   * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n   * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n   * to nest calls one inside another and still performs a single rendering after all those changes are made.\n   * It also returns the return value of its callback.\n   *\n   *\t\tconst text = view.change( writer => {\n   *\t\t\tconst newText = writer.createText( 'foo' );\n   *\t\t\twriter.insert( position1, newText );\n   *\n   *\t\t\tview.change( writer => {\n   *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n   *\t\t\t} );\n   *\n   * \t\t\twriter.remove( range );\n   *\n   * \t\t\treturn newText;\n   *\t\t} );\n   *\n   * When the outermost change block is done and rendering to the DOM is over the\n   * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n   *\n   * This method throws a `applying-view-changes-on-rendering` error when\n   * the change block is used after rendering to the DOM has started.\n   *\n   * @param {Function} callback Callback function which may modify the view.\n   * @returns {*} Value returned by the callback.\n   */\n  change(callback) {\n    if (this.isRenderingInProgress || this._postFixersInProgress) {\n      /**\n       * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n       * cause some unexpected behaviour and inconsistency between the DOM and the view.\n       * This may be caused by:\n       *\n       * * calling {@link #change} or {@link #forceRender} during rendering process,\n       * * calling {@link #change} or {@link #forceRender} inside of\n       *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n       *\n       * @error cannot-change-view-tree\n       */\n      throw new CKEditorError('cannot-change-view-tree', this);\n    }\n    try {\n      // Recursive call to view.change() method - execute listener immediately.\n      if (this._ongoingChange) {\n        return callback(this._writer);\n      }\n      // This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n      // event for all nested calls.\n      this._ongoingChange = true;\n      const callbackResult = callback(this._writer);\n      this._ongoingChange = false;\n      // This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n      // view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all\n      // changes. Also, we don't need to render anything if there're no changes since last rendering.\n      if (!this._renderingDisabled && this._hasChangedSinceTheLastRendering) {\n        this._postFixersInProgress = true;\n        this.document._callPostFixers(this._writer);\n        this._postFixersInProgress = false;\n        this.fire('render');\n      }\n      return callbackResult;\n    } catch (err) {\n      // @if CK_DEBUG // throw err;\n      /* istanbul ignore next */\n      CKEditorError.rethrowUnexpectedError(err, this);\n    }\n  }\n  /**\n   * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n   * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n   *\n   * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n   * block and the view will automatically check whether it needs to render DOM or not.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n   * trying to re-render when rendering to DOM has already started.\n   */\n  forceRender() {\n    this._hasChangedSinceTheLastRendering = true;\n    this.change(() => {});\n  }\n  /**\n   * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n   */\n  destroy() {\n    for (const observer of this._observers.values()) {\n      observer.destroy();\n    }\n    this.document.destroy();\n    this.stopListening();\n  }\n  /**\n   * Creates position at the given location. The location can be specified as:\n   *\n   * * a {@link module:engine/view/position~Position position},\n   * * parent element and offset (offset defaults to `0`),\n   * * parent element and `'end'` (sets position at the end of that element),\n   * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n   *\n   * This method is a shortcut to other constructors such as:\n   *\n   * * {@link #createPositionBefore},\n   * * {@link #createPositionAfter},\n   *\n   * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/view/item~Item view item}.\n   */\n  createPositionAt(itemOrPosition, offset) {\n    return Position._createAt(itemOrPosition, offset);\n  }\n  /**\n   * Creates a new position after given view item.\n   *\n   * @param {module:engine/view/item~Item} item View item after which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n  createPositionAfter(item) {\n    return Position._createAfter(item);\n  }\n  /**\n   * Creates a new position before given view item.\n   *\n   * @param {module:engine/view/item~Item} item View item before which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n  createPositionBefore(item) {\n    return Position._createBefore(item);\n  }\n  /**\n   * Creates a range spanning from `start` position to `end` position.\n   *\n   * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n   *\n   * @param {module:engine/view/position~Position} start Start position.\n   * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n   * @returns {module:engine/view/range~Range}\n   */\n  createRange() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new Range(...args);\n  }\n  /**\n   * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n   *\n   * @param {module:engine/view/item~Item} item\n   * @returns {module:engine/view/range~Range}\n   */\n  createRangeOn(item) {\n    return Range._createOn(item);\n  }\n  /**\n   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n   * that element and ends after the last child of that element.\n   *\n   * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n   * @returns {module:engine/view/range~Range}\n   */\n  createRangeIn(element) {\n    return Range._createIn(element);\n  }\n  /**\n   Creates new {@link module:engine/view/selection~Selection} instance.\n   *\n   * \t\t// Creates empty selection without ranges.\n   *\t\tconst selection = view.createSelection();\n   *\n   *\t\t// Creates selection at the given range.\n   *\t\tconst range = view.createRange( start, end );\n   *\t\tconst selection = view.createSelection( range );\n   *\n   *\t\t// Creates selection at the given ranges\n   * \t\tconst ranges = [ view.createRange( start1, end2 ), view.createRange( star2, end2 ) ];\n   *\t\tconst selection = view.createSelection( ranges );\n   *\n   *\t\t// Creates selection from the other selection.\n   *\t\tconst otherSelection = view.createSelection();\n   *\t\tconst selection = view.createSelection( otherSelection );\n   *\n   *\t\t// Creates selection from the document selection.\n   *\t\tconst selection = view.createSelection( editor.editing.view.document.selection );\n   *\n   * \t\t// Creates selection at the given position.\n   *\t\tconst position = view.createPositionFromPath( root, path );\n   *\t\tconst selection = view.createSelection( position );\n   *\n   *\t\t// Creates collapsed selection at the position of given item and offset.\n   *\t\tconst paragraph = view.createContainerElement( 'paragraph' );\n   *\t\tconst selection = view.createSelection( paragraph, offset );\n   *\n   *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n   *\t\t// first child of that element and ends after the last child of that element.\n   *\t\tconst selection = view.createSelection( paragraph, 'in' );\n   *\n   *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n   *\t\t// just after the item.\n   *\t\tconst selection = view.createSelection( paragraph, 'on' );\n   *\n   * `Selection`'s factory method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n   *\n   *\t\t// Creates backward selection.\n   *\t\tconst selection = view.createSelection( range, { backward: true } );\n   *\n   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n   * represented in other way, for example by applying proper CSS class.\n   *\n   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n   * (and be  properly handled by screen readers).\n   *\n   *\t\t// Creates fake selection with label.\n   *\t\tconst selection = view.createSelection( range, { fake: true, label: 'foo' } );\n   *\n   * @param {module:engine/view/selection~Selectable} [selectable=null]\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n   * @param {String} [options.label] Label for the fake selection.\n   * @returns {module:engine/view/selection~Selection}\n   */\n  createSelection() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return new Selection(...args);\n  }\n  /**\n   * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n   * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n   *\n   * @protected\n   * @internal\n   * @param {Boolean} flag A flag indicates whether the rendering should be disabled.\n   */\n  _disableRendering(flag) {\n    this._renderingDisabled = flag;\n    if (flag == false) {\n      // Render when you stop blocking rendering.\n      this.change(() => {});\n    }\n  }\n  /**\n   * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n   * before rendering and re-enabled after that.\n   *\n   * @private\n   */\n  _render() {\n    this.isRenderingInProgress = true;\n    this.disableObservers();\n    this._renderer.render();\n    this.enableObservers();\n    this.isRenderingInProgress = false;\n  }\n}","map":{"version":3,"names":["Document","DowncastWriter","Renderer","DomConverter","Position","Range","Selection","MutationObserver","KeyObserver","FakeSelectionObserver","SelectionObserver","FocusObserver","CompositionObserver","InputObserver","ArrowKeysObserver","TabObserver","Observable","scrollViewportToShowTarget","injectUiElementHandling","injectQuirksHandling","CKEditorError","env","View","constructor","stylesProcessor","document","domConverter","domRoots","Map","set","_renderer","selection","bind","to","_initialDomRootAttributes","WeakMap","_observers","_ongoingChange","_postFixersInProgress","_renderingDisabled","_hasChangedSinceTheLastRendering","_writer","addObserver","isAndroid","on","_render","fire","listenTo","attachDomRoot","domRoot","name","viewRoot","getRoot","_name","tagName","toLowerCase","initialDomRootAttributes","value","Array","from","attributes","addClass","split","setAttribute","updateContenteditableAttribute","isReadOnly","toString","removeClass","bindElements","markToSync","domDocuments","add","ownerDocument","evt","node","change","observer","values","observe","detachDomRoot","get","forEach","removeAttribute","attribute","delete","unbindDomElement","getDomRoot","ObserverConstructor","domElement","enable","getObserver","disableObservers","disable","enableObservers","scrollToTheSelection","range","getFirstRange","target","viewRangeToDom","viewportOffset","focus","isFocused","editable","editableElement","forceRender","callback","isRenderingInProgress","callbackResult","_callPostFixers","err","rethrowUnexpectedError","destroy","stopListening","createPositionAt","itemOrPosition","offset","_createAt","createPositionAfter","item","_createAfter","createPositionBefore","_createBefore","createRange","args","createRangeOn","_createOn","createRangeIn","element","_createIn","createSelection","_disableRendering","flag","render"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/view.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/view\n */\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\nimport InputObserver from './observer/inputobserver';\nimport ArrowKeysObserver from './observer/arrowkeysobserver';\nimport TabObserver from './observer/tabobserver';\nimport { Observable } from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n * * {@link module:engine/view/observer/arrowkeysobserver~ArrowKeysObserver}.\n * * {@link module:engine/view/observer/tabobserver~TabObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View extends Observable {\n    /**\n     * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor The styles processor instance.\n     */\n    constructor(stylesProcessor) {\n        super();\n        /**\n         * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n         *\n         * @readonly\n         * @type {module:engine/view/document~Document}\n         */\n        this.document = new Document(stylesProcessor);\n        /**\n         * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} used by\n         * {@link module:engine/view/view~View#_renderer renderer}\n         * and {@link module:engine/view/observer/observer~Observer observers}.\n         *\n         * @readonly\n         * @type {module:engine/view/domconverter~DomConverter}\n         */\n        this.domConverter = new DomConverter(this.document);\n        /**\n         * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n         *\n         * @readonly\n         * @type {Map.<String, HTMLElement>}\n         */\n        this.domRoots = new Map();\n        /**\n         * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n         *\n         * @readonly\n         * @member {Boolean} #isRenderingInProgress\n         */\n        this.set('isRenderingInProgress', false);\n        /**\n         * Informs whether the DOM selection is inside any of the DOM roots managed by the view.\n         *\n         * @readonly\n         * @member {Boolean} #hasDomSelection\n         */\n        this.set('hasDomSelection', false);\n        /**\n         * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n         *\n         * @protected\n         * @type {module:engine/view/renderer~Renderer}\n         */\n        this._renderer = new Renderer(this.domConverter, this.document.selection);\n        this._renderer.bind('isFocused', 'isSelecting').to(this.document, 'isFocused', 'isSelecting');\n        /**\n         * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n         * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n         * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n         * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n         *\n         * @private\n         * @member {WeakMap.<HTMLElement,Object>}\n         */\n        this._initialDomRootAttributes = new WeakMap();\n        /**\n         * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n         *\n         * @private\n         * @type {Map.<Function, module:engine/view/observer/observer~Observer>}\n         */\n        this._observers = new Map();\n        /**\n         * Is set to `true` when {@link #change view changes} are currently in progress.\n         *\n         * @private\n         * @type {Boolean}\n         */\n        this._ongoingChange = false;\n        /**\n         * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n         *\n         * @private\n         * @type {Boolean}\n         */\n        this._postFixersInProgress = false;\n        /**\n         * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n         *\n         * @private\n         * @type {Boolean}\n         */\n        this._renderingDisabled = false;\n        /**\n         * Internal flag that disables rendering when there are no changes since the last rendering.\n         * It stores information about changed selection and changed elements from attached document roots.\n         *\n         * @private\n         * @type {Boolean}\n         */\n        this._hasChangedSinceTheLastRendering = false;\n        /**\n         * DowncastWriter instance used in {@link #change change method} callbacks.\n         *\n         * @private\n         * @type {module:engine/view/downcastwriter~DowncastWriter}\n         */\n        this._writer = new DowncastWriter(this.document);\n        // Add default observers.\n        this.addObserver(MutationObserver);\n        this.addObserver(SelectionObserver);\n        this.addObserver(FocusObserver);\n        this.addObserver(KeyObserver);\n        this.addObserver(FakeSelectionObserver);\n        this.addObserver(CompositionObserver);\n        this.addObserver(ArrowKeysObserver);\n        this.addObserver(TabObserver);\n        if (env.isAndroid) {\n            this.addObserver(InputObserver);\n        }\n        // Inject quirks handlers.\n        injectQuirksHandling(this);\n        injectUiElementHandling(this);\n        // Use 'normal' priority so that rendering is performed as first when using that priority.\n        this.on('render', () => {\n            this._render();\n            // Informs that layout has changed after render.\n            this.document.fire('layoutChanged');\n            // Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n            this._hasChangedSinceTheLastRendering = false;\n        });\n        // Listen to the document selection changes directly.\n        this.listenTo(this.document.selection, 'change', () => {\n            this._hasChangedSinceTheLastRendering = true;\n        });\n        // Trigger re-render if only the focus changed.\n        this.listenTo(this.document, 'change:isFocused', () => {\n            this._hasChangedSinceTheLastRendering = true;\n        });\n    }\n    /**\n     * Attaches a DOM root element to the view element and enable all observers on that element.\n     * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n     * with the view what means that all child nodes will be removed and replaced with content of the view root.\n     *\n     * This method also will change view element name as the same as tag name of given dom root.\n     * Name is always transformed to lower case.\n     *\n     * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n     *\n     * @param {Element} domRoot DOM root element.\n     * @param {String} [name='main'] Name of the root.\n     */\n    attachDomRoot(domRoot, name = 'main') {\n        const viewRoot = this.document.getRoot(name);\n        // Set view root name the same as DOM root tag name.\n        viewRoot._name = domRoot.tagName.toLowerCase();\n        const initialDomRootAttributes = {};\n        // 1. Copy and cache the attributes to remember the state of the element before attaching.\n        //    The cached attributes will be restored in detachDomRoot() so the element goes to the\n        //    clean state as if the editing view never used it.\n        // 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n        //    The editing view takes over the attribute management completely because various\n        //    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n        //    cannot be managed by the engine and the UI library at the same time.\n        for (const { name, value } of Array.from(domRoot.attributes)) {\n            initialDomRootAttributes[name] = value;\n            // Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n            // and its descendants could have already set some using the writer.addClass() on the view\n            // document root. They haven't been rendered yet so they are not present in the DOM root.\n            // Using writer.setAttribute( 'class', ... ) would override them completely.\n            if (name === 'class') {\n                this._writer.addClass(value.split(' '), viewRoot);\n            }\n            else {\n                this._writer.setAttribute(name, value, viewRoot);\n            }\n        }\n        this._initialDomRootAttributes.set(domRoot, initialDomRootAttributes);\n        const updateContenteditableAttribute = () => {\n            this._writer.setAttribute('contenteditable', (!viewRoot.isReadOnly).toString(), viewRoot);\n            if (viewRoot.isReadOnly) {\n                this._writer.addClass('ck-read-only', viewRoot);\n            }\n            else {\n                this._writer.removeClass('ck-read-only', viewRoot);\n            }\n        };\n        // Set initial value.\n        updateContenteditableAttribute();\n        this.domRoots.set(name, domRoot);\n        this.domConverter.bindElements(domRoot, viewRoot);\n        this._renderer.markToSync('children', viewRoot);\n        this._renderer.markToSync('attributes', viewRoot);\n        this._renderer.domDocuments.add(domRoot.ownerDocument);\n        viewRoot.on('change:children', (evt, node) => this._renderer.markToSync('children', node));\n        viewRoot.on('change:attributes', (evt, node) => this._renderer.markToSync('attributes', node));\n        viewRoot.on('change:text', (evt, node) => this._renderer.markToSync('text', node));\n        viewRoot.on('change:isReadOnly', () => this.change(updateContenteditableAttribute));\n        viewRoot.on('change', () => {\n            this._hasChangedSinceTheLastRendering = true;\n        });\n        for (const observer of this._observers.values()) {\n            observer.observe(domRoot, name);\n        }\n    }\n    /**\n     * Detaches a DOM root element from the view element and restores its attributes to the state before\n     * {@link #attachDomRoot `attachDomRoot()`}.\n     *\n     * @param {String} name Name of the root to detach.\n     */\n    detachDomRoot(name) {\n        const domRoot = this.domRoots.get(name);\n        // Remove all root attributes so the DOM element is \"bare\".\n        Array.from(domRoot.attributes).forEach(({ name }) => domRoot.removeAttribute(name));\n        const initialDomRootAttributes = this._initialDomRootAttributes.get(domRoot);\n        // Revert all view root attributes back to the state before attachDomRoot was called.\n        for (const attribute in initialDomRootAttributes) {\n            domRoot.setAttribute(attribute, initialDomRootAttributes[attribute]);\n        }\n        this.domRoots.delete(name);\n        this.domConverter.unbindDomElement(domRoot);\n    }\n    /**\n     * Gets DOM root element.\n     *\n     * @param {String} [name='main']  Name of the root.\n     * @returns {Element} DOM root element instance.\n     */\n    getDomRoot(name = 'main') {\n        return this.domRoots.get(name);\n    }\n    /**\n     * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n     * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n     * {@link #domRoots DOM roots}.\n     *\n     * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n     * when registered for the first time. This means that features and other components can register a single observer\n     * multiple times without caring whether it has been already added or not.\n     *\n     * @param {Function} Observer The constructor of an observer to add.\n     * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n     * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n     */\n    addObserver(ObserverConstructor) {\n        let observer = this._observers.get(ObserverConstructor);\n        if (observer) {\n            return observer;\n        }\n        observer = new ObserverConstructor(this);\n        this._observers.set(ObserverConstructor, observer);\n        for (const [name, domElement] of this.domRoots) {\n            observer.observe(domElement, name);\n        }\n        observer.enable();\n        return observer;\n    }\n    /**\n     * Returns observer of the given type or `undefined` if such observer has not been added yet.\n     *\n     * @param {Function} Observer The constructor of an observer to get.\n     * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n     */\n    getObserver(ObserverConstructor) {\n        return this._observers.get(ObserverConstructor);\n    }\n    /**\n     * Disables all added observers.\n     */\n    disableObservers() {\n        for (const observer of this._observers.values()) {\n            observer.disable();\n        }\n    }\n    /**\n     * Enables all added observers.\n     */\n    enableObservers() {\n        for (const observer of this._observers.values()) {\n            observer.enable();\n        }\n    }\n    /**\n     * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n     * caret, if not already visible to the user.\n     */\n    scrollToTheSelection() {\n        const range = this.document.selection.getFirstRange();\n        if (range) {\n            scrollViewportToShowTarget({\n                target: this.domConverter.viewRangeToDom(range),\n                viewportOffset: 20\n            });\n        }\n    }\n    /**\n     * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n     * that is currently having selection inside.\n     */\n    focus() {\n        if (!this.document.isFocused) {\n            const editable = this.document.selection.editableElement;\n            if (editable) {\n                this.domConverter.focus(editable);\n                this.forceRender();\n            }\n            else {\n                // Before focusing view document, selection should be placed inside one of the view's editables.\n                // Normally its selection will be converted from model document (which have default selection), but\n                // when using view document on its own, we need to manually place selection before focusing it.\n                //\n                // @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n            }\n        }\n    }\n    /**\n     * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n     * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n     * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n     * to nest calls one inside another and still performs a single rendering after all those changes are made.\n     * It also returns the return value of its callback.\n     *\n     *\t\tconst text = view.change( writer => {\n     *\t\t\tconst newText = writer.createText( 'foo' );\n     *\t\t\twriter.insert( position1, newText );\n     *\n     *\t\t\tview.change( writer => {\n     *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n     *\t\t\t} );\n     *\n     * \t\t\twriter.remove( range );\n     *\n     * \t\t\treturn newText;\n     *\t\t} );\n     *\n     * When the outermost change block is done and rendering to the DOM is over the\n     * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n     *\n     * This method throws a `applying-view-changes-on-rendering` error when\n     * the change block is used after rendering to the DOM has started.\n     *\n     * @param {Function} callback Callback function which may modify the view.\n     * @returns {*} Value returned by the callback.\n     */\n    change(callback) {\n        if (this.isRenderingInProgress || this._postFixersInProgress) {\n            /**\n             * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n             * cause some unexpected behaviour and inconsistency between the DOM and the view.\n             * This may be caused by:\n             *\n             * * calling {@link #change} or {@link #forceRender} during rendering process,\n             * * calling {@link #change} or {@link #forceRender} inside of\n             *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n             *\n             * @error cannot-change-view-tree\n             */\n            throw new CKEditorError('cannot-change-view-tree', this);\n        }\n        try {\n            // Recursive call to view.change() method - execute listener immediately.\n            if (this._ongoingChange) {\n                return callback(this._writer);\n            }\n            // This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n            // event for all nested calls.\n            this._ongoingChange = true;\n            const callbackResult = callback(this._writer);\n            this._ongoingChange = false;\n            // This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n            // view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all\n            // changes. Also, we don't need to render anything if there're no changes since last rendering.\n            if (!this._renderingDisabled && this._hasChangedSinceTheLastRendering) {\n                this._postFixersInProgress = true;\n                this.document._callPostFixers(this._writer);\n                this._postFixersInProgress = false;\n                this.fire('render');\n            }\n            return callbackResult;\n        }\n        catch (err) {\n            // @if CK_DEBUG // throw err;\n            /* istanbul ignore next */\n            CKEditorError.rethrowUnexpectedError(err, this);\n        }\n    }\n    /**\n     * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n     * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n     *\n     * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n     * block and the view will automatically check whether it needs to render DOM or not.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n     * trying to re-render when rendering to DOM has already started.\n     */\n    forceRender() {\n        this._hasChangedSinceTheLastRendering = true;\n        this.change(() => { });\n    }\n    /**\n     * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n     */\n    destroy() {\n        for (const observer of this._observers.values()) {\n            observer.destroy();\n        }\n        this.document.destroy();\n        this.stopListening();\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/view/position~Position position},\n     * * parent element and offset (offset defaults to `0`),\n     * * parent element and `'end'` (sets position at the end of that element),\n     * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n     *\n     * This method is a shortcut to other constructors such as:\n     *\n     * * {@link #createPositionBefore},\n     * * {@link #createPositionAfter},\n     *\n     * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n     * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n     * first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    createPositionAt(itemOrPosition, offset) {\n        return Position._createAt(itemOrPosition, offset);\n    }\n    /**\n     * Creates a new position after given view item.\n     *\n     * @param {module:engine/view/item~Item} item View item after which the position should be located.\n     * @returns {module:engine/view/position~Position}\n     */\n    createPositionAfter(item) {\n        return Position._createAfter(item);\n    }\n    /**\n     * Creates a new position before given view item.\n     *\n     * @param {module:engine/view/item~Item} item View item before which the position should be located.\n     * @returns {module:engine/view/position~Position}\n     */\n    createPositionBefore(item) {\n        return Position._createBefore(item);\n    }\n    /**\n     * Creates a range spanning from `start` position to `end` position.\n     *\n     * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n     *\n     * @param {module:engine/view/position~Position} start Start position.\n     * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n     * @returns {module:engine/view/range~Range}\n     */\n    createRange(...args) {\n        return new Range(...args);\n    }\n    /**\n     * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n     *\n     * @param {module:engine/view/item~Item} item\n     * @returns {module:engine/view/range~Range}\n     */\n    createRangeOn(item) {\n        return Range._createOn(item);\n    }\n    /**\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n     * @returns {module:engine/view/range~Range}\n     */\n    createRangeIn(element) {\n        return Range._createIn(element);\n    }\n    /**\n     Creates new {@link module:engine/view/selection~Selection} instance.\n     *\n     * \t\t// Creates empty selection without ranges.\n     *\t\tconst selection = view.createSelection();\n     *\n     *\t\t// Creates selection at the given range.\n     *\t\tconst range = view.createRange( start, end );\n     *\t\tconst selection = view.createSelection( range );\n     *\n     *\t\t// Creates selection at the given ranges\n     * \t\tconst ranges = [ view.createRange( start1, end2 ), view.createRange( star2, end2 ) ];\n     *\t\tconst selection = view.createSelection( ranges );\n     *\n     *\t\t// Creates selection from the other selection.\n     *\t\tconst otherSelection = view.createSelection();\n     *\t\tconst selection = view.createSelection( otherSelection );\n     *\n     *\t\t// Creates selection from the document selection.\n     *\t\tconst selection = view.createSelection( editor.editing.view.document.selection );\n     *\n     * \t\t// Creates selection at the given position.\n     *\t\tconst position = view.createPositionFromPath( root, path );\n     *\t\tconst selection = view.createSelection( position );\n     *\n     *\t\t// Creates collapsed selection at the position of given item and offset.\n     *\t\tconst paragraph = view.createContainerElement( 'paragraph' );\n     *\t\tconst selection = view.createSelection( paragraph, offset );\n     *\n     *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n     *\t\t// first child of that element and ends after the last child of that element.\n     *\t\tconst selection = view.createSelection( paragraph, 'in' );\n     *\n     *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n     *\t\t// just after the item.\n     *\t\tconst selection = view.createSelection( paragraph, 'on' );\n     *\n     * `Selection`'s factory method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n     *\n     *\t\t// Creates backward selection.\n     *\t\tconst selection = view.createSelection( range, { backward: true } );\n     *\n     * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n     * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n     * represented in other way, for example by applying proper CSS class.\n     *\n     * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n     * (and be  properly handled by screen readers).\n     *\n     *\t\t// Creates fake selection with label.\n     *\t\tconst selection = view.createSelection( range, { fake: true, label: 'foo' } );\n     *\n     * @param {module:engine/view/selection~Selectable} [selectable=null]\n     * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n     * @param {Object} [options]\n     * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n     * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n     * @param {String} [options.label] Label for the fake selection.\n     * @returns {module:engine/view/selection~Selection}\n     */\n    createSelection(...args) {\n        return new Selection(...args);\n    }\n    /**\n     * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n     * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n     *\n     * @protected\n     * @internal\n     * @param {Boolean} flag A flag indicates whether the rendering should be disabled.\n     */\n    _disableRendering(flag) {\n        this._renderingDisabled = flag;\n        if (flag == false) {\n            // Render when you stop blocking rendering.\n            this.change(() => { });\n        }\n    }\n    /**\n     * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n     * before rendering and re-enabled after that.\n     *\n     * @private\n     */\n    _render() {\n        this.isRenderingInProgress = true;\n        this.disableObservers();\n        this._renderer.render();\n        this.enableObservers();\n        this.isRenderingInProgress = false;\n    }\n}\n"],"mappings":"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M,CAAE,CAAC,CAAC;EAC1B;EACA;AACJ;AACA;EACIoC,OAAO,GAAG;IACN,KAAK,MAAMnC,QAAQ,IAAI,IAAI,CAACxC,UAAU,CAACyC,MAAM,EAAE,EAAE;MAC7CD,QAAQ,CAACmC,OAAO,EAAE;IACtB;IACA,IAAI,CAACtF,QAAQ,CAACsF,OAAO,EAAE;IACvB,IAAI,CAACC,aAAa,EAAE;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,gBAAgB,CAACC,cAAc,EAAEC,MAAM,EAAE;IACrC,OAAO/G,QAAQ,CAACgH,SAAS,CAACF,cAAc,EAAEC,MAAM,CAAC;EACrD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,mBAAmB,CAACC,IAAI,EAAE;IACtB,OAAOlH,QAAQ,CAACmH,YAAY,CAACD,IAAI,CAAC;EACtC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,oBAAoB,CAACF,IAAI,EAAE;IACvB,OAAOlH,QAAQ,CAACqH,aAAa,CAACH,IAAI,CAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,WAAW,GAAU;IAAA,kCAANC,IAAI;MAAJA,IAAI;IAAA;IACf,OAAO,IAAItH,KAAK,CAAC,GAAGsH,IAAI,CAAC;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,aAAa,CAACN,IAAI,EAAE;IAChB,OAAOjH,KAAK,CAACwH,SAAS,CAACP,IAAI,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIQ,aAAa,CAACC,OAAO,EAAE;IACnB,OAAO1H,KAAK,CAAC2H,SAAS,CAACD,OAAO,CAAC;EACnC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,eAAe,GAAU;IAAA,mCAANN,IAAI;MAAJA,IAAI;IAAA;IACnB,OAAO,IAAIrH,SAAS,CAAC,GAAGqH,IAAI,CAAC;EACjC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIO,iBAAiB,CAACC,IAAI,EAAE;IACpB,IAAI,CAAC5F,kBAAkB,GAAG4F,IAAI;IAC9B,IAAIA,IAAI,IAAI,KAAK,EAAE;MACf;MACA,IAAI,CAACxD,MAAM,CAAC,MAAM,CAAE,CAAC,CAAC;IAC1B;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACI9B,OAAO,GAAG;IACN,IAAI,CAAC6D,qBAAqB,GAAG,IAAI;IACjC,IAAI,CAACf,gBAAgB,EAAE;IACvB,IAAI,CAAC7D,SAAS,CAACsG,MAAM,EAAE;IACvB,IAAI,CAACvC,eAAe,EAAE;IACtB,IAAI,CAACa,qBAAqB,GAAG,KAAK;EACtC;AACJ"},"metadata":{},"sourceType":"module"}