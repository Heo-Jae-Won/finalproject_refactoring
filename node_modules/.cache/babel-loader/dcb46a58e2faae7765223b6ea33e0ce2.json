{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/delete\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport DeleteCommand from './deletecommand';\nimport DeleteObserver from './deleteobserver';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * The delete and backspace feature. Handles the <kbd>Delete</kbd> and <kbd>Backspace</kbd> keys in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Delete extends Plugin {\n  /**\n   * Whether pressing backspace should trigger undo action\n   *\n   * @private\n   * @member {Boolean} #_undoOnBackspace\n   */\n\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Delete';\n  }\n  init() {\n    const editor = this.editor;\n    const view = editor.editing.view;\n    const viewDocument = view.document;\n    const modelDocument = editor.model.document;\n    view.addObserver(DeleteObserver);\n    this._undoOnBackspace = false;\n    const deleteForwardCommand = new DeleteCommand(editor, 'forward');\n\n    // Register `deleteForward` command and add `forwardDelete` command as an alias for backward compatibility.\n    editor.commands.add('deleteForward', deleteForwardCommand);\n    editor.commands.add('forwardDelete', deleteForwardCommand);\n    editor.commands.add('delete', new DeleteCommand(editor, 'backward'));\n    this.listenTo(viewDocument, 'delete', (evt, data) => {\n      const deleteCommandParams = {\n        unit: data.unit,\n        sequence: data.sequence\n      };\n\n      // If a specific (view) selection to remove was set, convert it to a model selection and set as a parameter for `DeleteCommand`.\n      if (data.selectionToRemove) {\n        const modelSelection = editor.model.createSelection();\n        const ranges = [];\n        for (const viewRange of data.selectionToRemove.getRanges()) {\n          ranges.push(editor.editing.mapper.toModelRange(viewRange));\n        }\n        modelSelection.setTo(ranges);\n        deleteCommandParams.selection = modelSelection;\n      }\n      editor.execute(data.direction == 'forward' ? 'deleteForward' : 'delete', deleteCommandParams);\n      data.preventDefault();\n      view.scrollToTheSelection();\n    }, {\n      priority: 'low'\n    });\n\n    // Android IMEs have a quirk - they change DOM selection after the input changes were performed by the browser.\n    // This happens on `keyup` event. Android doesn't know anything about our deletion and selection handling. Even if the selection\n    // was changed during input events, IME remembers the position where the selection \"should\" be placed and moves it there.\n    //\n    // To prevent incorrect selection, we save the selection after deleting here and then re-set it on `keyup`. This has to be done\n    // on DOM selection level, because on `keyup` the model selection is still the same as it was just after deletion, so it\n    // wouldn't be changed and the fix would do nothing.\n    //\n    if (env.isAndroid) {\n      let domSelectionAfterDeletion = null;\n      this.listenTo(viewDocument, 'delete', (evt, data) => {\n        const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n        domSelectionAfterDeletion = {\n          anchorNode: domSelection.anchorNode,\n          anchorOffset: domSelection.anchorOffset,\n          focusNode: domSelection.focusNode,\n          focusOffset: domSelection.focusOffset\n        };\n      }, {\n        priority: 'lowest'\n      });\n      this.listenTo(viewDocument, 'keyup', (evt, data) => {\n        if (domSelectionAfterDeletion) {\n          const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n          domSelection.collapse(domSelectionAfterDeletion.anchorNode, domSelectionAfterDeletion.anchorOffset);\n          domSelection.extend(domSelectionAfterDeletion.focusNode, domSelectionAfterDeletion.focusOffset);\n          domSelectionAfterDeletion = null;\n        }\n      });\n    }\n    if (this.editor.plugins.has('UndoEditing')) {\n      this.listenTo(viewDocument, 'delete', (evt, data) => {\n        if (this._undoOnBackspace && data.direction == 'backward' && data.sequence == 1 && data.unit == 'codePoint') {\n          this._undoOnBackspace = false;\n          editor.execute('undo');\n          data.preventDefault();\n          evt.stop();\n        }\n      }, {\n        context: '$capture'\n      });\n      this.listenTo(modelDocument, 'change', () => {\n        this._undoOnBackspace = false;\n      });\n    }\n  }\n\n  /**\n   * If the next user action after calling this method is pressing backspace, it would undo the last change.\n   *\n   * Requires {@link module:undo/undoediting~UndoEditing} plugin. If not loaded, does nothing.\n   */\n  requestUndoOnBackspace() {\n    if (this.editor.plugins.has('UndoEditing')) {\n      this._undoOnBackspace = true;\n    }\n  }\n}","map":{"version":3,"names":["Plugin","DeleteCommand","DeleteObserver","env","Delete","pluginName","init","editor","view","editing","viewDocument","document","modelDocument","model","addObserver","_undoOnBackspace","deleteForwardCommand","commands","add","listenTo","evt","data","deleteCommandParams","unit","sequence","selectionToRemove","modelSelection","createSelection","ranges","viewRange","getRanges","push","mapper","toModelRange","setTo","selection","execute","direction","preventDefault","scrollToTheSelection","priority","isAndroid","domSelectionAfterDeletion","domSelection","domTarget","ownerDocument","defaultView","getSelection","anchorNode","anchorOffset","focusNode","focusOffset","collapse","extend","plugins","has","stop","context","requestUndoOnBackspace"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-typing/src/delete.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/delete\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport DeleteCommand from './deletecommand';\nimport DeleteObserver from './deleteobserver';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * The delete and backspace feature. Handles the <kbd>Delete</kbd> and <kbd>Backspace</kbd> keys in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Delete extends Plugin {\n\t/**\n\t * Whether pressing backspace should trigger undo action\n\t *\n\t * @private\n\t * @member {Boolean} #_undoOnBackspace\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Delete';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst modelDocument = editor.model.document;\n\n\t\tview.addObserver( DeleteObserver );\n\n\t\tthis._undoOnBackspace = false;\n\n\t\tconst deleteForwardCommand = new DeleteCommand( editor, 'forward' );\n\n\t\t// Register `deleteForward` command and add `forwardDelete` command as an alias for backward compatibility.\n\t\teditor.commands.add( 'deleteForward', deleteForwardCommand );\n\t\teditor.commands.add( 'forwardDelete', deleteForwardCommand );\n\n\t\teditor.commands.add( 'delete', new DeleteCommand( editor, 'backward' ) );\n\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tconst deleteCommandParams = { unit: data.unit, sequence: data.sequence };\n\n\t\t\t// If a specific (view) selection to remove was set, convert it to a model selection and set as a parameter for `DeleteCommand`.\n\t\t\tif ( data.selectionToRemove ) {\n\t\t\t\tconst modelSelection = editor.model.createSelection();\n\t\t\t\tconst ranges = [];\n\n\t\t\t\tfor ( const viewRange of data.selectionToRemove.getRanges() ) {\n\t\t\t\t\tranges.push( editor.editing.mapper.toModelRange( viewRange ) );\n\t\t\t\t}\n\n\t\t\t\tmodelSelection.setTo( ranges );\n\n\t\t\t\tdeleteCommandParams.selection = modelSelection;\n\t\t\t}\n\n\t\t\teditor.execute( data.direction == 'forward' ? 'deleteForward' : 'delete', deleteCommandParams );\n\n\t\t\tdata.preventDefault();\n\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\n\t\t// Android IMEs have a quirk - they change DOM selection after the input changes were performed by the browser.\n\t\t// This happens on `keyup` event. Android doesn't know anything about our deletion and selection handling. Even if the selection\n\t\t// was changed during input events, IME remembers the position where the selection \"should\" be placed and moves it there.\n\t\t//\n\t\t// To prevent incorrect selection, we save the selection after deleting here and then re-set it on `keyup`. This has to be done\n\t\t// on DOM selection level, because on `keyup` the model selection is still the same as it was just after deletion, so it\n\t\t// wouldn't be changed and the fix would do nothing.\n\t\t//\n\t\tif ( env.isAndroid ) {\n\t\t\tlet domSelectionAfterDeletion = null;\n\n\t\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\tdomSelectionAfterDeletion = {\n\t\t\t\t\tanchorNode: domSelection.anchorNode,\n\t\t\t\t\tanchorOffset: domSelection.anchorOffset,\n\t\t\t\t\tfocusNode: domSelection.focusNode,\n\t\t\t\t\tfocusOffset: domSelection.focusOffset\n\t\t\t\t};\n\t\t\t}, { priority: 'lowest' } );\n\n\t\t\tthis.listenTo( viewDocument, 'keyup', ( evt, data ) => {\n\t\t\t\tif ( domSelectionAfterDeletion ) {\n\t\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\t\tdomSelection.collapse( domSelectionAfterDeletion.anchorNode, domSelectionAfterDeletion.anchorOffset );\n\t\t\t\t\tdomSelection.extend( domSelectionAfterDeletion.focusNode, domSelectionAfterDeletion.focusOffset );\n\n\t\t\t\t\tdomSelectionAfterDeletion = null;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.editor.plugins.has( 'UndoEditing' ) ) {\n\t\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t\tif ( this._undoOnBackspace && data.direction == 'backward' && data.sequence == 1 && data.unit == 'codePoint' ) {\n\t\t\t\t\tthis._undoOnBackspace = false;\n\n\t\t\t\t\teditor.execute( 'undo' );\n\n\t\t\t\t\tdata.preventDefault();\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}, { context: '$capture' } );\n\n\t\t\tthis.listenTo( modelDocument, 'change', () => {\n\t\t\t\tthis._undoOnBackspace = false;\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * If the next user action after calling this method is pressing backspace, it would undo the last change.\n\t *\n\t * Requires {@link module:undo/undoediting~UndoEditing} plugin. If not loaded, does nothing.\n\t */\n\trequestUndoOnBackspace() {\n\t\tif ( this.editor.plugins.has( 'UndoEditing' ) ) {\n\t\t\tthis._undoOnBackspace = true;\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}