{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/uid\n */\n// A hash table of hex numbers to avoid using toString() in uid() which is costly.\n// [ '00', '01', '02', ..., 'fe', 'ff' ]\nconst HEX_NUMBERS = new Array(256).fill('').map((_, index) => ('0' + index.toString(16)).slice(-2));\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns {String} An unique id string.\n */\nexport default function uid() {\n  // Let's create some positive random 32bit integers first.\n  //\n  // 1. Math.random() is a float between 0 and 1.\n  // 2. 0x100000000 is 2^32 = 4294967296.\n  // 3. >>> 0 enforces integer (in JS all numbers are floating point).\n  //\n  // For instance:\n  //\t\tMath.random() * 0x100000000 = 3366450031.853859\n  // but\n  //\t\tMath.random() * 0x100000000 >>> 0 = 3366450031.\n  const r1 = Math.random() * 0x100000000 >>> 0;\n  const r2 = Math.random() * 0x100000000 >>> 0;\n  const r3 = Math.random() * 0x100000000 >>> 0;\n  const r4 = Math.random() * 0x100000000 >>> 0;\n  // Make sure that id does not start with number.\n  return 'e' + HEX_NUMBERS[r1 >> 0 & 0xFF] + HEX_NUMBERS[r1 >> 8 & 0xFF] + HEX_NUMBERS[r1 >> 16 & 0xFF] + HEX_NUMBERS[r1 >> 24 & 0xFF] + HEX_NUMBERS[r2 >> 0 & 0xFF] + HEX_NUMBERS[r2 >> 8 & 0xFF] + HEX_NUMBERS[r2 >> 16 & 0xFF] + HEX_NUMBERS[r2 >> 24 & 0xFF] + HEX_NUMBERS[r3 >> 0 & 0xFF] + HEX_NUMBERS[r3 >> 8 & 0xFF] + HEX_NUMBERS[r3 >> 16 & 0xFF] + HEX_NUMBERS[r3 >> 24 & 0xFF] + HEX_NUMBERS[r4 >> 0 & 0xFF] + HEX_NUMBERS[r4 >> 8 & 0xFF] + HEX_NUMBERS[r4 >> 16 & 0xFF] + HEX_NUMBERS[r4 >> 24 & 0xFF];\n}","map":{"version":3,"names":["HEX_NUMBERS","Array","fill","map","_","index","toString","slice","uid","r1","Math","random","r2","r3","r4"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/uid.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/uid\n */\n// A hash table of hex numbers to avoid using toString() in uid() which is costly.\n// [ '00', '01', '02', ..., 'fe', 'ff' ]\nconst HEX_NUMBERS = new Array(256).fill('')\n    .map((_, index) => ('0' + (index).toString(16)).slice(-2));\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns {String} An unique id string.\n */\nexport default function uid() {\n    // Let's create some positive random 32bit integers first.\n    //\n    // 1. Math.random() is a float between 0 and 1.\n    // 2. 0x100000000 is 2^32 = 4294967296.\n    // 3. >>> 0 enforces integer (in JS all numbers are floating point).\n    //\n    // For instance:\n    //\t\tMath.random() * 0x100000000 = 3366450031.853859\n    // but\n    //\t\tMath.random() * 0x100000000 >>> 0 = 3366450031.\n    const r1 = Math.random() * 0x100000000 >>> 0;\n    const r2 = Math.random() * 0x100000000 >>> 0;\n    const r3 = Math.random() * 0x100000000 >>> 0;\n    const r4 = Math.random() * 0x100000000 >>> 0;\n    // Make sure that id does not start with number.\n    return 'e' +\n        HEX_NUMBERS[r1 >> 0 & 0xFF] +\n        HEX_NUMBERS[r1 >> 8 & 0xFF] +\n        HEX_NUMBERS[r1 >> 16 & 0xFF] +\n        HEX_NUMBERS[r1 >> 24 & 0xFF] +\n        HEX_NUMBERS[r2 >> 0 & 0xFF] +\n        HEX_NUMBERS[r2 >> 8 & 0xFF] +\n        HEX_NUMBERS[r2 >> 16 & 0xFF] +\n        HEX_NUMBERS[r2 >> 24 & 0xFF] +\n        HEX_NUMBERS[r3 >> 0 & 0xFF] +\n        HEX_NUMBERS[r3 >> 8 & 0xFF] +\n        HEX_NUMBERS[r3 >> 16 & 0xFF] +\n        HEX_NUMBERS[r3 >> 24 & 0xFF] +\n        HEX_NUMBERS[r4 >> 0 & 0xFF] +\n        HEX_NUMBERS[r4 >> 8 & 0xFF] +\n        HEX_NUMBERS[r4 >> 16 & 0xFF] +\n        HEX_NUMBERS[r4 >> 24 & 0xFF];\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,GAAG,IAAIC,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CACtCC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK,CAAC,GAAG,GAAIA,KAAK,CAAEC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,GAAG,GAAG;EAC1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,EAAE,GAAGC,IAAI,CAACC,MAAM,EAAE,GAAG,WAAW,KAAK,CAAC;EAC5C,MAAMC,EAAE,GAAGF,IAAI,CAACC,MAAM,EAAE,GAAG,WAAW,KAAK,CAAC;EAC5C,MAAME,EAAE,GAAGH,IAAI,CAACC,MAAM,EAAE,GAAG,WAAW,KAAK,CAAC;EAC5C,MAAMG,EAAE,GAAGJ,IAAI,CAACC,MAAM,EAAE,GAAG,WAAW,KAAK,CAAC;EAC5C;EACA,OAAO,GAAG,GACNX,WAAW,CAACS,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAC3BT,WAAW,CAACS,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAC3BT,WAAW,CAACS,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GAC5BT,WAAW,CAACS,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GAC5BT,WAAW,CAACY,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAC3BZ,WAAW,CAACY,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAC3BZ,WAAW,CAACY,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GAC5BZ,WAAW,CAACY,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GAC5BZ,WAAW,CAACa,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAC3Bb,WAAW,CAACa,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAC3Bb,WAAW,CAACa,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GAC5Bb,WAAW,CAACa,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GAC5Bb,WAAW,CAACc,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAC3Bd,WAAW,CAACc,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAC3Bd,WAAW,CAACc,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GAC5Bd,WAAW,CAACc,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;AACpC"},"metadata":{},"sourceType":"module"}