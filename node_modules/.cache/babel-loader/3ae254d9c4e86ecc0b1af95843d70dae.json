{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/text\n */\nimport Node from './node';\n/**\n * Tree view text node.\n *\n * The constructor of this class should not be used directly. To create a new text node instance\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Text extends Node {\n  /**\n   * Creates a tree view text node.\n   *\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this text node belongs.\n   * @param {String} data The text's data.\n   */\n  constructor(document, data) {\n    super(document);\n    /**\n     * The text content.\n     *\n     * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n     *\n     * @protected\n     * @member {String} module:engine/view/text~Text#_textData\n     */\n    this._textData = data;\n  }\n  /**\n   * The text content.\n   *\n   * @readonly\n   * @type {String}\n   */\n  get data() {\n    return this._textData;\n  }\n  /**\n   * The `_data` property is controlled by a getter and a setter.\n   *\n   * The getter is required when using the addition assignment operator on protected property:\n   *\n   *\t\tconst foo = downcastWriter.createText( 'foo' );\n   *\t\tconst bar = downcastWriter.createText( 'bar' );\n   *\n   *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n   *\t\tconsole.log( foo.data ); // prints: 'foobar'\n   *\n   * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n   *\n   * The setter sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n   *\n   * @protected\n   * @type {String}\n   */\n  get _data() {\n    return this.data;\n  }\n  set _data(data) {\n    this._fireChange('text', this);\n    this._textData = data;\n  }\n  /**\n   * Checks if this text node is similar to other text node.\n   * Both nodes should have the same data to be considered as similar.\n   *\n   * @param {module:engine/view/node~Node} otherNode Node to check if it is same as this node.\n   * @returns {Boolean}\n   */\n  isSimilar(otherNode) {\n    if (!(otherNode instanceof Text)) {\n      return false;\n    }\n    return this === otherNode || this.data === otherNode.data;\n  }\n  /**\n   * Clones this node.\n   *\n   * @protected\n   * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n   */\n  _clone() {\n    return new Text(this.document, this.data);\n  }\n}\n/**\n * Checks whether this object is of the given type.\n *\n *\t\ttext.is( '$text' ); // -> true\n *\t\ttext.is( 'node' ); // -> true\n *\t\ttext.is( 'view:$text' ); // -> true\n *\t\ttext.is( 'view:node' ); // -> true\n *\n *\t\ttext.is( 'model:$text' ); // -> false\n *\t\ttext.is( 'element' ); // -> false\n *\t\ttext.is( 'range' ); // -> false\n *\n * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n *\n * **Note:** Until version 20.0.0 this method wasn't accepting `'$text'` type. The legacy `'text'` type is still\n * accepted for backward compatibility.\n *\n * @param {String} type Type to check.\n * @returns {Boolean}\n */\nText.prototype.is = function (type) {\n  return type === '$text' || type === 'view:$text' ||\n  // This are legacy values kept for backward compatibility.\n  type === 'text' || type === 'view:text' ||\n  // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n  type === 'node' || type === 'view:node';\n};","map":{"version":3,"names":["Node","Text","constructor","document","data","_textData","_data","_fireChange","isSimilar","otherNode","_clone","prototype","is","type"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/text\n */\nimport Node from './node';\n/**\n * Tree view text node.\n *\n * The constructor of this class should not be used directly. To create a new text node instance\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Text extends Node {\n    /**\n     * Creates a tree view text node.\n     *\n     * @protected\n     * @param {module:engine/view/document~Document} document The document instance to which this text node belongs.\n     * @param {String} data The text's data.\n     */\n    constructor(document, data) {\n        super(document);\n        /**\n         * The text content.\n         *\n         * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n         *\n         * @protected\n         * @member {String} module:engine/view/text~Text#_textData\n         */\n        this._textData = data;\n    }\n    /**\n     * The text content.\n     *\n     * @readonly\n     * @type {String}\n     */\n    get data() {\n        return this._textData;\n    }\n    /**\n     * The `_data` property is controlled by a getter and a setter.\n     *\n     * The getter is required when using the addition assignment operator on protected property:\n     *\n     *\t\tconst foo = downcastWriter.createText( 'foo' );\n     *\t\tconst bar = downcastWriter.createText( 'bar' );\n     *\n     *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n     *\t\tconsole.log( foo.data ); // prints: 'foobar'\n     *\n     * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n     *\n     * The setter sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n     *\n     * @protected\n     * @type {String}\n     */\n    get _data() {\n        return this.data;\n    }\n    set _data(data) {\n        this._fireChange('text', this);\n        this._textData = data;\n    }\n    /**\n     * Checks if this text node is similar to other text node.\n     * Both nodes should have the same data to be considered as similar.\n     *\n     * @param {module:engine/view/node~Node} otherNode Node to check if it is same as this node.\n     * @returns {Boolean}\n     */\n    isSimilar(otherNode) {\n        if (!(otherNode instanceof Text)) {\n            return false;\n        }\n        return this === otherNode || this.data === otherNode.data;\n    }\n    /**\n     * Clones this node.\n     *\n     * @protected\n     * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n     */\n    _clone() {\n        return new Text(this.document, this.data);\n    }\n}\n/**\n * Checks whether this object is of the given type.\n *\n *\t\ttext.is( '$text' ); // -> true\n *\t\ttext.is( 'node' ); // -> true\n *\t\ttext.is( 'view:$text' ); // -> true\n *\t\ttext.is( 'view:node' ); // -> true\n *\n *\t\ttext.is( 'model:$text' ); // -> false\n *\t\ttext.is( 'element' ); // -> false\n *\t\ttext.is( 'range' ); // -> false\n *\n * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n *\n * **Note:** Until version 20.0.0 this method wasn't accepting `'$text'` type. The legacy `'text'` type is still\n * accepted for backward compatibility.\n *\n * @param {String} type Type to check.\n * @returns {Boolean}\n */\nText.prototype.is = function (type) {\n    return type === '$text' || type === 'view:$text' ||\n        // This are legacy values kept for backward compatibility.\n        type === 'text' || type === 'view:text' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'node' || type === 'view:node';\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,IAAI,SAASD,IAAI,CAAC;EACnC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,WAAW,CAACC,QAAQ,EAAEC,IAAI,EAAE;IACxB,KAAK,CAACD,QAAQ,CAAC;IACf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACE,SAAS,GAAGD,IAAI;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIA,IAAI,GAAG;IACP,OAAO,IAAI,CAACC,SAAS;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,KAAK,GAAG;IACR,OAAO,IAAI,CAACF,IAAI;EACpB;EACA,IAAIE,KAAK,CAACF,IAAI,EAAE;IACZ,IAAI,CAACG,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC;IAC9B,IAAI,CAACF,SAAS,GAAGD,IAAI;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACII,SAAS,CAACC,SAAS,EAAE;IACjB,IAAI,EAAEA,SAAS,YAAYR,IAAI,CAAC,EAAE;MAC9B,OAAO,KAAK;IAChB;IACA,OAAO,IAAI,KAAKQ,SAAS,IAAI,IAAI,CAACL,IAAI,KAAKK,SAAS,CAACL,IAAI;EAC7D;EACA;AACJ;AACA;AACA;AACA;AACA;EACIM,MAAM,GAAG;IACL,OAAO,IAAIT,IAAI,CAAC,IAAI,CAACE,QAAQ,EAAE,IAAI,CAACC,IAAI,CAAC;EAC7C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,IAAI,CAACU,SAAS,CAACC,EAAE,GAAG,UAAUC,IAAI,EAAE;EAChC,OAAOA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,YAAY;EAC5C;EACAA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,WAAW;EACvC;EACAA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,WAAW;AAC/C,CAAC"},"metadata":{},"sourceType":"module"}