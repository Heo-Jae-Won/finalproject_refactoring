{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable new-cap */\n/**\n * @module engine/model/liverange\n */\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n/**\n * `LiveRange` is a type of {@link module:engine/model/range~Range Range}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Be very careful when dealing with `LiveRange`. Each `LiveRange` instance bind events that might\n * have to be unbound. Use {@link module:engine/model/liverange~LiveRange#detach detach} whenever you don't need `LiveRange` anymore.\n */\nexport default class LiveRange extends EmitterMixin(Range) {\n  /**\n   * Creates a live range.\n   *\n   * @see module:engine/model/range~Range\n   */\n  constructor(start, end) {\n    super(start, end);\n    bindWithDocument.call(this);\n  }\n  /**\n   * Unbinds all events previously bound by `LiveRange`. Use it whenever you don't need `LiveRange` instance\n   * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n   * referring to it).\n   */\n  detach() {\n    this.stopListening();\n  }\n  /**\n   * Creates a {@link module:engine/model/range~Range range instance} that is equal to this live range.\n   *\n   * @returns {module:engine/model/range~Range}\n   */\n  toRange() {\n    return new Range(this.start, this.end);\n  }\n  /**\n   * Creates a `LiveRange` instance that is equal to the given range.\n   *\n   * @param {module:engine/model/range~Range} range\n   * @returns {module:engine/model/liverange~LiveRange}\n   */\n  static fromRange(range) {\n    return new LiveRange(range.start, range.end);\n  }\n}\n/**\n * Checks whether this object is of the given.\n *\n *\t\tliveRange.is( 'range' ); // -> true\n *\t\tliveRange.is( 'model:range' ); // -> true\n *\t\tliveRange.is( 'liveRange' ); // -> true\n *\t\tliveRange.is( 'model:liveRange' ); // -> true\n *\n *\t\tliveRange.is( 'view:range' ); // -> false\n *\t\tliveRange.is( 'documentSelection' ); // -> false\n *\n * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n *\n * @param {String} type\n * @returns {Boolean}\n */\nLiveRange.prototype.is = function (type) {\n  return type === 'liveRange' || type === 'model:liveRange' ||\n  // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n  type == 'range' || type === 'model:range';\n};\n// Binds this `LiveRange` to the {@link module:engine/model/document~Document document}\n// that owns this range's {@link module:engine/model/range~Range#root root}.\n//\n// @private\nfunction bindWithDocument() {\n  this.listenTo(this.root.document.model, 'applyOperation', (event, args) => {\n    const operation = args[0];\n    if (!operation.isDocumentOperation) {\n      return;\n    }\n    transform.call(this, operation);\n  }, {\n    priority: 'low'\n  });\n}\n// Updates this range accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform(operation) {\n  // Transform the range by the operation. Join the result ranges if needed.\n  const ranges = this.getTransformedByOperation(operation);\n  const result = Range._createFromRanges(ranges);\n  const boundariesChanged = !result.isEqual(this);\n  const contentChanged = doesOperationChangeRangeContent(this, operation);\n  let deletionPosition = null;\n  if (boundariesChanged) {\n    // If range boundaries have changed, fire `change:range` event.\n    //\n    if (result.root.rootName == '$graveyard') {\n      // If the range was moved to the graveyard root, set `deletionPosition`.\n      if (operation.type == 'remove') {\n        deletionPosition = operation.sourcePosition;\n      } else {\n        // Merge operation.\n        deletionPosition = operation.deletionPosition;\n      }\n    }\n    const oldRange = this.toRange();\n    this.start = result.start;\n    this.end = result.end;\n    this.fire('change:range', oldRange, {\n      deletionPosition\n    });\n  } else if (contentChanged) {\n    // If range boundaries have not changed, but there was change inside the range, fire `change:content` event.\n    this.fire('change:content', this.toRange(), {\n      deletionPosition\n    });\n  }\n}\n// Checks whether given operation changes something inside the range (even if it does not change boundaries).\n//\n// @private\n// @param {module:engine/model/range~Range} range Range to check.\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n// @returns {Boolean}\nfunction doesOperationChangeRangeContent(range, operation) {\n  switch (operation.type) {\n    case 'insert':\n      return range.containsPosition(operation.position);\n    case 'move':\n    case 'remove':\n    case 'reinsert':\n    case 'merge':\n      return range.containsPosition(operation.sourcePosition) || range.start.isEqual(operation.sourcePosition) || range.containsPosition(operation.targetPosition);\n    case 'split':\n      return range.containsPosition(operation.splitPosition) || range.containsPosition(operation.insertionPosition);\n  }\n  return false;\n}","map":{"version":3,"names":["Range","EmitterMixin","LiveRange","constructor","start","end","bindWithDocument","call","detach","stopListening","toRange","fromRange","range","prototype","is","type","listenTo","root","document","model","event","args","operation","isDocumentOperation","transform","priority","ranges","getTransformedByOperation","result","_createFromRanges","boundariesChanged","isEqual","contentChanged","doesOperationChangeRangeContent","deletionPosition","rootName","sourcePosition","oldRange","fire","containsPosition","position","targetPosition","splitPosition","insertionPosition"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/model/liverange.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable new-cap */\n/**\n * @module engine/model/liverange\n */\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n/**\n * `LiveRange` is a type of {@link module:engine/model/range~Range Range}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Be very careful when dealing with `LiveRange`. Each `LiveRange` instance bind events that might\n * have to be unbound. Use {@link module:engine/model/liverange~LiveRange#detach detach} whenever you don't need `LiveRange` anymore.\n */\nexport default class LiveRange extends EmitterMixin(Range) {\n    /**\n     * Creates a live range.\n     *\n     * @see module:engine/model/range~Range\n     */\n    constructor(start, end) {\n        super(start, end);\n        bindWithDocument.call(this);\n    }\n    /**\n     * Unbinds all events previously bound by `LiveRange`. Use it whenever you don't need `LiveRange` instance\n     * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n     * referring to it).\n     */\n    detach() {\n        this.stopListening();\n    }\n    /**\n     * Creates a {@link module:engine/model/range~Range range instance} that is equal to this live range.\n     *\n     * @returns {module:engine/model/range~Range}\n     */\n    toRange() {\n        return new Range(this.start, this.end);\n    }\n    /**\n     * Creates a `LiveRange` instance that is equal to the given range.\n     *\n     * @param {module:engine/model/range~Range} range\n     * @returns {module:engine/model/liverange~LiveRange}\n     */\n    static fromRange(range) {\n        return new LiveRange(range.start, range.end);\n    }\n}\n/**\n * Checks whether this object is of the given.\n *\n *\t\tliveRange.is( 'range' ); // -> true\n *\t\tliveRange.is( 'model:range' ); // -> true\n *\t\tliveRange.is( 'liveRange' ); // -> true\n *\t\tliveRange.is( 'model:liveRange' ); // -> true\n *\n *\t\tliveRange.is( 'view:range' ); // -> false\n *\t\tliveRange.is( 'documentSelection' ); // -> false\n *\n * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n *\n * @param {String} type\n * @returns {Boolean}\n */\nLiveRange.prototype.is = function (type) {\n    return type === 'liveRange' || type === 'model:liveRange' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type == 'range' || type === 'model:range';\n};\n// Binds this `LiveRange` to the {@link module:engine/model/document~Document document}\n// that owns this range's {@link module:engine/model/range~Range#root root}.\n//\n// @private\nfunction bindWithDocument() {\n    this.listenTo(this.root.document.model, 'applyOperation', (event, args) => {\n        const operation = args[0];\n        if (!operation.isDocumentOperation) {\n            return;\n        }\n        transform.call(this, operation);\n    }, { priority: 'low' });\n}\n// Updates this range accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform(operation) {\n    // Transform the range by the operation. Join the result ranges if needed.\n    const ranges = this.getTransformedByOperation(operation);\n    const result = Range._createFromRanges(ranges);\n    const boundariesChanged = !result.isEqual(this);\n    const contentChanged = doesOperationChangeRangeContent(this, operation);\n    let deletionPosition = null;\n    if (boundariesChanged) {\n        // If range boundaries have changed, fire `change:range` event.\n        //\n        if (result.root.rootName == '$graveyard') {\n            // If the range was moved to the graveyard root, set `deletionPosition`.\n            if (operation.type == 'remove') {\n                deletionPosition = operation.sourcePosition;\n            }\n            else {\n                // Merge operation.\n                deletionPosition = operation.deletionPosition;\n            }\n        }\n        const oldRange = this.toRange();\n        this.start = result.start;\n        this.end = result.end;\n        this.fire('change:range', oldRange, { deletionPosition });\n    }\n    else if (contentChanged) {\n        // If range boundaries have not changed, but there was change inside the range, fire `change:content` event.\n        this.fire('change:content', this.toRange(), { deletionPosition });\n    }\n}\n// Checks whether given operation changes something inside the range (even if it does not change boundaries).\n//\n// @private\n// @param {module:engine/model/range~Range} range Range to check.\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n// @returns {Boolean}\nfunction doesOperationChangeRangeContent(range, operation) {\n    switch (operation.type) {\n        case 'insert':\n            return range.containsPosition(operation.position);\n        case 'move':\n        case 'remove':\n        case 'reinsert':\n        case 'merge':\n            return range.containsPosition(operation.sourcePosition) ||\n                range.start.isEqual(operation.sourcePosition) ||\n                range.containsPosition(operation.targetPosition);\n        case 'split':\n            return range.containsPosition(operation.splitPosition) || range.containsPosition(operation.insertionPosition);\n    }\n    return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}