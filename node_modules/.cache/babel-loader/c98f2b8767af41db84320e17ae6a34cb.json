{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/difftochanges\n */\n/**\n * Creates a set of changes which need to be applied to the input in order to transform\n * it into the output. This function can be used with strings or arrays.\n *\n *\t\tconst input = Array.from( 'abc' );\n *\t\tconst output = Array.from( 'xaby' );\n *\t\tconst changes = diffToChanges( diff( input, output ), output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput.splice( change.index, 0, ...change.values );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput.splice( change.index, change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\tinput.join( '' ) == output.join( '' ); // -> true\n *\n * @param {Array.<module:utils/diff~DiffResult>} diff Result of {@link module:utils/diff~diff}.\n * @param {String|Array} output The string or array which was passed as diff's output.\n * @returns {Array.<module:utils/difftochanges~Change>} Set of changes (insert or delete) which need to be applied to the input\n * in order to transform it into the output.\n */\nexport default function diffToChanges(diff, output) {\n  const changes = [];\n  let index = 0;\n  let lastOperation = null;\n  diff.forEach(change => {\n    if (change == 'equal') {\n      pushLast();\n      index++;\n    } else if (change == 'insert') {\n      if (lastOperation && lastOperation.type == 'insert') {\n        lastOperation.values.push(output[index]);\n      } else {\n        pushLast();\n        lastOperation = {\n          type: 'insert',\n          index,\n          values: [output[index]]\n        };\n      }\n      index++;\n    } else /* if ( change == 'delete' ) */{\n        if (lastOperation && lastOperation.type == 'delete') {\n          lastOperation.howMany++;\n        } else {\n          pushLast();\n          lastOperation = {\n            type: 'delete',\n            index,\n            howMany: 1\n          };\n        }\n      }\n  });\n  pushLast();\n  return changes;\n  function pushLast() {\n    if (lastOperation) {\n      changes.push(lastOperation);\n      lastOperation = null;\n    }\n  }\n}","map":{"version":3,"names":["diffToChanges","diff","output","changes","index","lastOperation","forEach","change","pushLast","type","values","push","howMany"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/difftochanges.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/difftochanges\n */\n/**\n * Creates a set of changes which need to be applied to the input in order to transform\n * it into the output. This function can be used with strings or arrays.\n *\n *\t\tconst input = Array.from( 'abc' );\n *\t\tconst output = Array.from( 'xaby' );\n *\t\tconst changes = diffToChanges( diff( input, output ), output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput.splice( change.index, 0, ...change.values );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput.splice( change.index, change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\tinput.join( '' ) == output.join( '' ); // -> true\n *\n * @param {Array.<module:utils/diff~DiffResult>} diff Result of {@link module:utils/diff~diff}.\n * @param {String|Array} output The string or array which was passed as diff's output.\n * @returns {Array.<module:utils/difftochanges~Change>} Set of changes (insert or delete) which need to be applied to the input\n * in order to transform it into the output.\n */\nexport default function diffToChanges(diff, output) {\n    const changes = [];\n    let index = 0;\n    let lastOperation = null;\n    diff.forEach(change => {\n        if (change == 'equal') {\n            pushLast();\n            index++;\n        }\n        else if (change == 'insert') {\n            if (lastOperation && lastOperation.type == 'insert') {\n                lastOperation.values.push(output[index]);\n            }\n            else {\n                pushLast();\n                lastOperation = {\n                    type: 'insert',\n                    index,\n                    values: [output[index]]\n                };\n            }\n            index++;\n        }\n        else /* if ( change == 'delete' ) */ {\n            if (lastOperation && lastOperation.type == 'delete') {\n                lastOperation.howMany++;\n            }\n            else {\n                pushLast();\n                lastOperation = {\n                    type: 'delete',\n                    index,\n                    howMany: 1\n                };\n            }\n        }\n    });\n    pushLast();\n    return changes;\n    function pushLast() {\n        if (lastOperation) {\n            changes.push(lastOperation);\n            lastOperation = null;\n        }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,aAAa,CAACC,IAAI,EAAEC,MAAM,EAAE;EAChD,MAAMC,OAAO,GAAG,EAAE;EAClB,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,aAAa,GAAG,IAAI;EACxBJ,IAAI,CAACK,OAAO,CAACC,MAAM,IAAI;IACnB,IAAIA,MAAM,IAAI,OAAO,EAAE;MACnBC,QAAQ,EAAE;MACVJ,KAAK,EAAE;IACX,CAAC,MACI,IAAIG,MAAM,IAAI,QAAQ,EAAE;MACzB,IAAIF,aAAa,IAAIA,aAAa,CAACI,IAAI,IAAI,QAAQ,EAAE;QACjDJ,aAAa,CAACK,MAAM,CAACC,IAAI,CAACT,MAAM,CAACE,KAAK,CAAC,CAAC;MAC5C,CAAC,MACI;QACDI,QAAQ,EAAE;QACVH,aAAa,GAAG;UACZI,IAAI,EAAE,QAAQ;UACdL,KAAK;UACLM,MAAM,EAAE,CAACR,MAAM,CAACE,KAAK,CAAC;QAC1B,CAAC;MACL;MACAA,KAAK,EAAE;IACX,CAAC,MACI,+BAAgC;QACjC,IAAIC,aAAa,IAAIA,aAAa,CAACI,IAAI,IAAI,QAAQ,EAAE;UACjDJ,aAAa,CAACO,OAAO,EAAE;QAC3B,CAAC,MACI;UACDJ,QAAQ,EAAE;UACVH,aAAa,GAAG;YACZI,IAAI,EAAE,QAAQ;YACdL,KAAK;YACLQ,OAAO,EAAE;UACb,CAAC;QACL;MACJ;EACJ,CAAC,CAAC;EACFJ,QAAQ,EAAE;EACV,OAAOL,OAAO;EACd,SAASK,QAAQ,GAAG;IAChB,IAAIH,aAAa,EAAE;MACfF,OAAO,CAACQ,IAAI,CAACN,aAAa,CAAC;MAC3BA,aAAa,GAAG,IAAI;IACxB;EACJ;AACJ"},"metadata":{},"sourceType":"module"}