{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable new-cap */\n/**\n * @module engine/view/editableelement\n */\nimport ContainerElement from './containerelement';\nimport { default as ObservableMixin } from '@ckeditor/ckeditor5-utils/src/observablemixin';\n/**\n * Editable element which can be a {@link module:engine/view/rooteditableelement~RootEditableElement root}\n * or nested editable area in the editor.\n *\n * Editable is automatically read-only when its {@link module:engine/view/document~Document Document} is read-only.\n *\n * The constructor of this class shouldn't be used directly. To create new `EditableElement` use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`} method.\n *\n * @extends module:engine/view/containerelement~ContainerElement\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditableElement extends ObservableMixin(ContainerElement) {\n  /**\n   * Creates an editable element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createEditableElement\n   * @protected\n   */\n  constructor() {\n    super(...arguments);\n    const document = arguments.length <= 0 ? undefined : arguments[0];\n    /**\n     * Whether the editable is in read-write or read-only mode.\n     *\n     * @observable\n     * @member {Boolean} module:engine/view/editableelement~EditableElement#isReadOnly\n     */\n    this.set('isReadOnly', false);\n    /**\n     * Whether the editable is focused.\n     *\n     * This property updates when {@link module:engine/view/document~Document#isFocused document.isFocused} or view\n     * selection is changed.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} module:engine/view/editableelement~EditableElement#isFocused\n     */\n    this.set('isFocused', false);\n    this.bind('isReadOnly').to(document);\n    this.bind('isFocused').to(document, 'isFocused', isFocused => isFocused && document.selection.editableElement == this);\n    // Update focus state based on selection changes.\n    this.listenTo(document.selection, 'change', () => {\n      this.isFocused = document.isFocused && document.selection.editableElement == this;\n    });\n  }\n  destroy() {\n    this.stopListening();\n  }\n}\n/**\n * Checks whether this object is of the given.\n *\n *\t\teditableElement.is( 'editableElement' ); // -> true\n *\t\teditableElement.is( 'element' ); // -> true\n *\t\teditableElement.is( 'node' ); // -> true\n *\t\teditableElement.is( 'view:editableElement' ); // -> true\n *\t\teditableElement.is( 'view:element' ); // -> true\n *\t\teditableElement.is( 'view:node' ); // -> true\n *\n *\t\teditableElement.is( 'model:element' ); // -> false\n *\t\teditableElement.is( 'documentFragment' ); // -> false\n *\n * Assuming that the object being checked is an editbale element, you can also check its\n * {@link module:engine/view/editableelement~EditableElement#name name}:\n *\n *\t\teditableElement.is( 'element', 'div' ); // -> true if this is a div element\n *\t\teditableElement.is( 'editableElement', 'div' ); // -> same as above\n *\t\ttext.is( 'element', 'div' ); -> false\n *\n * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n *\n * @param {String} type Type to check.\n * @param {String} [name] Element name.\n * @returns {Boolean}\n */\nEditableElement.prototype.is = function (type, name) {\n  if (!name) {\n    return type === 'editableElement' || type === 'view:editableElement' ||\n    // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n    type === 'containerElement' || type === 'view:containerElement' || type === 'element' || type === 'view:element' || type === 'node' || type === 'view:node';\n  } else {\n    return name === this.name && (type === 'editableElement' || type === 'view:editableElement' ||\n    // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n    type === 'containerElement' || type === 'view:containerElement' || type === 'element' || type === 'view:element');\n  }\n};","map":{"version":3,"names":["ContainerElement","default","ObservableMixin","EditableElement","constructor","document","set","bind","to","isFocused","selection","editableElement","listenTo","destroy","stopListening","prototype","is","type","name"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/editableelement.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable new-cap */\n/**\n * @module engine/view/editableelement\n */\nimport ContainerElement from './containerelement';\nimport { default as ObservableMixin } from '@ckeditor/ckeditor5-utils/src/observablemixin';\n/**\n * Editable element which can be a {@link module:engine/view/rooteditableelement~RootEditableElement root}\n * or nested editable area in the editor.\n *\n * Editable is automatically read-only when its {@link module:engine/view/document~Document Document} is read-only.\n *\n * The constructor of this class shouldn't be used directly. To create new `EditableElement` use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`} method.\n *\n * @extends module:engine/view/containerelement~ContainerElement\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditableElement extends ObservableMixin(ContainerElement) {\n    /**\n     * Creates an editable element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createEditableElement\n     * @protected\n     */\n    constructor(...args) {\n        super(...args);\n        const document = args[0];\n        /**\n         * Whether the editable is in read-write or read-only mode.\n         *\n         * @observable\n         * @member {Boolean} module:engine/view/editableelement~EditableElement#isReadOnly\n         */\n        this.set('isReadOnly', false);\n        /**\n         * Whether the editable is focused.\n         *\n         * This property updates when {@link module:engine/view/document~Document#isFocused document.isFocused} or view\n         * selection is changed.\n         *\n         * @readonly\n         * @observable\n         * @member {Boolean} module:engine/view/editableelement~EditableElement#isFocused\n         */\n        this.set('isFocused', false);\n        this.bind('isReadOnly').to(document);\n        this.bind('isFocused').to(document, 'isFocused', isFocused => isFocused && document.selection.editableElement == this);\n        // Update focus state based on selection changes.\n        this.listenTo(document.selection, 'change', () => {\n            this.isFocused = document.isFocused && document.selection.editableElement == this;\n        });\n    }\n    destroy() {\n        this.stopListening();\n    }\n}\n/**\n * Checks whether this object is of the given.\n *\n *\t\teditableElement.is( 'editableElement' ); // -> true\n *\t\teditableElement.is( 'element' ); // -> true\n *\t\teditableElement.is( 'node' ); // -> true\n *\t\teditableElement.is( 'view:editableElement' ); // -> true\n *\t\teditableElement.is( 'view:element' ); // -> true\n *\t\teditableElement.is( 'view:node' ); // -> true\n *\n *\t\teditableElement.is( 'model:element' ); // -> false\n *\t\teditableElement.is( 'documentFragment' ); // -> false\n *\n * Assuming that the object being checked is an editbale element, you can also check its\n * {@link module:engine/view/editableelement~EditableElement#name name}:\n *\n *\t\teditableElement.is( 'element', 'div' ); // -> true if this is a div element\n *\t\teditableElement.is( 'editableElement', 'div' ); // -> same as above\n *\t\ttext.is( 'element', 'div' ); -> false\n *\n * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n *\n * @param {String} type Type to check.\n * @param {String} [name] Element name.\n * @returns {Boolean}\n */\nEditableElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'editableElement' || type === 'view:editableElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'containerElement' || type === 'view:containerElement' ||\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'editableElement' || type === 'view:editableElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'containerElement' || type === 'view:containerElement' ||\n            type === 'element' || type === 'view:element');\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,gBAAgB,MAAM,oBAAoB;AACjD,SAASC,OAAO,IAAIC,eAAe,QAAQ,+CAA+C;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,eAAe,SAASD,eAAe,CAACF,gBAAgB,CAAC,CAAC;EAC3E;AACJ;AACA;AACA;AACA;AACA;EACII,WAAW,GAAU;IACjB,KAAK,CAAC,YAAO,CAAC;IACd,MAAMC,QAAQ,mDAAU;IACxB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC;IAC7B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACA,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC;IAC5B,IAAI,CAACC,IAAI,CAAC,YAAY,CAAC,CAACC,EAAE,CAACH,QAAQ,CAAC;IACpC,IAAI,CAACE,IAAI,CAAC,WAAW,CAAC,CAACC,EAAE,CAACH,QAAQ,EAAE,WAAW,EAAEI,SAAS,IAAIA,SAAS,IAAIJ,QAAQ,CAACK,SAAS,CAACC,eAAe,IAAI,IAAI,CAAC;IACtH;IACA,IAAI,CAACC,QAAQ,CAACP,QAAQ,CAACK,SAAS,EAAE,QAAQ,EAAE,MAAM;MAC9C,IAAI,CAACD,SAAS,GAAGJ,QAAQ,CAACI,SAAS,IAAIJ,QAAQ,CAACK,SAAS,CAACC,eAAe,IAAI,IAAI;IACrF,CAAC,CAAC;EACN;EACAE,OAAO,GAAG;IACN,IAAI,CAACC,aAAa,EAAE;EACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,eAAe,CAACY,SAAS,CAACC,EAAE,GAAG,UAAUC,IAAI,EAAEC,IAAI,EAAE;EACjD,IAAI,CAACA,IAAI,EAAE;IACP,OAAOD,IAAI,KAAK,iBAAiB,IAAIA,IAAI,KAAK,sBAAsB;IAChE;IACAA,IAAI,KAAK,kBAAkB,IAAIA,IAAI,KAAK,uBAAuB,IAC/DA,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,cAAc,IAC7CA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,WAAW;EAC/C,CAAC,MACI;IACD,OAAOC,IAAI,KAAK,IAAI,CAACA,IAAI,KAAKD,IAAI,KAAK,iBAAiB,IAAIA,IAAI,KAAK,sBAAsB;IACvF;IACAA,IAAI,KAAK,kBAAkB,IAAIA,IAAI,KAAK,uBAAuB,IAC/DA,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,cAAc,CAAC;EACtD;AACJ,CAAC"},"metadata":{},"sourceType":"module"}