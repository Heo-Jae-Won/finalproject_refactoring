{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/placeholder\n */\nimport '../../theme/placeholder.css';\n// Each document stores information about its placeholder elements and check functions.\nconst documentPlaceholders = new WeakMap();\n/**\n * A helper that enables a placeholder on the provided view element (also updates its visibility).\n * The placeholder is a CSS pseudo–element (with a text content) attached to the element.\n *\n * To change the placeholder text, simply call this method again with new options.\n *\n * To disable the placeholder, use {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} helper.\n *\n * @param {Object} [options] Configuration options of the placeholder.\n * @param {module:engine/view/view~View} options.view Editing view instance.\n * @param {module:engine/view/element~Element} options.element Element that will gain a placeholder.\n * See `options.isDirectHost` to learn more.\n * @param {String} options.text Placeholder text.\n * @param {Boolean} [options.isDirectHost=true] If set `false`, the placeholder will not be enabled directly\n * in the passed `element` but in one of its children (selected automatically, i.e. a first empty child element).\n * Useful when attaching placeholders to elements that can host other elements (not just text), for instance,\n * editable root elements.\n * @param {Boolean} [options.keepOnFocus=false] If set `true`, the placeholder stay visible when the host element is focused.\n */\nexport function enablePlaceholder(options) {\n  const {\n    view,\n    element,\n    text,\n    isDirectHost = true,\n    keepOnFocus = false\n  } = options;\n  const doc = view.document;\n  // Use a single a single post fixer per—document to update all placeholders.\n  if (!documentPlaceholders.has(doc)) {\n    documentPlaceholders.set(doc, new Map());\n    // If a post-fixer callback makes a change, it should return `true` so other post–fixers\n    // can re–evaluate the document again.\n    doc.registerPostFixer(writer => updateDocumentPlaceholders(doc, writer));\n  }\n  // Store information about the element placeholder under its document.\n  documentPlaceholders.get(doc).set(element, {\n    text,\n    isDirectHost,\n    keepOnFocus,\n    hostElement: isDirectHost ? element : null\n  });\n  // Update the placeholders right away.\n  view.change(writer => updateDocumentPlaceholders(doc, writer));\n}\n/**\n * Disables the placeholder functionality from a given element.\n *\n * See {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} to learn more.\n *\n * @param {module:engine/view/view~View} view\n * @param {module:engine/view/element~Element} element\n */\nexport function disablePlaceholder(view, element) {\n  const doc = element.document;\n  view.change(writer => {\n    if (!documentPlaceholders.has(doc)) {\n      return;\n    }\n    const placeholders = documentPlaceholders.get(doc);\n    const config = placeholders.get(element);\n    writer.removeAttribute('data-placeholder', config.hostElement);\n    hidePlaceholder(writer, config.hostElement);\n    placeholders.delete(element);\n  });\n}\n/**\n * Shows a placeholder in the provided element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * **Note**: This helper will blindly show the placeholder directly in the root editable element if\n * one is passed, which could result in a visual clash if the editable element has some children\n * (for instance, an empty paragraph). Use {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`}\n * in that case or make sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\nexport function showPlaceholder(writer, element) {\n  if (!element.hasClass('ck-placeholder')) {\n    writer.addClass('ck-placeholder', element);\n    return true;\n  }\n  return false;\n}\n/**\n * Hides a placeholder in the element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\nexport function hidePlaceholder(writer, element) {\n  if (element.hasClass('ck-placeholder')) {\n    writer.removeClass('ck-placeholder', element);\n    return true;\n  }\n  return false;\n}\n/**\n * Checks if a placeholder should be displayed in the element.\n *\n * **Note**: This helper will blindly check the possibility of showing a placeholder directly in the\n * root editable element if one is passed, which may not be the expected result. If an element can\n * host other elements (not just text), most likely one of its children should be checked instead\n * because it will be the final host for the placeholder. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} in that case or make\n * sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/element~Element} element Element that holds the placeholder.\n * @param {Boolean} keepOnFocus Focusing the element will keep the placeholder visible.\n * @returns {Boolean}\n */\nexport function needsPlaceholder(element, keepOnFocus) {\n  if (!element.isAttached()) {\n    return false;\n  }\n  // Anything but uiElement(s) counts as content.\n  const hasContent = Array.from(element.getChildren()).some(element => !element.is('uiElement'));\n  if (hasContent) {\n    return false;\n  }\n  // Skip the focus check and make the placeholder visible already regardless of document focus state.\n  if (keepOnFocus) {\n    return true;\n  }\n  const doc = element.document;\n  // If the document is blurred.\n  if (!doc.isFocused) {\n    return true;\n  }\n  const viewSelection = doc.selection;\n  const selectionAnchor = viewSelection.anchor;\n  // If document is focused and the element is empty but the selection is not anchored inside it.\n  return !!selectionAnchor && selectionAnchor.parent !== element;\n}\n// Updates all placeholders associated with a document in a post–fixer callback.\n//\n// @private\n// @param { module:engine/view/document~Document} doc\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {Boolean} True if any changes were made to the view document.\nfunction updateDocumentPlaceholders(doc, writer) {\n  const placeholders = documentPlaceholders.get(doc);\n  const directHostElements = [];\n  let wasViewModified = false;\n  // First set placeholders on the direct hosts.\n  for (const [element, config] of placeholders) {\n    if (config.isDirectHost) {\n      directHostElements.push(element);\n      if (updatePlaceholder(writer, element, config)) {\n        wasViewModified = true;\n      }\n    }\n  }\n  // Then set placeholders on the indirect hosts but only on those that does not already have an direct host placeholder.\n  for (const [element, config] of placeholders) {\n    if (config.isDirectHost) {\n      continue;\n    }\n    const hostElement = getChildPlaceholderHostSubstitute(element);\n    // When not a direct host, it could happen that there is no child element\n    // capable of displaying a placeholder.\n    if (!hostElement) {\n      continue;\n    }\n    // Don't override placeholder if the host element already has some direct placeholder.\n    if (directHostElements.includes(hostElement)) {\n      continue;\n    }\n    // Update the host element (used for setting and removing the placeholder).\n    config.hostElement = hostElement;\n    if (updatePlaceholder(writer, element, config)) {\n      wasViewModified = true;\n    }\n  }\n  return wasViewModified;\n}\n// Updates a single placeholder in a post–fixer callback.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/element~Element} element\n// @param {Object} config Configuration of the placeholder\n// @param {String} config.text\n// @param {Boolean} config.isDirectHost\n// @returns {Boolean} True if any changes were made to the view document.\nfunction updatePlaceholder(writer, element, config) {\n  const {\n    text,\n    isDirectHost,\n    hostElement\n  } = config;\n  let wasViewModified = false;\n  // This may be necessary when updating the placeholder text to something else.\n  if (hostElement.getAttribute('data-placeholder') !== text) {\n    writer.setAttribute('data-placeholder', text, hostElement);\n    wasViewModified = true;\n  }\n  // If the host element is not a direct host then placeholder is needed only when there is only one element.\n  const isOnlyChild = isDirectHost || element.childCount == 1;\n  if (isOnlyChild && needsPlaceholder(hostElement, config.keepOnFocus)) {\n    if (showPlaceholder(writer, hostElement)) {\n      wasViewModified = true;\n    }\n  } else if (hidePlaceholder(writer, hostElement)) {\n    wasViewModified = true;\n  }\n  return wasViewModified;\n}\n// Gets a child element capable of displaying a placeholder if a parent element can host more\n// than just text (for instance, when it is a root editable element). The child element\n// can then be used in other placeholder helpers as a substitute of its parent.\n//\n// @private\n// @param {module:engine/view/element~Element} parent\n// @returns {module:engine/view/element~Element|null}\nfunction getChildPlaceholderHostSubstitute(parent) {\n  if (parent.childCount) {\n    const firstChild = parent.getChild(0);\n    if (firstChild.is('element') && !firstChild.is('uiElement') && !firstChild.is('attributeElement')) {\n      return firstChild;\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["documentPlaceholders","WeakMap","enablePlaceholder","options","view","element","text","isDirectHost","keepOnFocus","doc","document","has","set","Map","registerPostFixer","writer","updateDocumentPlaceholders","get","hostElement","change","disablePlaceholder","placeholders","config","removeAttribute","hidePlaceholder","delete","showPlaceholder","hasClass","addClass","removeClass","needsPlaceholder","isAttached","hasContent","Array","from","getChildren","some","is","isFocused","viewSelection","selection","selectionAnchor","anchor","parent","directHostElements","wasViewModified","push","updatePlaceholder","getChildPlaceholderHostSubstitute","includes","getAttribute","setAttribute","isOnlyChild","childCount","firstChild","getChild"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/placeholder.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/placeholder\n */\nimport '../../theme/placeholder.css';\n// Each document stores information about its placeholder elements and check functions.\nconst documentPlaceholders = new WeakMap();\n/**\n * A helper that enables a placeholder on the provided view element (also updates its visibility).\n * The placeholder is a CSS pseudo–element (with a text content) attached to the element.\n *\n * To change the placeholder text, simply call this method again with new options.\n *\n * To disable the placeholder, use {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} helper.\n *\n * @param {Object} [options] Configuration options of the placeholder.\n * @param {module:engine/view/view~View} options.view Editing view instance.\n * @param {module:engine/view/element~Element} options.element Element that will gain a placeholder.\n * See `options.isDirectHost` to learn more.\n * @param {String} options.text Placeholder text.\n * @param {Boolean} [options.isDirectHost=true] If set `false`, the placeholder will not be enabled directly\n * in the passed `element` but in one of its children (selected automatically, i.e. a first empty child element).\n * Useful when attaching placeholders to elements that can host other elements (not just text), for instance,\n * editable root elements.\n * @param {Boolean} [options.keepOnFocus=false] If set `true`, the placeholder stay visible when the host element is focused.\n */\nexport function enablePlaceholder(options) {\n    const { view, element, text, isDirectHost = true, keepOnFocus = false } = options;\n    const doc = view.document;\n    // Use a single a single post fixer per—document to update all placeholders.\n    if (!documentPlaceholders.has(doc)) {\n        documentPlaceholders.set(doc, new Map());\n        // If a post-fixer callback makes a change, it should return `true` so other post–fixers\n        // can re–evaluate the document again.\n        doc.registerPostFixer(writer => updateDocumentPlaceholders(doc, writer));\n    }\n    // Store information about the element placeholder under its document.\n    documentPlaceholders.get(doc).set(element, {\n        text,\n        isDirectHost,\n        keepOnFocus,\n        hostElement: isDirectHost ? element : null\n    });\n    // Update the placeholders right away.\n    view.change(writer => updateDocumentPlaceholders(doc, writer));\n}\n/**\n * Disables the placeholder functionality from a given element.\n *\n * See {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} to learn more.\n *\n * @param {module:engine/view/view~View} view\n * @param {module:engine/view/element~Element} element\n */\nexport function disablePlaceholder(view, element) {\n    const doc = element.document;\n    view.change(writer => {\n        if (!documentPlaceholders.has(doc)) {\n            return;\n        }\n        const placeholders = documentPlaceholders.get(doc);\n        const config = placeholders.get(element);\n        writer.removeAttribute('data-placeholder', config.hostElement);\n        hidePlaceholder(writer, config.hostElement);\n        placeholders.delete(element);\n    });\n}\n/**\n * Shows a placeholder in the provided element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * **Note**: This helper will blindly show the placeholder directly in the root editable element if\n * one is passed, which could result in a visual clash if the editable element has some children\n * (for instance, an empty paragraph). Use {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`}\n * in that case or make sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\nexport function showPlaceholder(writer, element) {\n    if (!element.hasClass('ck-placeholder')) {\n        writer.addClass('ck-placeholder', element);\n        return true;\n    }\n    return false;\n}\n/**\n * Hides a placeholder in the element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\nexport function hidePlaceholder(writer, element) {\n    if (element.hasClass('ck-placeholder')) {\n        writer.removeClass('ck-placeholder', element);\n        return true;\n    }\n    return false;\n}\n/**\n * Checks if a placeholder should be displayed in the element.\n *\n * **Note**: This helper will blindly check the possibility of showing a placeholder directly in the\n * root editable element if one is passed, which may not be the expected result. If an element can\n * host other elements (not just text), most likely one of its children should be checked instead\n * because it will be the final host for the placeholder. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} in that case or make\n * sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/element~Element} element Element that holds the placeholder.\n * @param {Boolean} keepOnFocus Focusing the element will keep the placeholder visible.\n * @returns {Boolean}\n */\nexport function needsPlaceholder(element, keepOnFocus) {\n    if (!element.isAttached()) {\n        return false;\n    }\n    // Anything but uiElement(s) counts as content.\n    const hasContent = Array.from(element.getChildren())\n        .some(element => !element.is('uiElement'));\n    if (hasContent) {\n        return false;\n    }\n    // Skip the focus check and make the placeholder visible already regardless of document focus state.\n    if (keepOnFocus) {\n        return true;\n    }\n    const doc = element.document;\n    // If the document is blurred.\n    if (!doc.isFocused) {\n        return true;\n    }\n    const viewSelection = doc.selection;\n    const selectionAnchor = viewSelection.anchor;\n    // If document is focused and the element is empty but the selection is not anchored inside it.\n    return !!selectionAnchor && selectionAnchor.parent !== element;\n}\n// Updates all placeholders associated with a document in a post–fixer callback.\n//\n// @private\n// @param { module:engine/view/document~Document} doc\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {Boolean} True if any changes were made to the view document.\nfunction updateDocumentPlaceholders(doc, writer) {\n    const placeholders = documentPlaceholders.get(doc);\n    const directHostElements = [];\n    let wasViewModified = false;\n    // First set placeholders on the direct hosts.\n    for (const [element, config] of placeholders) {\n        if (config.isDirectHost) {\n            directHostElements.push(element);\n            if (updatePlaceholder(writer, element, config)) {\n                wasViewModified = true;\n            }\n        }\n    }\n    // Then set placeholders on the indirect hosts but only on those that does not already have an direct host placeholder.\n    for (const [element, config] of placeholders) {\n        if (config.isDirectHost) {\n            continue;\n        }\n        const hostElement = getChildPlaceholderHostSubstitute(element);\n        // When not a direct host, it could happen that there is no child element\n        // capable of displaying a placeholder.\n        if (!hostElement) {\n            continue;\n        }\n        // Don't override placeholder if the host element already has some direct placeholder.\n        if (directHostElements.includes(hostElement)) {\n            continue;\n        }\n        // Update the host element (used for setting and removing the placeholder).\n        config.hostElement = hostElement;\n        if (updatePlaceholder(writer, element, config)) {\n            wasViewModified = true;\n        }\n    }\n    return wasViewModified;\n}\n// Updates a single placeholder in a post–fixer callback.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/element~Element} element\n// @param {Object} config Configuration of the placeholder\n// @param {String} config.text\n// @param {Boolean} config.isDirectHost\n// @returns {Boolean} True if any changes were made to the view document.\nfunction updatePlaceholder(writer, element, config) {\n    const { text, isDirectHost, hostElement } = config;\n    let wasViewModified = false;\n    // This may be necessary when updating the placeholder text to something else.\n    if (hostElement.getAttribute('data-placeholder') !== text) {\n        writer.setAttribute('data-placeholder', text, hostElement);\n        wasViewModified = true;\n    }\n    // If the host element is not a direct host then placeholder is needed only when there is only one element.\n    const isOnlyChild = isDirectHost || element.childCount == 1;\n    if (isOnlyChild && needsPlaceholder(hostElement, config.keepOnFocus)) {\n        if (showPlaceholder(writer, hostElement)) {\n            wasViewModified = true;\n        }\n    }\n    else if (hidePlaceholder(writer, hostElement)) {\n        wasViewModified = true;\n    }\n    return wasViewModified;\n}\n// Gets a child element capable of displaying a placeholder if a parent element can host more\n// than just text (for instance, when it is a root editable element). The child element\n// can then be used in other placeholder helpers as a substitute of its parent.\n//\n// @private\n// @param {module:engine/view/element~Element} parent\n// @returns {module:engine/view/element~Element|null}\nfunction getChildPlaceholderHostSubstitute(parent) {\n    if (parent.childCount) {\n        const firstChild = parent.getChild(0);\n        if (firstChild.is('element') && !firstChild.is('uiElement') && !firstChild.is('attributeElement')) {\n            return firstChild;\n        }\n    }\n    return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}