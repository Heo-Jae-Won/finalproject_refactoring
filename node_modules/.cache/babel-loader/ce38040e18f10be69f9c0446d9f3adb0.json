{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/imageresizehandles\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { WidgetResize } from 'ckeditor5/src/widget';\nimport ImageLoadObserver from '../image/imageloadobserver';\nconst RESIZABLE_IMAGES_CSS_SELECTOR = 'figure.image.ck-widget > img,' + 'figure.image.ck-widget > picture > img,' + 'figure.image.ck-widget > a > img,' + 'figure.image.ck-widget > a > picture > img,' + 'span.image-inline.ck-widget > img,' + 'span.image-inline.ck-widget > picture > img';\nconst IMAGE_WIDGETS_CLASSES_MATCH_REGEXP = /(image|image-inline)/;\nconst RESIZED_IMAGE_CLASS = 'image_resized';\n\n/**\n * The image resize by handles feature.\n *\n * It adds the ability to resize each image using handles or manually by\n * {@link module:image/imageresize/imageresizebuttons~ImageResizeButtons} buttons.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageResizeHandles extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [WidgetResize];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ImageResizeHandles';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    const command = this.editor.commands.get('resizeImage');\n    this.bind('isEnabled').to(command);\n    this._setupResizerCreator();\n  }\n\n  /**\n   * Attaches the listeners responsible for creating a resizer for each image, except for images inside the HTML embed preview.\n   *\n   * @private\n   */\n  _setupResizerCreator() {\n    const editor = this.editor;\n    const editingView = editor.editing.view;\n    editingView.addObserver(ImageLoadObserver);\n    this.listenTo(editingView.document, 'imageLoaded', (evt, domEvent) => {\n      // The resizer must be attached only to images loaded by the `ImageInsert`, `ImageUpload` or `LinkImage` plugins.\n      if (!domEvent.target.matches(RESIZABLE_IMAGES_CSS_SELECTOR)) {\n        return;\n      }\n      const domConverter = editor.editing.view.domConverter;\n      const imageView = domConverter.domToView(domEvent.target);\n      const widgetView = imageView.findAncestor({\n        classes: IMAGE_WIDGETS_CLASSES_MATCH_REGEXP\n      });\n      let resizer = this.editor.plugins.get(WidgetResize).getResizerByViewElement(widgetView);\n      if (resizer) {\n        // There are rare cases when the image will be triggered multiple times for the same widget, e.g. when\n        // the image's source was changed after upload (https://github.com/ckeditor/ckeditor5/pull/8108#issuecomment-708302992).\n        resizer.redraw();\n        return;\n      }\n      const mapper = editor.editing.mapper;\n      const imageModel = mapper.toModelElement(widgetView);\n      resizer = editor.plugins.get(WidgetResize).attachTo({\n        unit: editor.config.get('image.resizeUnit'),\n        modelElement: imageModel,\n        viewElement: widgetView,\n        editor,\n        getHandleHost(domWidgetElement) {\n          return domWidgetElement.querySelector('img');\n        },\n        getResizeHost() {\n          // Return the model image element parent to avoid setting an inline element (<a>/<span>) as a resize host.\n          return domConverter.mapViewToDom(mapper.toViewElement(imageModel.parent));\n        },\n        // TODO consider other positions.\n        isCentered() {\n          const imageStyle = imageModel.getAttribute('imageStyle');\n          return !imageStyle || imageStyle == 'block' || imageStyle == 'alignCenter';\n        },\n        onCommit(newValue) {\n          // Get rid of the CSS class in case the command execution that follows is unsuccessful\n          // (e.g. Track Changes can override it and the new dimensions will not apply). Otherwise,\n          // the presence of the class and the absence of the width style will cause it to take 100%\n          // of the horizontal space.\n          editingView.change(writer => {\n            writer.removeClass(RESIZED_IMAGE_CLASS, widgetView);\n          });\n          editor.execute('resizeImage', {\n            width: newValue\n          });\n        }\n      });\n      resizer.on('updateSize', () => {\n        if (!widgetView.hasClass(RESIZED_IMAGE_CLASS)) {\n          editingView.change(writer => {\n            writer.addClass(RESIZED_IMAGE_CLASS, widgetView);\n          });\n        }\n      });\n      resizer.bind('isEnabled').to(this);\n    });\n  }\n}","map":{"version":3,"names":["Plugin","WidgetResize","ImageLoadObserver","RESIZABLE_IMAGES_CSS_SELECTOR","IMAGE_WIDGETS_CLASSES_MATCH_REGEXP","RESIZED_IMAGE_CLASS","ImageResizeHandles","requires","pluginName","init","command","editor","commands","get","bind","to","_setupResizerCreator","editingView","editing","view","addObserver","listenTo","document","evt","domEvent","target","matches","domConverter","imageView","domToView","widgetView","findAncestor","classes","resizer","plugins","getResizerByViewElement","redraw","mapper","imageModel","toModelElement","attachTo","unit","config","modelElement","viewElement","getHandleHost","domWidgetElement","querySelector","getResizeHost","mapViewToDom","toViewElement","parent","isCentered","imageStyle","getAttribute","onCommit","newValue","change","writer","removeClass","execute","width","on","hasClass","addClass"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-image/src/imageresize/imageresizehandles.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/imageresizehandles\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { WidgetResize } from 'ckeditor5/src/widget';\n\nimport ImageLoadObserver from '../image/imageloadobserver';\n\nconst RESIZABLE_IMAGES_CSS_SELECTOR =\n\t'figure.image.ck-widget > img,' +\n\t'figure.image.ck-widget > picture > img,' +\n\t'figure.image.ck-widget > a > img,' +\n\t'figure.image.ck-widget > a > picture > img,' +\n\t'span.image-inline.ck-widget > img,' +\n\t'span.image-inline.ck-widget > picture > img';\n\nconst IMAGE_WIDGETS_CLASSES_MATCH_REGEXP = /(image|image-inline)/;\n\nconst RESIZED_IMAGE_CLASS = 'image_resized';\n\n/**\n * The image resize by handles feature.\n *\n * It adds the ability to resize each image using handles or manually by\n * {@link module:image/imageresize/imageresizebuttons~ImageResizeButtons} buttons.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageResizeHandles extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ WidgetResize ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageResizeHandles';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst command = this.editor.commands.get( 'resizeImage' );\n\t\tthis.bind( 'isEnabled' ).to( command );\n\n\t\tthis._setupResizerCreator();\n\t}\n\n\t/**\n\t * Attaches the listeners responsible for creating a resizer for each image, except for images inside the HTML embed preview.\n\t *\n\t * @private\n\t */\n\t_setupResizerCreator() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\teditingView.addObserver( ImageLoadObserver );\n\n\t\tthis.listenTo( editingView.document, 'imageLoaded', ( evt, domEvent ) => {\n\t\t\t// The resizer must be attached only to images loaded by the `ImageInsert`, `ImageUpload` or `LinkImage` plugins.\n\t\t\tif ( !domEvent.target.matches( RESIZABLE_IMAGES_CSS_SELECTOR ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst domConverter = editor.editing.view.domConverter;\n\t\t\tconst imageView = domConverter.domToView( domEvent.target );\n\t\t\tconst widgetView = imageView.findAncestor( { classes: IMAGE_WIDGETS_CLASSES_MATCH_REGEXP } );\n\t\t\tlet resizer = this.editor.plugins.get( WidgetResize ).getResizerByViewElement( widgetView );\n\n\t\t\tif ( resizer ) {\n\t\t\t\t// There are rare cases when the image will be triggered multiple times for the same widget, e.g. when\n\t\t\t\t// the image's source was changed after upload (https://github.com/ckeditor/ckeditor5/pull/8108#issuecomment-708302992).\n\t\t\t\tresizer.redraw();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst mapper = editor.editing.mapper;\n\t\t\tconst imageModel = mapper.toModelElement( widgetView );\n\n\t\t\tresizer = editor.plugins\n\t\t\t\t.get( WidgetResize )\n\t\t\t\t.attachTo( {\n\t\t\t\t\tunit: editor.config.get( 'image.resizeUnit' ),\n\n\t\t\t\t\tmodelElement: imageModel,\n\t\t\t\t\tviewElement: widgetView,\n\t\t\t\t\teditor,\n\n\t\t\t\t\tgetHandleHost( domWidgetElement ) {\n\t\t\t\t\t\treturn domWidgetElement.querySelector( 'img' );\n\t\t\t\t\t},\n\t\t\t\t\tgetResizeHost() {\n\t\t\t\t\t\t// Return the model image element parent to avoid setting an inline element (<a>/<span>) as a resize host.\n\t\t\t\t\t\treturn domConverter.mapViewToDom( mapper.toViewElement( imageModel.parent ) );\n\t\t\t\t\t},\n\t\t\t\t\t// TODO consider other positions.\n\t\t\t\t\tisCentered() {\n\t\t\t\t\t\tconst imageStyle = imageModel.getAttribute( 'imageStyle' );\n\n\t\t\t\t\t\treturn !imageStyle || imageStyle == 'block' || imageStyle == 'alignCenter';\n\t\t\t\t\t},\n\n\t\t\t\t\tonCommit( newValue ) {\n\t\t\t\t\t\t// Get rid of the CSS class in case the command execution that follows is unsuccessful\n\t\t\t\t\t\t// (e.g. Track Changes can override it and the new dimensions will not apply). Otherwise,\n\t\t\t\t\t\t// the presence of the class and the absence of the width style will cause it to take 100%\n\t\t\t\t\t\t// of the horizontal space.\n\t\t\t\t\t\teditingView.change( writer => {\n\t\t\t\t\t\t\twriter.removeClass( RESIZED_IMAGE_CLASS, widgetView );\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\teditor.execute( 'resizeImage', { width: newValue } );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\tresizer.on( 'updateSize', () => {\n\t\t\t\tif ( !widgetView.hasClass( RESIZED_IMAGE_CLASS ) ) {\n\t\t\t\t\teditingView.change( writer => {\n\t\t\t\t\t\twriter.addClass( RESIZED_IMAGE_CLASS, widgetView );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tresizer.bind( 'isEnabled' ).to( this );\n\t\t} );\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}