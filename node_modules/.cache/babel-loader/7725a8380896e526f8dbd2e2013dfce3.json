{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/fakeselectionobserver\n */\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport { debounce } from 'lodash-es';\n/**\n * Fake selection observer class. If view selection is fake it is placed in dummy DOM container. This observer listens\n * on {@link module:engine/view/document~Document#event:keydown keydown} events and handles moving fake view selection to the correct place\n * if arrow keys are pressed.\n * Fires {@link module:engine/view/document~Document#event:selectionChange selectionChange event} simulating natural behaviour of\n * {@link module:engine/view/observer/selectionobserver~SelectionObserver SelectionObserver}.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class FakeSelectionObserver extends Observer {\n  /**\n   * Creates new FakeSelectionObserver instance.\n   *\n   * @param {module:engine/view/view~View} view\n   */\n  constructor(view) {\n    super(view);\n    /**\n     * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n     *\n     * @private\n     * @param {Object} data Selection change data.\n     * @method #_fireSelectionChangeDoneDebounced\n     */\n    this._fireSelectionChangeDoneDebounced = debounce(data => {\n      this.document.fire('selectionChangeDone', data);\n    }, 200);\n  }\n  /**\n   * @inheritDoc\n   */\n  observe() {\n    const document = this.document;\n    document.on('arrowKey', (eventInfo, data) => {\n      const selection = document.selection;\n      if (selection.isFake && this.isEnabled) {\n        // Prevents default key down handling - no selection change will occur.\n        data.preventDefault();\n      }\n    }, {\n      context: '$capture'\n    });\n    document.on('arrowKey', (eventInfo, data) => {\n      const selection = document.selection;\n      if (selection.isFake && this.isEnabled) {\n        this._handleSelectionMove(data.keyCode);\n      }\n    }, {\n      priority: 'lowest'\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n  destroy() {\n    super.destroy();\n    this._fireSelectionChangeDoneDebounced.cancel();\n  }\n  /**\n   * Handles collapsing view selection according to given key code. If left or up key is provided - new selection will be\n   * collapsed to left. If right or down key is pressed - new selection will be collapsed to right.\n   *\n   * This method fires {@link module:engine/view/document~Document#event:selectionChange} and\n   * {@link module:engine/view/document~Document#event:selectionChangeDone} events imitating behaviour of\n   * {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n   *\n   * @private\n   * @param {Number} keyCode\n   * @fires module:engine/view/document~Document#event:selectionChange\n   * @fires module:engine/view/document~Document#event:selectionChangeDone\n   */\n  _handleSelectionMove(keyCode) {\n    const selection = this.document.selection;\n    const newSelection = new ViewSelection(selection.getRanges(), {\n      backward: selection.isBackward,\n      fake: false\n    });\n    // Left or up arrow pressed - move selection to start.\n    if (keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup) {\n      newSelection.setTo(newSelection.getFirstPosition());\n    }\n    // Right or down arrow pressed - move selection to end.\n    if (keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowdown) {\n      newSelection.setTo(newSelection.getLastPosition());\n    }\n    const data = {\n      oldSelection: selection,\n      newSelection,\n      domSelection: null\n    };\n    // Fire dummy selection change event.\n    this.document.fire('selectionChange', data);\n    // Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n    // This function is debounced what means that `selectionChangeDone` event will be fired only when\n    // defined int the function time will elapse since the last time the function was called.\n    // So `selectionChangeDone` will be fired when selection will stop changing.\n    this._fireSelectionChangeDoneDebounced(data);\n  }\n}","map":{"version":3,"names":["Observer","ViewSelection","keyCodes","debounce","FakeSelectionObserver","constructor","view","_fireSelectionChangeDoneDebounced","data","document","fire","observe","on","eventInfo","selection","isFake","isEnabled","preventDefault","context","_handleSelectionMove","keyCode","priority","destroy","cancel","newSelection","getRanges","backward","isBackward","fake","arrowleft","arrowup","setTo","getFirstPosition","arrowright","arrowdown","getLastPosition","oldSelection","domSelection"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/fakeselectionobserver.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/fakeselectionobserver\n */\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport { debounce } from 'lodash-es';\n/**\n * Fake selection observer class. If view selection is fake it is placed in dummy DOM container. This observer listens\n * on {@link module:engine/view/document~Document#event:keydown keydown} events and handles moving fake view selection to the correct place\n * if arrow keys are pressed.\n * Fires {@link module:engine/view/document~Document#event:selectionChange selectionChange event} simulating natural behaviour of\n * {@link module:engine/view/observer/selectionobserver~SelectionObserver SelectionObserver}.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class FakeSelectionObserver extends Observer {\n    /**\n     * Creates new FakeSelectionObserver instance.\n     *\n     * @param {module:engine/view/view~View} view\n     */\n    constructor(view) {\n        super(view);\n        /**\n         * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n         *\n         * @private\n         * @param {Object} data Selection change data.\n         * @method #_fireSelectionChangeDoneDebounced\n         */\n        this._fireSelectionChangeDoneDebounced = debounce(data => {\n            this.document.fire('selectionChangeDone', data);\n        }, 200);\n    }\n    /**\n     * @inheritDoc\n     */\n    observe() {\n        const document = this.document;\n        document.on('arrowKey', (eventInfo, data) => {\n            const selection = document.selection;\n            if (selection.isFake && this.isEnabled) {\n                // Prevents default key down handling - no selection change will occur.\n                data.preventDefault();\n            }\n        }, { context: '$capture' });\n        document.on('arrowKey', (eventInfo, data) => {\n            const selection = document.selection;\n            if (selection.isFake && this.isEnabled) {\n                this._handleSelectionMove(data.keyCode);\n            }\n        }, { priority: 'lowest' });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this._fireSelectionChangeDoneDebounced.cancel();\n    }\n    /**\n     * Handles collapsing view selection according to given key code. If left or up key is provided - new selection will be\n     * collapsed to left. If right or down key is pressed - new selection will be collapsed to right.\n     *\n     * This method fires {@link module:engine/view/document~Document#event:selectionChange} and\n     * {@link module:engine/view/document~Document#event:selectionChangeDone} events imitating behaviour of\n     * {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n     *\n     * @private\n     * @param {Number} keyCode\n     * @fires module:engine/view/document~Document#event:selectionChange\n     * @fires module:engine/view/document~Document#event:selectionChangeDone\n     */\n    _handleSelectionMove(keyCode) {\n        const selection = this.document.selection;\n        const newSelection = new ViewSelection(selection.getRanges(), { backward: selection.isBackward, fake: false });\n        // Left or up arrow pressed - move selection to start.\n        if (keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup) {\n            newSelection.setTo(newSelection.getFirstPosition());\n        }\n        // Right or down arrow pressed - move selection to end.\n        if (keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowdown) {\n            newSelection.setTo(newSelection.getLastPosition());\n        }\n        const data = {\n            oldSelection: selection,\n            newSelection,\n            domSelection: null\n        };\n        // Fire dummy selection change event.\n        this.document.fire('selectionChange', data);\n        // Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n        // This function is debounced what means that `selectionChangeDone` event will be fired only when\n        // defined int the function time will elapse since the last time the function was called.\n        // So `selectionChangeDone` will be fired when selection will stop changing.\n        this._fireSelectionChangeDoneDebounced(data);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,YAAY;AACjC,OAAOC,aAAa,MAAM,cAAc;AACxC,SAASC,QAAQ,QAAQ,wCAAwC;AACjE,SAASC,QAAQ,QAAQ,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,qBAAqB,SAASJ,QAAQ,CAAC;EACxD;AACJ;AACA;AACA;AACA;EACIK,WAAW,CAACC,IAAI,EAAE;IACd,KAAK,CAACA,IAAI,CAAC;IACX;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,iCAAiC,GAAGJ,QAAQ,CAACK,IAAI,IAAI;MACtD,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC,qBAAqB,EAAEF,IAAI,CAAC;IACnD,CAAC,EAAE,GAAG,CAAC;EACX;EACA;AACJ;AACA;EACIG,OAAO,GAAG;IACN,MAAMF,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9BA,QAAQ,CAACG,EAAE,CAAC,UAAU,EAAE,CAACC,SAAS,EAAEL,IAAI,KAAK;MACzC,MAAMM,SAAS,GAAGL,QAAQ,CAACK,SAAS;MACpC,IAAIA,SAAS,CAACC,MAAM,IAAI,IAAI,CAACC,SAAS,EAAE;QACpC;QACAR,IAAI,CAACS,cAAc,EAAE;MACzB;IACJ,CAAC,EAAE;MAAEC,OAAO,EAAE;IAAW,CAAC,CAAC;IAC3BT,QAAQ,CAACG,EAAE,CAAC,UAAU,EAAE,CAACC,SAAS,EAAEL,IAAI,KAAK;MACzC,MAAMM,SAAS,GAAGL,QAAQ,CAACK,SAAS;MACpC,IAAIA,SAAS,CAACC,MAAM,IAAI,IAAI,CAACC,SAAS,EAAE;QACpC,IAAI,CAACG,oBAAoB,CAACX,IAAI,CAACY,OAAO,CAAC;MAC3C;IACJ,CAAC,EAAE;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAC9B;EACA;AACJ;AACA;EACIC,OAAO,GAAG;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACf,iCAAiC,CAACgB,MAAM,EAAE;EACnD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIJ,oBAAoB,CAACC,OAAO,EAAE;IAC1B,MAAMN,SAAS,GAAG,IAAI,CAACL,QAAQ,CAACK,SAAS;IACzC,MAAMU,YAAY,GAAG,IAAIvB,aAAa,CAACa,SAAS,CAACW,SAAS,EAAE,EAAE;MAAEC,QAAQ,EAAEZ,SAAS,CAACa,UAAU;MAAEC,IAAI,EAAE;IAAM,CAAC,CAAC;IAC9G;IACA,IAAIR,OAAO,IAAIlB,QAAQ,CAAC2B,SAAS,IAAIT,OAAO,IAAIlB,QAAQ,CAAC4B,OAAO,EAAE;MAC9DN,YAAY,CAACO,KAAK,CAACP,YAAY,CAACQ,gBAAgB,EAAE,CAAC;IACvD;IACA;IACA,IAAIZ,OAAO,IAAIlB,QAAQ,CAAC+B,UAAU,IAAIb,OAAO,IAAIlB,QAAQ,CAACgC,SAAS,EAAE;MACjEV,YAAY,CAACO,KAAK,CAACP,YAAY,CAACW,eAAe,EAAE,CAAC;IACtD;IACA,MAAM3B,IAAI,GAAG;MACT4B,YAAY,EAAEtB,SAAS;MACvBU,YAAY;MACZa,YAAY,EAAE;IAClB,CAAC;IACD;IACA,IAAI,CAAC5B,QAAQ,CAACC,IAAI,CAAC,iBAAiB,EAAEF,IAAI,CAAC;IAC3C;IACA;IACA;IACA;IACA,IAAI,CAACD,iCAAiC,CAACC,IAAI,CAAC;EAChD;AACJ"},"metadata":{},"sourceType":"module"}