{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/controller/editingcontroller\n */\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { clearAttributes, convertCollapsedSelection, convertRangeSelection, insertAttributesAndChildren, insertText, remove } from '../conversion/downcasthelpers';\nimport { Observable } from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { convertSelectionChange } from '../conversion/upcasthelpers';\n// @if CK_DEBUG_ENGINE // const { dumpTrees, initDocumentDumping } = require( '../dev-utils/utils' );\n/**\n * A controller for the editing pipeline. The editing pipeline controls the {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditingController extends Observable {\n  /**\n   * Creates an editing controller instance.\n   *\n   * @param {module:engine/model/model~Model} model Editing model.\n   * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor The styles processor instance.\n   */\n  constructor(model, stylesProcessor) {\n    super();\n    /**\n     * Editor model.\n     *\n     * @readonly\n     * @member {module:engine/model/model~Model}\n     */\n    this.model = model;\n    /**\n     * Editing view controller.\n     *\n     * @readonly\n     * @member {module:engine/view/view~View}\n     */\n    this.view = new View(stylesProcessor);\n    /**\n     * A mapper that describes the model-view binding.\n     *\n     * @readonly\n     * @member {module:engine/conversion/mapper~Mapper}\n     */\n    this.mapper = new Mapper();\n    /**\n     * Downcast dispatcher that converts changes from the model to the {@link #view editing view}.\n     *\n     * @readonly\n     * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\n     */\n    this.downcastDispatcher = new DowncastDispatcher({\n      mapper: this.mapper,\n      schema: model.schema\n    });\n    const doc = this.model.document;\n    const selection = doc.selection;\n    const markers = this.model.markers;\n    // When plugins listen on model changes (on selection change, post fixers, etc.) and change the view as a result of\n    // the model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n    // is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n    //\n    // See https://github.com/ckeditor/ckeditor5-engine/issues/1528\n    this.listenTo(this.model, '_beforeChanges', () => {\n      this.view._disableRendering(true);\n    }, {\n      priority: 'highest'\n    });\n    this.listenTo(this.model, '_afterChanges', () => {\n      this.view._disableRendering(false);\n    }, {\n      priority: 'lowest'\n    });\n    // Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n    // Do it on 'low' priority, so changes are converted after other listeners did their job.\n    // Also convert model selection.\n    this.listenTo(doc, 'change', () => {\n      this.view.change(writer => {\n        this.downcastDispatcher.convertChanges(doc.differ, markers, writer);\n        this.downcastDispatcher.convertSelection(selection, markers, writer);\n      });\n    }, {\n      priority: 'low'\n    });\n    // Convert selection from the view to the model when it changes in the view.\n    this.listenTo(this.view.document, 'selectionChange', convertSelectionChange(this.model, this.mapper));\n    // Attach default model converters.\n    this.downcastDispatcher.on('insert:$text', insertText(), {\n      priority: 'lowest'\n    });\n    this.downcastDispatcher.on('insert', insertAttributesAndChildren(), {\n      priority: 'lowest'\n    });\n    this.downcastDispatcher.on('remove', remove(), {\n      priority: 'low'\n    });\n    // Attach default model selection converters.\n    this.downcastDispatcher.on('selection', clearAttributes(), {\n      priority: 'high'\n    });\n    this.downcastDispatcher.on('selection', convertRangeSelection(), {\n      priority: 'low'\n    });\n    this.downcastDispatcher.on('selection', convertCollapsedSelection(), {\n      priority: 'low'\n    });\n    // Binds {@link module:engine/view/document~Document#roots view roots collection} to\n    // {@link module:engine/model/document~Document#roots model roots collection} so creating\n    // model root automatically creates corresponding view root.\n    this.view.document.roots.bindTo(this.model.document.roots).using(root => {\n      // $graveyard is a special root that has no reflection in the view.\n      if (root.rootName == '$graveyard') {\n        return null;\n      }\n      const viewRoot = new RootEditableElement(this.view.document, root.name);\n      viewRoot.rootName = root.rootName;\n      this.mapper.bindElements(root, viewRoot);\n      return viewRoot;\n    });\n    // @if CK_DEBUG_ENGINE // initDocumentDumping( this.model.document );\n    // @if CK_DEBUG_ENGINE // initDocumentDumping( this.view.document );\n    // @if CK_DEBUG_ENGINE // dumpTrees( this.model.document, this.model.document.version );\n    // @if CK_DEBUG_ENGINE // dumpTrees( this.view.document, this.model.document.version );\n    // @if CK_DEBUG_ENGINE // this.model.document.on( 'change', () => {\n    // @if CK_DEBUG_ENGINE //\tdumpTrees( this.view.document, this.model.document.version );\n    // @if CK_DEBUG_ENGINE // }, { priority: 'lowest' } );\n  }\n  /**\n   * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n   * by `EditingController` that need to be destroyed.\n   */\n  destroy() {\n    this.view.destroy();\n    this.stopListening();\n  }\n  /**\n   * Calling this method will refresh the marker by triggering the downcast conversion for it.\n   *\n   * Reconverting the marker is useful when you want to change its {@link module:engine/view/element~Element view element}\n   * without changing any marker data. For instance:\n   *\n   *\t\tlet isCommentActive = false;\n   *\n   *\t\tmodel.conversion.markerToHighlight( {\n   *\t\t\tmodel: 'comment',\n   *\t\t\tview: data => {\n   *\t\t\t\tconst classes = [ 'comment-marker' ];\n   *\n   *\t\t\t\tif ( isCommentActive ) {\n   *\t\t\t\t\tclasses.push( 'comment-marker--active' );\n   *\t\t\t\t}\n   *\n   *\t\t\t\treturn { classes };\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// ...\n   *\n   *\t\t// Change the property that indicates if marker is displayed as active or not.\n   *\t\tisCommentActive = true;\n   *\n   *\t\t// Reconverting will downcast and synchronize the marker with the new isCommentActive state value.\n   *\t\teditor.editing.reconvertMarker( 'comment' );\n   *\n   * **Note**: If you want to reconvert a model item, use {@link #reconvertItem} instead.\n   *\n   * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of a marker to update, or a marker instance.\n   */\n  reconvertMarker(markerOrName) {\n    const markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n    const currentMarker = this.model.markers.get(markerName);\n    if (!currentMarker) {\n      /**\n       * The marker with the provided name does not exist and cannot be reconverted.\n       *\n       * @error editingcontroller-reconvertmarker-marker-not-exist\n       * @param {String} markerName The name of the reconverted marker.\n       */\n      throw new CKEditorError('editingcontroller-reconvertmarker-marker-not-exist', this, {\n        markerName\n      });\n    }\n    this.model.change(() => {\n      this.model.markers._refresh(currentMarker);\n    });\n  }\n  /**\n   * Calling this method will downcast a model item on demand (by requesting a refresh in the {@link module:engine/model/differ~Differ}).\n   *\n   * You can use it if you want the view representation of a specific item updated as a response to external modifications. For instance,\n   * when the view structure depends not only on the associated model data but also on some external state.\n   *\n   * **Note**: If you want to reconvert a model marker, use {@link #reconvertMarker} instead.\n   *\n   * @param {module:engine/model/item~Item} item Item to refresh.\n   */\n  reconvertItem(item) {\n    this.model.change(() => {\n      this.model.document.differ._refreshItem(item);\n    });\n  }\n}","map":{"version":3,"names":["RootEditableElement","View","Mapper","DowncastDispatcher","clearAttributes","convertCollapsedSelection","convertRangeSelection","insertAttributesAndChildren","insertText","remove","Observable","CKEditorError","convertSelectionChange","EditingController","constructor","model","stylesProcessor","view","mapper","downcastDispatcher","schema","doc","document","selection","markers","listenTo","_disableRendering","priority","change","writer","convertChanges","differ","convertSelection","on","roots","bindTo","using","root","rootName","viewRoot","name","bindElements","destroy","stopListening","reconvertMarker","markerOrName","markerName","currentMarker","get","_refresh","reconvertItem","item","_refreshItem"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/controller/editingcontroller.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/controller/editingcontroller\n */\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { clearAttributes, convertCollapsedSelection, convertRangeSelection, insertAttributesAndChildren, insertText, remove } from '../conversion/downcasthelpers';\nimport { Observable } from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { convertSelectionChange } from '../conversion/upcasthelpers';\n// @if CK_DEBUG_ENGINE // const { dumpTrees, initDocumentDumping } = require( '../dev-utils/utils' );\n/**\n * A controller for the editing pipeline. The editing pipeline controls the {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditingController extends Observable {\n    /**\n     * Creates an editing controller instance.\n     *\n     * @param {module:engine/model/model~Model} model Editing model.\n     * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor The styles processor instance.\n     */\n    constructor(model, stylesProcessor) {\n        super();\n        /**\n         * Editor model.\n         *\n         * @readonly\n         * @member {module:engine/model/model~Model}\n         */\n        this.model = model;\n        /**\n         * Editing view controller.\n         *\n         * @readonly\n         * @member {module:engine/view/view~View}\n         */\n        this.view = new View(stylesProcessor);\n        /**\n         * A mapper that describes the model-view binding.\n         *\n         * @readonly\n         * @member {module:engine/conversion/mapper~Mapper}\n         */\n        this.mapper = new Mapper();\n        /**\n         * Downcast dispatcher that converts changes from the model to the {@link #view editing view}.\n         *\n         * @readonly\n         * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\n         */\n        this.downcastDispatcher = new DowncastDispatcher({\n            mapper: this.mapper,\n            schema: model.schema\n        });\n        const doc = this.model.document;\n        const selection = doc.selection;\n        const markers = this.model.markers;\n        // When plugins listen on model changes (on selection change, post fixers, etc.) and change the view as a result of\n        // the model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n        // is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n        //\n        // See https://github.com/ckeditor/ckeditor5-engine/issues/1528\n        this.listenTo(this.model, '_beforeChanges', () => {\n            this.view._disableRendering(true);\n        }, { priority: 'highest' });\n        this.listenTo(this.model, '_afterChanges', () => {\n            this.view._disableRendering(false);\n        }, { priority: 'lowest' });\n        // Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n        // Do it on 'low' priority, so changes are converted after other listeners did their job.\n        // Also convert model selection.\n        this.listenTo(doc, 'change', () => {\n            this.view.change(writer => {\n                this.downcastDispatcher.convertChanges(doc.differ, markers, writer);\n                this.downcastDispatcher.convertSelection(selection, markers, writer);\n            });\n        }, { priority: 'low' });\n        // Convert selection from the view to the model when it changes in the view.\n        this.listenTo(this.view.document, 'selectionChange', convertSelectionChange(this.model, this.mapper));\n        // Attach default model converters.\n        this.downcastDispatcher.on('insert:$text', insertText(), { priority: 'lowest' });\n        this.downcastDispatcher.on('insert', insertAttributesAndChildren(), { priority: 'lowest' });\n        this.downcastDispatcher.on('remove', remove(), { priority: 'low' });\n        // Attach default model selection converters.\n        this.downcastDispatcher.on('selection', clearAttributes(), { priority: 'high' });\n        this.downcastDispatcher.on('selection', convertRangeSelection(), { priority: 'low' });\n        this.downcastDispatcher.on('selection', convertCollapsedSelection(), { priority: 'low' });\n        // Binds {@link module:engine/view/document~Document#roots view roots collection} to\n        // {@link module:engine/model/document~Document#roots model roots collection} so creating\n        // model root automatically creates corresponding view root.\n        this.view.document.roots.bindTo(this.model.document.roots).using(root => {\n            // $graveyard is a special root that has no reflection in the view.\n            if (root.rootName == '$graveyard') {\n                return null;\n            }\n            const viewRoot = new RootEditableElement(this.view.document, root.name);\n            viewRoot.rootName = root.rootName;\n            this.mapper.bindElements(root, viewRoot);\n            return viewRoot;\n        });\n        // @if CK_DEBUG_ENGINE // initDocumentDumping( this.model.document );\n        // @if CK_DEBUG_ENGINE // initDocumentDumping( this.view.document );\n        // @if CK_DEBUG_ENGINE // dumpTrees( this.model.document, this.model.document.version );\n        // @if CK_DEBUG_ENGINE // dumpTrees( this.view.document, this.model.document.version );\n        // @if CK_DEBUG_ENGINE // this.model.document.on( 'change', () => {\n        // @if CK_DEBUG_ENGINE //\tdumpTrees( this.view.document, this.model.document.version );\n        // @if CK_DEBUG_ENGINE // }, { priority: 'lowest' } );\n    }\n    /**\n     * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n     * by `EditingController` that need to be destroyed.\n     */\n    destroy() {\n        this.view.destroy();\n        this.stopListening();\n    }\n    /**\n     * Calling this method will refresh the marker by triggering the downcast conversion for it.\n     *\n     * Reconverting the marker is useful when you want to change its {@link module:engine/view/element~Element view element}\n     * without changing any marker data. For instance:\n     *\n     *\t\tlet isCommentActive = false;\n     *\n     *\t\tmodel.conversion.markerToHighlight( {\n     *\t\t\tmodel: 'comment',\n     *\t\t\tview: data => {\n     *\t\t\t\tconst classes = [ 'comment-marker' ];\n     *\n     *\t\t\t\tif ( isCommentActive ) {\n     *\t\t\t\t\tclasses.push( 'comment-marker--active' );\n     *\t\t\t\t}\n     *\n     *\t\t\t\treturn { classes };\n     *\t\t\t}\n     *\t\t} );\n     *\n     *\t\t// ...\n     *\n     *\t\t// Change the property that indicates if marker is displayed as active or not.\n     *\t\tisCommentActive = true;\n     *\n     *\t\t// Reconverting will downcast and synchronize the marker with the new isCommentActive state value.\n     *\t\teditor.editing.reconvertMarker( 'comment' );\n     *\n     * **Note**: If you want to reconvert a model item, use {@link #reconvertItem} instead.\n     *\n     * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of a marker to update, or a marker instance.\n     */\n    reconvertMarker(markerOrName) {\n        const markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n        const currentMarker = this.model.markers.get(markerName);\n        if (!currentMarker) {\n            /**\n             * The marker with the provided name does not exist and cannot be reconverted.\n             *\n             * @error editingcontroller-reconvertmarker-marker-not-exist\n             * @param {String} markerName The name of the reconverted marker.\n             */\n            throw new CKEditorError('editingcontroller-reconvertmarker-marker-not-exist', this, { markerName });\n        }\n        this.model.change(() => {\n            this.model.markers._refresh(currentMarker);\n        });\n    }\n    /**\n     * Calling this method will downcast a model item on demand (by requesting a refresh in the {@link module:engine/model/differ~Differ}).\n     *\n     * You can use it if you want the view representation of a specific item updated as a response to external modifications. For instance,\n     * when the view structure depends not only on the associated model data but also on some external state.\n     *\n     * **Note**: If you want to reconvert a model marker, use {@link #reconvertMarker} instead.\n     *\n     * @param {module:engine/model/item~Item} item Item to refresh.\n     */\n    reconvertItem(item) {\n        this.model.change(() => {\n            this.model.document.differ._refreshItem(item);\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}