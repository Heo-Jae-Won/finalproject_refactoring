{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport ToolbarLineBreakView from './toolbarlinebreakview';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport preventDefault from '../bindings/preventdefault.js';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport isVisible from '@ckeditor/ckeditor5-utils/src/dom/isvisible';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { createDropdown, addToolbarToDropdown } from '../dropdown/utils';\nimport { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport normalizeToolbarConfig from './normalizetoolbarconfig';\nimport { isObject } from 'lodash-es';\nimport threeVerticalDots from '@ckeditor/ckeditor5-core/theme/icons/three-vertical-dots.svg';\nimport '../../theme/components/toolbar/toolbar.css';\nimport { icons } from '@ckeditor/ckeditor5-core';\nconst NESTED_TOOLBAR_ICONS = {\n  alignLeft: icons.alignLeft,\n  bold: icons.bold,\n  importExport: icons.importExport,\n  paragraph: icons.paragraph,\n  plus: icons.plus,\n  text: icons.text,\n  threeVerticalDots: icons.threeVerticalDots\n};\n\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n  /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n   *\n   * Also see {@link #render}.\n   *\n   * @param {module:utils/locale~Locale} locale The localization services instance.\n   * @param {module:ui/toolbar/toolbarview~ToolbarOptions} [options] Configuration options of the toolbar.\n   */\n  constructor(locale, options) {\n    super(locale);\n    const bind = this.bindTemplate;\n    const t = this.t;\n\n    /**\n     * A reference to the options object passed to the constructor.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ToolbarOptions}\n     */\n    this.options = options || {};\n\n    /**\n     * Label used by assistive technologies to describe this toolbar element.\n     *\n     * @default 'Editor toolbar'\n     * @member {String} #ariaLabel\n     */\n    this.set('ariaLabel', t('Editor toolbar'));\n\n    /**\n     * The maximum width of the toolbar element.\n     *\n     * **Note**: When set to a specific value (e.g. `'200px'`), the value will affect the behavior of the\n     * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}\n     * option by changing the number of {@link #items} that will be displayed in the toolbar at a time.\n     *\n     * @observable\n     * @default 'auto'\n     * @member {String} #maxWidth\n     */\n    this.set('maxWidth', 'auto');\n\n    /**\n     * A collection of toolbar items (buttons, dropdowns, etc.).\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n    this.items = this.createCollection();\n\n    /**\n     * Tracks information about the DOM focus in the toolbar.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n    this.focusTracker = new FocusTracker();\n\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n     * to handle keyboard navigation in the toolbar.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n    this.keystrokes = new KeystrokeHandler();\n\n    /**\n     * An additional CSS class added to the {@link #element}.\n     *\n     * @observable\n     * @member {String} #class\n     */\n    this.set('class');\n\n    /**\n     * When set true, makes the toolbar look compact with {@link #element}.\n     *\n     * @observable\n     * @default false\n     * @member {String} #isCompact\n     */\n    this.set('isCompact', false);\n\n    /**\n     * A (child) view containing {@link #items toolbar items}.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ItemsView}\n     */\n    this.itemsView = new ItemsView(locale);\n\n    /**\n     * A top–level collection aggregating building blocks of the toolbar.\n     *\n     *\t┌───────────────── ToolbarView ─────────────────┐\n     *\t| ┌──────────────── #children ────────────────┐ |\n     *\t| |   ┌──────────── #itemsView ───────────┐   | |\n     *\t| |   | [ item1 ] [ item2 ] ... [ itemN ] |   | |\n     *\t| |   └──────────────────────────────────-┘   | |\n     *\t| └───────────────────────────────────────────┘ |\n     *\t└───────────────────────────────────────────────┘\n     *\n     * By default, it contains the {@link #itemsView} but it can be extended with additional\n     * UI elements when necessary.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n    this.children = this.createCollection();\n    this.children.add(this.itemsView);\n\n    /**\n     * A collection of {@link #items} that take part in the focus cycling\n     * (i.e. navigation using the keyboard). Usually, it contains a subset of {@link #items} with\n     * some optional UI elements that also belong to the toolbar and should be focusable\n     * by the user.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n    this.focusables = this.createCollection();\n\n    /**\n     * Controls the orientation of toolbar items. Only available when\n     * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull dynamic items grouping}\n     * is **disabled**.\n     *\n     * @observable\n     * @member {Boolean} #isVertical\n     */\n\n    /**\n     * Helps cycling over {@link #focusables focusable items} in the toolbar.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    const isRtl = locale.uiLanguageDirection === 'rtl';\n    this._focusCycler = new FocusCycler({\n      focusables: this.focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate toolbar items backwards using the arrow[left,up] keys.\n        focusPrevious: [isRtl ? 'arrowright' : 'arrowleft', 'arrowup'],\n        // Navigate toolbar items forwards using the arrow[right,down] keys.\n        focusNext: [isRtl ? 'arrowleft' : 'arrowright', 'arrowdown']\n      }\n    });\n    const classes = ['ck', 'ck-toolbar', bind.to('class'), bind.if('isCompact', 'ck-toolbar_compact')];\n    if (this.options.shouldGroupWhenFull && this.options.isFloating) {\n      classes.push('ck-toolbar_floating');\n    }\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: classes,\n        role: 'toolbar',\n        'aria-label': bind.to('ariaLabel'),\n        style: {\n          maxWidth: bind.to('maxWidth')\n        }\n      },\n      children: this.children,\n      on: {\n        // https://github.com/ckeditor/ckeditor5-ui/issues/206\n        mousedown: preventDefault(this)\n      }\n    });\n\n    /**\n     * An instance of the active toolbar behavior that shapes its look and functionality.\n     *\n     * See {@link module:ui/toolbar/toolbarview~ToolbarBehavior} to learn more.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ToolbarBehavior}\n     */\n    this._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping(this) : new StaticLayout(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  render() {\n    super.render();\n\n    // Children added before rendering should be known to the #focusTracker.\n    for (const item of this.items) {\n      this.focusTracker.add(item.element);\n    }\n    this.items.on('add', (evt, item) => {\n      this.focusTracker.add(item.element);\n    });\n    this.items.on('remove', (evt, item) => {\n      this.focusTracker.remove(item.element);\n    });\n\n    // Start listening for the keystrokes coming from #element.\n    this.keystrokes.listenTo(this.element);\n    this._behavior.render(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  destroy() {\n    this._behavior.destroy();\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n    return super.destroy();\n  }\n\n  /**\n   * Focuses the first focusable in {@link #focusables}.\n   */\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n\n  /**\n   * Focuses the last focusable in {@link #focusables}.\n   */\n  focusLast() {\n    this._focusCycler.focusLast();\n  }\n\n  /**\n   * A utility that expands the plain toolbar configuration into\n   * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n   *\n   * @param {Array.<String>|Object} itemsOrConfig The toolbar items or the entire toolbar configuration object.\n   * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n   * @param {Array.<String>} [removeItems] An array of items names to be removed from the configuration. When present, applies\n   * to this toolbar and all nested ones as well.\n   */\n  fillFromConfig(itemsOrConfig, factory, removeItems) {\n    const config = normalizeToolbarConfig(itemsOrConfig);\n    const normalizedRemoveItems = removeItems || config.removeItems;\n    const itemsToAdd = this._cleanItemsConfiguration(config.items, factory, normalizedRemoveItems).map(name => {\n      if (isObject(name)) {\n        return this._createNestedToolbarDropdown(name, factory, normalizedRemoveItems);\n      } else if (name === '|') {\n        return new ToolbarSeparatorView();\n      } else if (name === '-') {\n        return new ToolbarLineBreakView();\n      }\n      return factory.create(name);\n    }).filter(item => item);\n    this.items.addMany(itemsToAdd);\n  }\n\n  /**\n   * Cleans up the {@link module:ui/toolbar/toolbarview~ToolbarView#items} of the toolbar by removing unwanted items and\n   * duplicated (obsolete) separators or line breaks.\n   *\n   * @private\n   * @param {Array.<String>} items The toolbar items configuration.\n   * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n   * @param {Array.<String>} removeItems An array of items names to be removed from the configuration.\n   * @returns {Array.<String>}  Items after the clean-up.\n   */\n  _cleanItemsConfiguration(items, factory, removeItems) {\n    const filteredItems = items.filter((name, idx, items) => {\n      if (name === '|') {\n        return true;\n      }\n\n      // Items listed in `config.removeItems` should not be added to the toolbar.\n      if (removeItems.indexOf(name) !== -1) {\n        return false;\n      }\n      if (name === '-') {\n        // The toolbar line breaks must not be rendered when toolbar grouping is enabled.\n        // (https://github.com/ckeditor/ckeditor5/issues/8582)\n        if (this.options.shouldGroupWhenFull) {\n          /**\n           * The toolbar multiline breaks (`-` items) only work when the automatic button grouping\n           * is disabled in the toolbar configuration.\n           * To do this, set the `shouldNotGroupWhenFull` option to `true` in the editor configuration:\n           *\n           *\t\tconst config = {\n           *\t\t\ttoolbar: {\n           *\t\t\t\titems: [ ... ],\n           *\t\t\t\tshouldNotGroupWhenFull: true\n           *\t\t\t}\n           *\t\t}\n           *\n           * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n           *\n           * @error toolbarview-line-break-ignored-when-grouping-items\n           */\n          logWarning('toolbarview-line-break-ignored-when-grouping-items', items);\n          return false;\n        }\n        return true;\n      }\n\n      // For the items that cannot be instantiated we are sending warning message. We also filter them out.\n      if (!isObject(name) && !factory.has(name)) {\n        /**\n         * There was a problem processing the configuration of the toolbar. The item with the given\n         * name does not exist so it was omitted when rendering the toolbar.\n         *\n         * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n         * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n         *\n         * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n         * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n         *\n         * You can use the following snippet to retrieve all available toolbar items:\n         *\n         *\t\tArray.from( editor.ui.componentFactory.names() );\n         *\n         * @error toolbarview-item-unavailable\n         * @param {String} name The name of the component.\n         */\n        logWarning('toolbarview-item-unavailable', {\n          name\n        });\n        return false;\n      }\n      return true;\n    });\n    return this._cleanSeparatorsAndLineBreaks(filteredItems);\n  }\n\n  /**\n   * Remove leading, trailing, and duplicated separators (`-` and `|`).\n   *\n   * @private\n   * @param {Array.<String>} items\n   * @returns {Array.<String>} Toolbar items after the separator and line break clean-up.\n   */\n  _cleanSeparatorsAndLineBreaks(items) {\n    const nonSeparatorPredicate = item => item !== '-' && item !== '|';\n    const count = items.length;\n\n    // Find an index of the first item that is not a separator.\n    const firstCommandItemIndex = items.findIndex(nonSeparatorPredicate);\n\n    // Items include separators only. There is no point in displaying them.\n    if (firstCommandItemIndex === -1) {\n      return [];\n    }\n\n    // Search from the end of the list, then convert found index back to the original direction.\n    const lastCommandItemIndex = count - items.slice().reverse().findIndex(nonSeparatorPredicate);\n    return items\n    // Return items without the leading and trailing separators.\n    .slice(firstCommandItemIndex, lastCommandItemIndex)\n    // Remove duplicated separators.\n    .filter((name, idx, items) => {\n      // Filter only separators.\n      if (nonSeparatorPredicate(name)) {\n        return true;\n      }\n      const isDuplicated = idx > 0 && items[idx - 1] === name;\n      return !isDuplicated;\n    });\n  }\n\n  /**\n   * Creates a user-defined dropdown containing a toolbar with items.\n   *\n   * @private\n   * @param {Object} definition A definition of the nested toolbar dropdown.\n   * @param {String} definition.label A label of the dropdown.\n   * @param {String|Boolean} [definition.icon] An icon of the drop-down. One of 'bold', 'plus', 'text', 'importExport', 'alignLeft',\n   * 'paragraph' or an SVG string. When `false` is passed, no icon will be used.\n   * @param {Boolean} [definition.withText=false] When set `true`, the label of the dropdown will be visible. See\n   * {@link module:ui/button/buttonview~ButtonView#withText} to learn more.\n   * @param {Boolean|String|Function} [definition.tooltip=true] A tooltip of the dropdown button. See\n   * {@link module:ui/button/buttonview~ButtonView#tooltip} to learn more.\n   * @param {module:ui/componentfactory~ComponentFactory} componentFactory Component factory used to create items\n   * of the nested toolbar.\n   * @returns {module:ui/dropdown/dropdownview~DropdownView}\n   */\n  _createNestedToolbarDropdown(definition, componentFactory, removeItems) {\n    let {\n      label,\n      icon,\n      items,\n      tooltip = true,\n      withText = false\n    } = definition;\n    items = this._cleanItemsConfiguration(items, componentFactory, removeItems);\n\n    // There is no point in rendering a dropdown without items.\n    if (!items.length) {\n      return null;\n    }\n    const locale = this.locale;\n    const dropdownView = createDropdown(locale);\n    if (!label) {\n      /**\n       * A dropdown definition in the toolbar configuration is missing a text label.\n       *\n       * Without a label, the dropdown becomes inaccessible to users relying on assistive technologies.\n       * Make sure the `label` property is set in your drop-down configuration:\n       *\n      \t *\t\t{\n      \t *\t\t\tlabel: 'A human-readable label',\n       *\t\t\ticon: '...',\n       *\t\t\titems: [ ... ]\n      \t *\t\t},\n       *\n       * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n       *\n       * @error toolbarview-nested-toolbar-dropdown-missing-label\n       */\n      logWarning('toolbarview-nested-toolbar-dropdown-missing-label', definition);\n    }\n    dropdownView.class = 'ck-toolbar__nested-toolbar-dropdown';\n    dropdownView.buttonView.set({\n      label,\n      tooltip,\n      withText: !!withText\n    });\n\n    // Allow disabling icon by passing false.\n    if (icon !== false) {\n      // A pre-defined icon picked by name, SVG string, a fallback (default) icon.\n      dropdownView.buttonView.icon = NESTED_TOOLBAR_ICONS[icon] || icon || NESTED_TOOLBAR_ICONS.threeVerticalDots;\n    }\n    // If the icon is disabled, display the label automatically.\n    else {\n      dropdownView.buttonView.withText = true;\n    }\n    addToolbarToDropdown(dropdownView, []);\n    dropdownView.toolbarView.fillFromConfig(items, componentFactory, removeItems);\n    return dropdownView;\n  }\n\n  /**\n   * Fired when some toolbar {@link #items} were grouped or ungrouped as a result of some change\n   * in the toolbar geometry.\n   *\n   * **Note**: This event is always fired **once** regardless of the number of items that were be\n   * grouped or ungrouped at a time.\n   *\n   * **Note**: This event is fired only if the items grouping functionality was enabled in\n   * the first place (see {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}).\n   *\n   * @event groupedItemsUpdate\n   */\n}\n\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n *\n * @private\n * @extends module:ui/view~View\n */\nclass ItemsView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n\n    /**\n     * A collection of items (buttons, dropdowns, etc.).\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n    this.children = this.createCollection();\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-toolbar__items']\n      },\n      children: this.children\n    });\n  }\n}\n\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass StaticLayout {\n  /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n   * behavior.\n   *\n   * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n   * is added to.\n   */\n  constructor(view) {\n    const bind = view.bindTemplate;\n\n    // Static toolbar can be vertical when needed.\n    view.set('isVertical', false);\n\n    // 1:1 pass–through binding, all ToolbarView#items are visible.\n    view.itemsView.children.bindTo(view.items).using(item => item);\n\n    // 1:1 pass–through binding, all ToolbarView#items are focusable.\n    view.focusables.bindTo(view.items).using(item => item);\n    view.extendTemplate({\n      attributes: {\n        class: [\n        // When vertical, the toolbar has an additional CSS class.\n        bind.if('isVertical', 'ck-toolbar_vertical')]\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  render() {}\n\n  /**\n   * @inheritDoc\n   */\n  destroy() {}\n}\n\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow --------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass DynamicGrouping {\n  /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n   * behavior.\n   *\n   * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n   * is added to.\n   */\n  constructor(view) {\n    /**\n     * A toolbar view this behavior belongs to.\n     *\n     * @readonly\n     * @member {module:ui/toolbar~ToolbarView}\n     */\n    this.view = view;\n\n    /**\n     * A collection of toolbar children.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n    this.viewChildren = view.children;\n\n    /**\n     * A collection of focusable toolbar elements.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n    this.viewFocusables = view.focusables;\n\n    /**\n     * A view containing toolbar items.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ItemsView}\n     */\n    this.viewItemsView = view.itemsView;\n\n    /**\n     * Toolbar focus tracker.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n    this.viewFocusTracker = view.focusTracker;\n\n    /**\n     * Toolbar locale.\n     *\n     * @readonly\n     * @member {module:utils/locale~Locale}\n     */\n    this.viewLocale = view.locale;\n\n    /**\n     * Toolbar element.\n     *\n     * @readonly\n     * @member {HTMLElement} #viewElement\n     */\n\n    /**\n     * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n     * Aggregates items that fit into a single row of the toolbar and were not {@link #groupedItems grouped}\n     * into a {@link #groupedItemsDropdown dropdown}. Items of this collection are displayed in the\n     * {@link module:ui/toolbar/toolbarview~ToolbarView#itemsView}.\n     *\n     * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped, it\n     * matches the {@link module:ui/toolbar/toolbarview~ToolbarView#items} collection in size and order.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n    this.ungroupedItems = view.createCollection();\n\n    /**\n     * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n     * A collection of the toolbar items that do not fit into a single row of the toolbar.\n     * Grouped items are displayed in a dedicated {@link #groupedItemsDropdown dropdown}.\n     *\n     * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped,\n     * this collection is empty.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n    this.groupedItems = view.createCollection();\n\n    /**\n     * The dropdown that aggregates {@link #groupedItems grouped items} that do not fit into a single\n     * row of the toolbar. It is displayed on demand as the last of\n     * {@link module:ui/toolbar/toolbarview~ToolbarView#children toolbar children} and offers another\n     * (nested) toolbar which displays items that would normally overflow.\n     *\n     * @readonly\n     * @member {module:ui/dropdown/dropdownview~DropdownView}\n     */\n    this.groupedItemsDropdown = this._createGroupedItemsDropdown();\n\n    /**\n     * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n     * and manage items that do not fit into a single row.\n     *\n     * **Note:** Created in {@link #_enableGroupingOnResize}.\n     *\n     * @readonly\n     * @member {module:utils/dom/resizeobserver~ResizeObserver}\n     */\n    this.resizeObserver = null;\n\n    /**\n     * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n     * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n     * a single toolbar line. This value can be reused between updates because it is unlikely that\n     * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n     *\n     * @readonly\n     * @member {Number}\n     */\n    this.cachedPadding = null;\n\n    /**\n     * A flag indicating that an items grouping update has been queued (e.g. due to the toolbar being visible)\n     * and should be executed immediately the next time the toolbar shows up.\n     *\n     * @readonly\n     * @member {Boolean}\n     */\n    this.shouldUpdateGroupingOnNextResize = false;\n\n    // Only those items that were not grouped are visible to the user.\n    view.itemsView.children.bindTo(this.ungroupedItems).using(item => item);\n\n    // Make sure all #items visible in the main space of the toolbar are \"focuscycleable\".\n    this.ungroupedItems.on('add', this._updateFocusCycleableItems.bind(this));\n    this.ungroupedItems.on('remove', this._updateFocusCycleableItems.bind(this));\n\n    // Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n    view.children.on('add', this._updateFocusCycleableItems.bind(this));\n    view.children.on('remove', this._updateFocusCycleableItems.bind(this));\n\n    // ToolbarView#items is dynamic. When an item is added or removed, it should be automatically\n    // represented in either grouped or ungrouped items at the right index.\n    // In other words #items == concat( #ungroupedItems, #groupedItems )\n    // (in length and order).\n    view.items.on('change', (evt, changeData) => {\n      const index = changeData.index;\n\n      // Removing.\n      for (const removedItem of changeData.removed) {\n        if (index >= this.ungroupedItems.length) {\n          this.groupedItems.remove(removedItem);\n        } else {\n          this.ungroupedItems.remove(removedItem);\n        }\n      }\n\n      // Adding.\n      for (let currentIndex = index; currentIndex < index + changeData.added.length; currentIndex++) {\n        const addedItem = changeData.added[currentIndex - index];\n        if (currentIndex > this.ungroupedItems.length) {\n          this.groupedItems.add(addedItem, currentIndex - this.ungroupedItems.length);\n        } else {\n          this.ungroupedItems.add(addedItem, currentIndex);\n        }\n      }\n\n      // When new ungrouped items join in and land in #ungroupedItems, there's a chance it causes\n      // the toolbar to overflow.\n      // Consequently if removed from grouped or ungrouped items, there is a chance\n      // some new space is available and we could do some ungrouping.\n      this._updateGrouping();\n    });\n    view.extendTemplate({\n      attributes: {\n        class: [\n        // To group items dynamically, the toolbar needs a dedicated CSS class.\n        'ck-toolbar_grouping']\n      }\n    });\n  }\n\n  /**\n   * Enables dynamic items grouping based on the dimensions of the toolbar.\n   *\n   * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n   * is added to.\n   */\n  render(view) {\n    this.viewElement = view.element;\n    this._enableGroupingOnResize();\n    this._enableGroupingOnMaxWidthChange(view);\n  }\n\n  /**\n   * Cleans up the internals used by this behavior.\n   */\n  destroy() {\n    // The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n    // so let's make sure it's actually destroyed along with the toolbar.\n    this.groupedItemsDropdown.destroy();\n    this.resizeObserver.destroy();\n  }\n\n  /**\n   * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n   * and it will move them to the {@link #groupedItems} when it happens.\n   *\n   * At the same time, it will also check if there is enough space in the toolbar for the first of the\n   * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n   * without the toolbar wrapping.\n   *\n   * @protected\n   */\n  _updateGrouping() {\n    // Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n    // for instance before #render(), or after render but without a parent or a parent detached\n    // from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n    // nothing else. This happens, for instance, when the toolbar is detached from DOM and\n    // some logic adds or removes its #items.\n    if (!this.viewElement.ownerDocument.body.contains(this.viewElement)) {\n      return;\n    }\n\n    // Do not update grouping when the element is invisible. Such toolbar has DOMRect filled with zeros\n    // and that would cause all items to be grouped. Instead, queue the grouping so it runs next time\n    // the toolbar is visible (the next ResizeObserver callback execution). This is handy because\n    // the grouping could be caused by increasing the #maxWidth when the toolbar was invisible and the next\n    // time it shows up, some items could actually be ungrouped (https://github.com/ckeditor/ckeditor5/issues/6575).\n    if (!isVisible(this.viewElement)) {\n      this.shouldUpdateGroupingOnNextResize = true;\n      return;\n    }\n\n    // Remember how many items were initially grouped so at the it is possible to figure out if the number\n    // of grouped items has changed. If the number has changed, geometry of the toolbar has also changed.\n    const initialGroupedItemsCount = this.groupedItems.length;\n    let wereItemsGrouped;\n\n    // Group #items as long as some wrap to the next row. This will happen, for instance,\n    // when the toolbar is getting narrow and there is not enough space to display all items in\n    // a single row.\n    while (this._areItemsOverflowing) {\n      this._groupLastItem();\n      wereItemsGrouped = true;\n    }\n\n    // If none were grouped now but there were some items already grouped before,\n    // then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n    // for instance, the toolbar is stretching and there's more space in it than before.\n    if (!wereItemsGrouped && this.groupedItems.length) {\n      // Ungroup items as long as none are overflowing or there are none to ungroup left.\n      while (this.groupedItems.length && !this._areItemsOverflowing) {\n        this._ungroupFirstItem();\n      }\n\n      // If the ungrouping ended up with some item wrapping to the next row,\n      // put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n      // an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n      // clean–up is vital for the algorithm.\n      if (this._areItemsOverflowing) {\n        this._groupLastItem();\n      }\n    }\n    if (this.groupedItems.length !== initialGroupedItemsCount) {\n      this.view.fire('groupedItemsUpdate');\n    }\n  }\n\n  /**\n   * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n   * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n   *\n   * @private\n   * @type {Boolean}\n   */\n  get _areItemsOverflowing() {\n    // An empty toolbar cannot overflow.\n    if (!this.ungroupedItems.length) {\n      return false;\n    }\n    const element = this.viewElement;\n    const uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n    const lastChildRect = new Rect(element.lastChild);\n    const toolbarRect = new Rect(element);\n    if (!this.cachedPadding) {\n      const computedStyle = global.window.getComputedStyle(element);\n      const paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n\n      // parseInt() is essential because of quirky floating point numbers logic and DOM.\n      // If the padding turned out too big because of that, the grouped items dropdown would\n      // always look (from the Rect perspective) like it overflows (while it's not).\n      this.cachedPadding = Number.parseInt(computedStyle[paddingProperty]);\n    }\n    if (uiLanguageDirection === 'ltr') {\n      return lastChildRect.right > toolbarRect.right - this.cachedPadding;\n    } else {\n      return lastChildRect.left < toolbarRect.left + this.cachedPadding;\n    }\n  }\n\n  /**\n   * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n   * upon resize when there is little space available. Instead, the toolbar items are moved to the\n   * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n   *\n   * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n   * them in the dropdown if necessary. It will also observe the browser window for size changes in\n   * the future and respond to them by grouping more items or reverting already grouped back, depending\n   * on the visual space available.\n   *\n   * @private\n   */\n  _enableGroupingOnResize() {\n    let previousWidth;\n\n    // TODO: Consider debounce.\n    this.resizeObserver = new ResizeObserver(this.viewElement, entry => {\n      if (!previousWidth || previousWidth !== entry.contentRect.width || this.shouldUpdateGroupingOnNextResize) {\n        this.shouldUpdateGroupingOnNextResize = false;\n        this._updateGrouping();\n        previousWidth = entry.contentRect.width;\n      }\n    });\n    this._updateGrouping();\n  }\n\n  /**\n   * Enables the grouping functionality, just like {@link #_enableGroupingOnResize} but the difference is that\n   * it listens to the changes of {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth} instead.\n   *\n   * @private\n   */\n  _enableGroupingOnMaxWidthChange(view) {\n    view.on('change:maxWidth', () => {\n      this._updateGrouping();\n    });\n  }\n\n  /**\n   * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n   * to the {@link #groupedItems} collection.\n   *\n   * The opposite of {@link #_ungroupFirstItem}.\n   *\n   * @private\n   */\n  _groupLastItem() {\n    if (!this.groupedItems.length) {\n      this.viewChildren.add(new ToolbarSeparatorView());\n      this.viewChildren.add(this.groupedItemsDropdown);\n      this.viewFocusTracker.add(this.groupedItemsDropdown.element);\n    }\n    this.groupedItems.add(this.ungroupedItems.remove(this.ungroupedItems.last), 0);\n  }\n\n  /**\n   * Moves the very first item belonging to {@link #groupedItems} back\n   * to the {@link #ungroupedItems} collection.\n   *\n   * The opposite of {@link #_groupLastItem}.\n   *\n   * @private\n   */\n  _ungroupFirstItem() {\n    this.ungroupedItems.add(this.groupedItems.remove(this.groupedItems.first));\n    if (!this.groupedItems.length) {\n      this.viewChildren.remove(this.groupedItemsDropdown);\n      this.viewChildren.remove(this.viewChildren.last);\n      this.viewFocusTracker.remove(this.groupedItemsDropdown.element);\n    }\n  }\n\n  /**\n   * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n   * collection when there is not enough space in the toolbar to display all items in a single row.\n   *\n   * @private\n   * @returns {module:ui/dropdown/dropdownview~DropdownView}\n   */\n  _createGroupedItemsDropdown() {\n    const locale = this.viewLocale;\n    const t = locale.t;\n    const dropdown = createDropdown(locale);\n    dropdown.class = 'ck-toolbar__grouped-dropdown';\n\n    // Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n    // (https://github.com/ckeditor/ckeditor5/issues/5608)\n    dropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n    addToolbarToDropdown(dropdown, []);\n    dropdown.buttonView.set({\n      label: t('Show more items'),\n      tooltip: true,\n      tooltipPosition: locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw',\n      icon: threeVerticalDots\n    });\n\n    // 1:1 pass–through binding.\n    dropdown.toolbarView.items.bindTo(this.groupedItems).using(item => item);\n    return dropdown;\n  }\n\n  /**\n   * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}\n   * collection so it represents the up–to–date state of the UI from the perspective of the user.\n   *\n   * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n   * it must be subject to focus cycling in the toolbar.\n   *\n   * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n   * to learn more about the purpose of this method.\n   *\n   * @private\n   */\n  _updateFocusCycleableItems() {\n    this.viewFocusables.clear();\n    this.ungroupedItems.map(item => {\n      this.viewFocusables.add(item);\n    });\n    if (this.groupedItems.length) {\n      this.viewFocusables.add(this.groupedItemsDropdown);\n    }\n  }\n}\n\n/**\n * Options passed to the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n *\n * @interface module:ui/toolbar/toolbarview~ToolbarOptions\n */\n\n/**\n * When set to `true`, the toolbar will automatically group {@link module:ui/toolbar/toolbarview~ToolbarView#items} that\n * would normally wrap to the next line when there is not enough space to display them in a single row, for\n * instance, if the parent container of the toolbar is narrow. For toolbars in absolutely positioned containers\n * without width restrictions also the {@link module:ui/toolbar/toolbarview~ToolbarOptions#isFloating} option is required to be `true`.\n *\n * See also: {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth}.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull\n */\n\n/**\n * This option should be enabled for toolbars in absolutely positioned containers without width restrictions\n * to enable automatic {@link module:ui/toolbar/toolbarview~ToolbarView#items} grouping.\n * When this option is set to `true`, the items will stop wrapping to the next line\n * and together with {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull},\n * this will allow grouping them when there is not enough space in a single row.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#isFloating\n */\n\n/**\n * A class interface defining the behavior of the {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * Toolbar behaviors extend its look and functionality and have an impact on the\n * {@link module:ui/toolbar/toolbarview~ToolbarView#element} template or\n * {@link module:ui/toolbar/toolbarview~ToolbarView#render rendering}. They can be enabled\n * conditionally, e.g. depending on the configuration of the toolbar.\n *\n * @private\n * @interface module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n\n/**\n * Creates a new toolbar behavior instance.\n *\n * The instance is created in the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n * This is the right place to extend the {@link module:ui/toolbar/toolbarview~ToolbarView#template} of\n * the toolbar, define extra toolbar properties, etc.\n *\n * @method #constructor\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior is added to.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#render rendered}.\n * It can be used to, for example, customize the behavior of the toolbar when its {@link module:ui/toolbar/toolbarview~ToolbarView#element}\n * is available.\n *\n * @readonly\n * @member {Function} #render\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar being rendered.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#destroy destroyed}.\n * It allows cleaning up after the toolbar behavior, for instance, this is the right place to detach\n * event listeners, free up references, etc.\n *\n * @readonly\n * @member {Function} #destroy\n */","map":{"version":3,"names":["View","FocusTracker","FocusCycler","KeystrokeHandler","ToolbarSeparatorView","ToolbarLineBreakView","ResizeObserver","preventDefault","Rect","isVisible","global","createDropdown","addToolbarToDropdown","logWarning","normalizeToolbarConfig","isObject","threeVerticalDots","icons","NESTED_TOOLBAR_ICONS","alignLeft","bold","importExport","paragraph","plus","text","ToolbarView","constructor","locale","options","bind","bindTemplate","t","set","items","createCollection","focusTracker","keystrokes","itemsView","ItemsView","children","add","focusables","isRtl","uiLanguageDirection","_focusCycler","keystrokeHandler","actions","focusPrevious","focusNext","classes","to","if","shouldGroupWhenFull","isFloating","push","setTemplate","tag","attributes","class","role","style","maxWidth","on","mousedown","_behavior","DynamicGrouping","StaticLayout","render","item","element","evt","remove","listenTo","destroy","focus","focusFirst","focusLast","fillFromConfig","itemsOrConfig","factory","removeItems","config","normalizedRemoveItems","itemsToAdd","_cleanItemsConfiguration","map","name","_createNestedToolbarDropdown","create","filter","addMany","filteredItems","idx","indexOf","has","_cleanSeparatorsAndLineBreaks","nonSeparatorPredicate","count","length","firstCommandItemIndex","findIndex","lastCommandItemIndex","slice","reverse","isDuplicated","definition","componentFactory","label","icon","tooltip","withText","dropdownView","buttonView","toolbarView","view","bindTo","using","extendTemplate","viewChildren","viewFocusables","viewItemsView","viewFocusTracker","viewLocale","ungroupedItems","groupedItems","groupedItemsDropdown","_createGroupedItemsDropdown","resizeObserver","cachedPadding","shouldUpdateGroupingOnNextResize","_updateFocusCycleableItems","changeData","index","removedItem","removed","currentIndex","added","addedItem","_updateGrouping","viewElement","_enableGroupingOnResize","_enableGroupingOnMaxWidthChange","ownerDocument","body","contains","initialGroupedItemsCount","wereItemsGrouped","_areItemsOverflowing","_groupLastItem","_ungroupFirstItem","fire","lastChildRect","lastChild","toolbarRect","computedStyle","window","getComputedStyle","paddingProperty","Number","parseInt","right","left","previousWidth","entry","contentRect","width","last","first","dropdown","panelPosition","tooltipPosition","clear"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport ToolbarLineBreakView from './toolbarlinebreakview';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport preventDefault from '../bindings/preventdefault.js';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport isVisible from '@ckeditor/ckeditor5-utils/src/dom/isvisible';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { createDropdown, addToolbarToDropdown } from '../dropdown/utils';\nimport { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport normalizeToolbarConfig from './normalizetoolbarconfig';\nimport { isObject } from 'lodash-es';\n\nimport threeVerticalDots from '@ckeditor/ckeditor5-core/theme/icons/three-vertical-dots.svg';\n\nimport '../../theme/components/toolbar/toolbar.css';\n\nimport { icons } from '@ckeditor/ckeditor5-core';\n\nconst NESTED_TOOLBAR_ICONS = {\n\talignLeft: icons.alignLeft,\n\tbold: icons.bold,\n\timportExport: icons.importExport,\n\tparagraph: icons.paragraph,\n\tplus: icons.plus,\n\ttext: icons.text,\n\tthreeVerticalDots: icons.threeVerticalDots\n};\n\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t * @param {module:ui/toolbar/toolbarview~ToolbarOptions} [options] Configuration options of the toolbar.\n\t */\n\tconstructor( locale, options ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tconst t = this.t;\n\n\t\t/**\n\t\t * A reference to the options object passed to the constructor.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarOptions}\n\t\t */\n\t\tthis.options = options || {};\n\n\t\t/**\n\t\t * Label used by assistive technologies to describe this toolbar element.\n\t\t *\n\t\t * @default 'Editor toolbar'\n\t\t * @member {String} #ariaLabel\n\t\t */\n\t\tthis.set( 'ariaLabel', t( 'Editor toolbar' ) );\n\n\t\t/**\n\t\t * The maximum width of the toolbar element.\n\t\t *\n\t\t * **Note**: When set to a specific value (e.g. `'200px'`), the value will affect the behavior of the\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}\n\t\t * option by changing the number of {@link #items} that will be displayed in the toolbar at a time.\n\t\t *\n\t\t * @observable\n\t\t * @default 'auto'\n\t\t * @member {String} #maxWidth\n\t\t */\n\t\tthis.set( 'maxWidth', 'auto' );\n\n\t\t/**\n\t\t * A collection of toolbar items (buttons, dropdowns, etc.).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about the DOM focus in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * to handle keyboard navigation in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * When set true, makes the toolbar look compact with {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @default false\n\t\t * @member {String} #isCompact\n\t\t */\n\t\tthis.set( 'isCompact', false );\n\n\t\t/**\n\t\t * A (child) view containing {@link #items toolbar items}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ItemsView}\n\t\t */\n\t\tthis.itemsView = new ItemsView( locale );\n\n\t\t/**\n\t\t * A top–level collection aggregating building blocks of the toolbar.\n\t\t *\n\t\t *\t┌───────────────── ToolbarView ─────────────────┐\n\t\t *\t| ┌──────────────── #children ────────────────┐ |\n\t\t *\t| |   ┌──────────── #itemsView ───────────┐   | |\n\t\t *\t| |   | [ item1 ] [ item2 ] ... [ itemN ] |   | |\n\t\t *\t| |   └──────────────────────────────────-┘   | |\n\t\t *\t| └───────────────────────────────────────────┘ |\n\t\t *\t└───────────────────────────────────────────────┘\n\t\t *\n\t\t * By default, it contains the {@link #itemsView} but it can be extended with additional\n\t\t * UI elements when necessary.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\t\tthis.children.add( this.itemsView );\n\n\t\t/**\n\t\t * A collection of {@link #items} that take part in the focus cycling\n\t\t * (i.e. navigation using the keyboard). Usually, it contains a subset of {@link #items} with\n\t\t * some optional UI elements that also belong to the toolbar and should be focusable\n\t\t * by the user.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.focusables = this.createCollection();\n\n\t\t/**\n\t\t * Controls the orientation of toolbar items. Only available when\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull dynamic items grouping}\n\t\t * is **disabled**.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVertical\n\t\t */\n\n\t\t/**\n\t\t * Helps cycling over {@link #focusables focusable items} in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\n\t\tconst isRtl = locale.uiLanguageDirection === 'rtl';\n\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate toolbar items backwards using the arrow[left,up] keys.\n\t\t\t\tfocusPrevious: [ isRtl ? 'arrowright' : 'arrowleft', 'arrowup' ],\n\n\t\t\t\t// Navigate toolbar items forwards using the arrow[right,down] keys.\n\t\t\t\tfocusNext: [ isRtl ? 'arrowleft' : 'arrowright', 'arrowdown' ]\n\t\t\t}\n\t\t} );\n\n\t\tconst classes = [\n\t\t\t'ck',\n\t\t\t'ck-toolbar',\n\t\t\tbind.to( 'class' ),\n\t\t\tbind.if( 'isCompact', 'ck-toolbar_compact' )\n\t\t];\n\n\t\tif ( this.options.shouldGroupWhenFull && this.options.isFloating ) {\n\t\t\tclasses.push( 'ck-toolbar_floating' );\n\t\t}\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: classes,\n\t\t\t\trole: 'toolbar',\n\t\t\t\t'aria-label': bind.to( 'ariaLabel' ),\n\t\t\t\tstyle: {\n\t\t\t\t\tmaxWidth: bind.to( 'maxWidth' )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\t\t\tmousedown: preventDefault( this )\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * An instance of the active toolbar behavior that shapes its look and functionality.\n\t\t *\n\t\t * See {@link module:ui/toolbar/toolbarview~ToolbarBehavior} to learn more.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarBehavior}\n\t\t */\n\t\tthis._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping( this ) : new StaticLayout( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Children added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\tthis._behavior.render( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._behavior.destroy();\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #focusables}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #focusables}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n\n\t/**\n\t * A utility that expands the plain toolbar configuration into\n\t * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n\t *\n\t * @param {Array.<String>|Object} itemsOrConfig The toolbar items or the entire toolbar configuration object.\n\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n\t * @param {Array.<String>} [removeItems] An array of items names to be removed from the configuration. When present, applies\n\t * to this toolbar and all nested ones as well.\n\t */\n\tfillFromConfig( itemsOrConfig, factory, removeItems ) {\n\t\tconst config = normalizeToolbarConfig( itemsOrConfig );\n\t\tconst normalizedRemoveItems = removeItems || config.removeItems;\n\t\tconst itemsToAdd = this._cleanItemsConfiguration( config.items, factory, normalizedRemoveItems )\n\t\t\t.map( name => {\n\t\t\t\tif ( isObject( name ) ) {\n\t\t\t\t\treturn this._createNestedToolbarDropdown( name, factory, normalizedRemoveItems );\n\t\t\t\t} else if ( name === '|' ) {\n\t\t\t\t\treturn new ToolbarSeparatorView();\n\t\t\t\t} else if ( name === '-' ) {\n\t\t\t\t\treturn new ToolbarLineBreakView();\n\t\t\t\t}\n\n\t\t\t\treturn factory.create( name );\n\t\t\t} )\n\t\t\t.filter( item => item );\n\n\t\tthis.items.addMany( itemsToAdd );\n\t}\n\n\t/**\n\t * Cleans up the {@link module:ui/toolbar/toolbarview~ToolbarView#items} of the toolbar by removing unwanted items and\n\t * duplicated (obsolete) separators or line breaks.\n\t *\n\t * @private\n\t * @param {Array.<String>} items The toolbar items configuration.\n\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n\t * @param {Array.<String>} removeItems An array of items names to be removed from the configuration.\n\t * @returns {Array.<String>}  Items after the clean-up.\n\t */\n\t_cleanItemsConfiguration( items, factory, removeItems ) {\n\t\tconst filteredItems = items\n\t\t\t.filter( ( name, idx, items ) => {\n\t\t\t\tif ( name === '|' ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Items listed in `config.removeItems` should not be added to the toolbar.\n\t\t\t\tif ( removeItems.indexOf( name ) !== -1 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif ( name === '-' ) {\n\t\t\t\t\t// The toolbar line breaks must not be rendered when toolbar grouping is enabled.\n\t\t\t\t\t// (https://github.com/ckeditor/ckeditor5/issues/8582)\n\t\t\t\t\tif ( this.options.shouldGroupWhenFull ) {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * The toolbar multiline breaks (`-` items) only work when the automatic button grouping\n\t\t\t\t\t\t * is disabled in the toolbar configuration.\n\t\t\t\t\t\t * To do this, set the `shouldNotGroupWhenFull` option to `true` in the editor configuration:\n\t\t\t\t\t\t *\n\t\t\t\t\t\t *\t\tconst config = {\n\t\t\t\t\t\t *\t\t\ttoolbar: {\n\t\t\t\t\t\t *\t\t\t\titems: [ ... ],\n\t\t\t\t\t\t *\t\t\t\tshouldNotGroupWhenFull: true\n\t\t\t\t\t\t *\t\t\t}\n\t\t\t\t\t\t *\t\t}\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @error toolbarview-line-break-ignored-when-grouping-items\n\t\t\t\t\t\t */\n\t\t\t\t\t\tlogWarning( 'toolbarview-line-break-ignored-when-grouping-items', items );\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// For the items that cannot be instantiated we are sending warning message. We also filter them out.\n\t\t\t\tif ( !isObject( name ) && !factory.has( name ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n\t\t\t\t\t * name does not exist so it was omitted when rendering the toolbar.\n\t\t\t\t\t *\n\t\t\t\t\t * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n\t\t\t\t\t * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n\t\t\t\t\t *\n\t\t\t\t\t * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n\t\t\t\t\t * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n\t\t\t\t\t *\n\t\t\t\t\t * You can use the following snippet to retrieve all available toolbar items:\n\t\t\t\t\t *\n\t\t\t\t\t *\t\tArray.from( editor.ui.componentFactory.names() );\n\t\t\t\t\t *\n\t\t\t\t\t * @error toolbarview-item-unavailable\n\t\t\t\t\t * @param {String} name The name of the component.\n\t\t\t\t\t */\n\t\t\t\t\tlogWarning( 'toolbarview-item-unavailable', { name } );\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} );\n\n\t\treturn this._cleanSeparatorsAndLineBreaks( filteredItems );\n\t}\n\n\t/**\n\t * Remove leading, trailing, and duplicated separators (`-` and `|`).\n\t *\n\t * @private\n\t * @param {Array.<String>} items\n\t * @returns {Array.<String>} Toolbar items after the separator and line break clean-up.\n\t */\n\t_cleanSeparatorsAndLineBreaks( items ) {\n\t\tconst nonSeparatorPredicate = item => ( item !== '-' && item !== '|' );\n\t\tconst count = items.length;\n\n\t\t// Find an index of the first item that is not a separator.\n\t\tconst firstCommandItemIndex = items.findIndex( nonSeparatorPredicate );\n\n\t\t// Items include separators only. There is no point in displaying them.\n\t\tif ( firstCommandItemIndex === -1 ) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Search from the end of the list, then convert found index back to the original direction.\n\t\tconst lastCommandItemIndex = count - items\n\t\t\t.slice()\n\t\t\t.reverse()\n\t\t\t.findIndex( nonSeparatorPredicate );\n\n\t\treturn items\n\t\t\t// Return items without the leading and trailing separators.\n\t\t\t.slice( firstCommandItemIndex, lastCommandItemIndex )\n\t\t\t// Remove duplicated separators.\n\t\t\t.filter( ( name, idx, items ) => {\n\t\t\t\t// Filter only separators.\n\t\t\t\tif ( nonSeparatorPredicate( name ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tconst isDuplicated = idx > 0 && items[ idx - 1 ] === name;\n\n\t\t\t\treturn !isDuplicated;\n\t\t\t} );\n\t}\n\n\t/**\n\t * Creates a user-defined dropdown containing a toolbar with items.\n\t *\n\t * @private\n\t * @param {Object} definition A definition of the nested toolbar dropdown.\n\t * @param {String} definition.label A label of the dropdown.\n\t * @param {String|Boolean} [definition.icon] An icon of the drop-down. One of 'bold', 'plus', 'text', 'importExport', 'alignLeft',\n\t * 'paragraph' or an SVG string. When `false` is passed, no icon will be used.\n\t * @param {Boolean} [definition.withText=false] When set `true`, the label of the dropdown will be visible. See\n\t * {@link module:ui/button/buttonview~ButtonView#withText} to learn more.\n\t * @param {Boolean|String|Function} [definition.tooltip=true] A tooltip of the dropdown button. See\n\t * {@link module:ui/button/buttonview~ButtonView#tooltip} to learn more.\n\t * @param {module:ui/componentfactory~ComponentFactory} componentFactory Component factory used to create items\n\t * of the nested toolbar.\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n\t_createNestedToolbarDropdown( definition, componentFactory, removeItems ) {\n\t\tlet { label, icon, items, tooltip = true, withText = false } = definition;\n\n\t\titems = this._cleanItemsConfiguration( items, componentFactory, removeItems );\n\n\t\t// There is no point in rendering a dropdown without items.\n\t\tif ( !items.length ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst locale = this.locale;\n\t\tconst dropdownView = createDropdown( locale );\n\n\t\tif ( !label ) {\n\t\t\t/**\n\t\t\t * A dropdown definition in the toolbar configuration is missing a text label.\n\t\t\t *\n\t\t\t * Without a label, the dropdown becomes inaccessible to users relying on assistive technologies.\n\t\t\t * Make sure the `label` property is set in your drop-down configuration:\n\t\t\t *\n \t\t\t *\t\t{\n \t\t\t *\t\t\tlabel: 'A human-readable label',\n\t\t\t *\t\t\ticon: '...',\n\t\t\t *\t\t\titems: [ ... ]\n \t\t\t *\t\t},\n\t\t\t *\n\t\t\t * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n\t\t\t *\n\t\t\t * @error toolbarview-nested-toolbar-dropdown-missing-label\n\t\t\t */\n\t\t\tlogWarning( 'toolbarview-nested-toolbar-dropdown-missing-label', definition );\n\t\t}\n\n\t\tdropdownView.class = 'ck-toolbar__nested-toolbar-dropdown';\n\t\tdropdownView.buttonView.set( {\n\t\t\tlabel,\n\t\t\ttooltip,\n\t\t\twithText: !!withText\n\t\t} );\n\n\t\t// Allow disabling icon by passing false.\n\t\tif ( icon !== false ) {\n\t\t\t// A pre-defined icon picked by name, SVG string, a fallback (default) icon.\n\t\t\tdropdownView.buttonView.icon = NESTED_TOOLBAR_ICONS[ icon ] || icon || NESTED_TOOLBAR_ICONS.threeVerticalDots;\n\t\t}\n\t\t// If the icon is disabled, display the label automatically.\n\t\telse {\n\t\t\tdropdownView.buttonView.withText = true;\n\t\t}\n\n\t\taddToolbarToDropdown( dropdownView, [] );\n\n\t\tdropdownView.toolbarView.fillFromConfig( items, componentFactory, removeItems );\n\n\t\treturn dropdownView;\n\t}\n\n\t/**\n\t * Fired when some toolbar {@link #items} were grouped or ungrouped as a result of some change\n\t * in the toolbar geometry.\n\t *\n\t * **Note**: This event is always fired **once** regardless of the number of items that were be\n\t * grouped or ungrouped at a time.\n\t *\n\t * **Note**: This event is fired only if the items grouping functionality was enabled in\n\t * the first place (see {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}).\n\t *\n\t * @event groupedItemsUpdate\n\t */\n}\n\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n *\n * @private\n * @extends module:ui/view~View\n */\nclass ItemsView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * A collection of items (buttons, dropdowns, etc.).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar__items'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n}\n\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass StaticLayout {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n\t * behavior.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\tconstructor( view ) {\n\t\tconst bind = view.bindTemplate;\n\n\t\t// Static toolbar can be vertical when needed.\n\t\tview.set( 'isVertical', false );\n\n\t\t// 1:1 pass–through binding, all ToolbarView#items are visible.\n\t\tview.itemsView.children.bindTo( view.items ).using( item => item );\n\n\t\t// 1:1 pass–through binding, all ToolbarView#items are focusable.\n\t\tview.focusables.bindTo( view.items ).using( item => item );\n\n\t\tview.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t// When vertical, the toolbar has an additional CSS class.\n\t\t\t\t\tbind.if( 'isVertical', 'ck-toolbar_vertical' )\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {}\n}\n\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow --------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass DynamicGrouping {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n\t * behavior.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\tconstructor( view ) {\n\t\t/**\n\t\t * A toolbar view this behavior belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar~ToolbarView}\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * A collection of toolbar children.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.viewChildren = view.children;\n\n\t\t/**\n\t\t * A collection of focusable toolbar elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.viewFocusables = view.focusables;\n\n\t\t/**\n\t\t * A view containing toolbar items.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ItemsView}\n\t\t */\n\t\tthis.viewItemsView = view.itemsView;\n\n\t\t/**\n\t\t * Toolbar focus tracker.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.viewFocusTracker = view.focusTracker;\n\n\t\t/**\n\t\t * Toolbar locale.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.viewLocale = view.locale;\n\n\t\t/**\n\t\t * Toolbar element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} #viewElement\n\t\t */\n\n\t\t/**\n\t\t * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n\t\t * Aggregates items that fit into a single row of the toolbar and were not {@link #groupedItems grouped}\n\t\t * into a {@link #groupedItemsDropdown dropdown}. Items of this collection are displayed in the\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarView#itemsView}.\n\t\t *\n\t\t * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped, it\n\t\t * matches the {@link module:ui/toolbar/toolbarview~ToolbarView#items} collection in size and order.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.ungroupedItems = view.createCollection();\n\n\t\t/**\n\t\t * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n\t\t * A collection of the toolbar items that do not fit into a single row of the toolbar.\n\t\t * Grouped items are displayed in a dedicated {@link #groupedItemsDropdown dropdown}.\n\t\t *\n\t\t * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped,\n\t\t * this collection is empty.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.groupedItems = view.createCollection();\n\n\t\t/**\n\t\t * The dropdown that aggregates {@link #groupedItems grouped items} that do not fit into a single\n\t\t * row of the toolbar. It is displayed on demand as the last of\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarView#children toolbar children} and offers another\n\t\t * (nested) toolbar which displays items that would normally overflow.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownview~DropdownView}\n\t\t */\n\t\tthis.groupedItemsDropdown = this._createGroupedItemsDropdown();\n\n\t\t/**\n\t\t * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n\t\t * and manage items that do not fit into a single row.\n\t\t *\n\t\t * **Note:** Created in {@link #_enableGroupingOnResize}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/dom/resizeobserver~ResizeObserver}\n\t\t */\n\t\tthis.resizeObserver = null;\n\n\t\t/**\n\t\t * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n\t\t * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n\t\t * a single toolbar line. This value can be reused between updates because it is unlikely that\n\t\t * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.cachedPadding = null;\n\n\t\t/**\n\t\t * A flag indicating that an items grouping update has been queued (e.g. due to the toolbar being visible)\n\t\t * and should be executed immediately the next time the toolbar shows up.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.shouldUpdateGroupingOnNextResize = false;\n\n\t\t// Only those items that were not grouped are visible to the user.\n\t\tview.itemsView.children.bindTo( this.ungroupedItems ).using( item => item );\n\n\t\t// Make sure all #items visible in the main space of the toolbar are \"focuscycleable\".\n\t\tthis.ungroupedItems.on( 'add', this._updateFocusCycleableItems.bind( this ) );\n\t\tthis.ungroupedItems.on( 'remove', this._updateFocusCycleableItems.bind( this ) );\n\n\t\t// Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n\t\tview.children.on( 'add', this._updateFocusCycleableItems.bind( this ) );\n\t\tview.children.on( 'remove', this._updateFocusCycleableItems.bind( this ) );\n\n\t\t// ToolbarView#items is dynamic. When an item is added or removed, it should be automatically\n\t\t// represented in either grouped or ungrouped items at the right index.\n\t\t// In other words #items == concat( #ungroupedItems, #groupedItems )\n\t\t// (in length and order).\n\t\tview.items.on( 'change', ( evt, changeData ) => {\n\t\t\tconst index = changeData.index;\n\n\t\t\t// Removing.\n\t\t\tfor ( const removedItem of changeData.removed ) {\n\t\t\t\tif ( index >= this.ungroupedItems.length ) {\n\t\t\t\t\tthis.groupedItems.remove( removedItem );\n\t\t\t\t} else {\n\t\t\t\t\tthis.ungroupedItems.remove( removedItem );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adding.\n\t\t\tfor ( let currentIndex = index; currentIndex < index + changeData.added.length; currentIndex++ ) {\n\t\t\t\tconst addedItem = changeData.added[ currentIndex - index ];\n\n\t\t\t\tif ( currentIndex > this.ungroupedItems.length ) {\n\t\t\t\t\tthis.groupedItems.add( addedItem, currentIndex - this.ungroupedItems.length );\n\t\t\t\t} else {\n\t\t\t\t\tthis.ungroupedItems.add( addedItem, currentIndex );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// When new ungrouped items join in and land in #ungroupedItems, there's a chance it causes\n\t\t\t// the toolbar to overflow.\n\t\t\t// Consequently if removed from grouped or ungrouped items, there is a chance\n\t\t\t// some new space is available and we could do some ungrouping.\n\t\t\tthis._updateGrouping();\n\t\t} );\n\n\t\tview.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t// To group items dynamically, the toolbar needs a dedicated CSS class.\n\t\t\t\t\t'ck-toolbar_grouping'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Enables dynamic items grouping based on the dimensions of the toolbar.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\trender( view ) {\n\t\tthis.viewElement = view.element;\n\n\t\tthis._enableGroupingOnResize();\n\t\tthis._enableGroupingOnMaxWidthChange( view );\n\t}\n\n\t/**\n\t * Cleans up the internals used by this behavior.\n\t */\n\tdestroy() {\n\t\t// The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n\t\t// so let's make sure it's actually destroyed along with the toolbar.\n\t\tthis.groupedItemsDropdown.destroy();\n\n\t\tthis.resizeObserver.destroy();\n\t}\n\n\t/**\n\t * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n\t * and it will move them to the {@link #groupedItems} when it happens.\n\t *\n\t * At the same time, it will also check if there is enough space in the toolbar for the first of the\n\t * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n\t * without the toolbar wrapping.\n\t *\n\t * @protected\n\t */\n\t_updateGrouping() {\n\t\t// Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n\t\t// for instance before #render(), or after render but without a parent or a parent detached\n\t\t// from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n\t\t// nothing else. This happens, for instance, when the toolbar is detached from DOM and\n\t\t// some logic adds or removes its #items.\n\t\tif ( !this.viewElement.ownerDocument.body.contains( this.viewElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not update grouping when the element is invisible. Such toolbar has DOMRect filled with zeros\n\t\t// and that would cause all items to be grouped. Instead, queue the grouping so it runs next time\n\t\t// the toolbar is visible (the next ResizeObserver callback execution). This is handy because\n\t\t// the grouping could be caused by increasing the #maxWidth when the toolbar was invisible and the next\n\t\t// time it shows up, some items could actually be ungrouped (https://github.com/ckeditor/ckeditor5/issues/6575).\n\t\tif ( !isVisible( this.viewElement ) ) {\n\t\t\tthis.shouldUpdateGroupingOnNextResize = true;\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember how many items were initially grouped so at the it is possible to figure out if the number\n\t\t// of grouped items has changed. If the number has changed, geometry of the toolbar has also changed.\n\t\tconst initialGroupedItemsCount = this.groupedItems.length;\n\t\tlet wereItemsGrouped;\n\n\t\t// Group #items as long as some wrap to the next row. This will happen, for instance,\n\t\t// when the toolbar is getting narrow and there is not enough space to display all items in\n\t\t// a single row.\n\t\twhile ( this._areItemsOverflowing ) {\n\t\t\tthis._groupLastItem();\n\n\t\t\twereItemsGrouped = true;\n\t\t}\n\n\t\t// If none were grouped now but there were some items already grouped before,\n\t\t// then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n\t\t// for instance, the toolbar is stretching and there's more space in it than before.\n\t\tif ( !wereItemsGrouped && this.groupedItems.length ) {\n\t\t\t// Ungroup items as long as none are overflowing or there are none to ungroup left.\n\t\t\twhile ( this.groupedItems.length && !this._areItemsOverflowing ) {\n\t\t\t\tthis._ungroupFirstItem();\n\t\t\t}\n\n\t\t\t// If the ungrouping ended up with some item wrapping to the next row,\n\t\t\t// put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n\t\t\t// an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n\t\t\t// clean–up is vital for the algorithm.\n\t\t\tif ( this._areItemsOverflowing ) {\n\t\t\t\tthis._groupLastItem();\n\t\t\t}\n\t\t}\n\n\t\tif ( this.groupedItems.length !== initialGroupedItemsCount ) {\n\t\t\tthis.view.fire( 'groupedItemsUpdate' );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n\t * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _areItemsOverflowing() {\n\t\t// An empty toolbar cannot overflow.\n\t\tif ( !this.ungroupedItems.length ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst element = this.viewElement;\n\t\tconst uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n\t\tconst lastChildRect = new Rect( element.lastChild );\n\t\tconst toolbarRect = new Rect( element );\n\n\t\tif ( !this.cachedPadding ) {\n\t\t\tconst computedStyle = global.window.getComputedStyle( element );\n\t\t\tconst paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n\n\t\t\t// parseInt() is essential because of quirky floating point numbers logic and DOM.\n\t\t\t// If the padding turned out too big because of that, the grouped items dropdown would\n\t\t\t// always look (from the Rect perspective) like it overflows (while it's not).\n\t\t\tthis.cachedPadding = Number.parseInt( computedStyle[ paddingProperty ] );\n\t\t}\n\n\t\tif ( uiLanguageDirection === 'ltr' ) {\n\t\t\treturn lastChildRect.right > toolbarRect.right - this.cachedPadding;\n\t\t} else {\n\t\t\treturn lastChildRect.left < toolbarRect.left + this.cachedPadding;\n\t\t}\n\t}\n\n\t/**\n\t * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n\t * upon resize when there is little space available. Instead, the toolbar items are moved to the\n\t * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n\t *\n\t * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n\t * them in the dropdown if necessary. It will also observe the browser window for size changes in\n\t * the future and respond to them by grouping more items or reverting already grouped back, depending\n\t * on the visual space available.\n\t *\n\t * @private\n\t */\n\t_enableGroupingOnResize() {\n\t\tlet previousWidth;\n\n\t\t// TODO: Consider debounce.\n\t\tthis.resizeObserver = new ResizeObserver( this.viewElement, entry => {\n\t\t\tif ( !previousWidth || previousWidth !== entry.contentRect.width || this.shouldUpdateGroupingOnNextResize ) {\n\t\t\t\tthis.shouldUpdateGroupingOnNextResize = false;\n\n\t\t\t\tthis._updateGrouping();\n\n\t\t\t\tpreviousWidth = entry.contentRect.width;\n\t\t\t}\n\t\t} );\n\n\t\tthis._updateGrouping();\n\t}\n\n\t/**\n\t * Enables the grouping functionality, just like {@link #_enableGroupingOnResize} but the difference is that\n\t * it listens to the changes of {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth} instead.\n\t *\n\t * @private\n\t */\n\t_enableGroupingOnMaxWidthChange( view ) {\n\t\tview.on( 'change:maxWidth', () => {\n\t\t\tthis._updateGrouping();\n\t\t} );\n\t}\n\n\t/**\n\t * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n\t * to the {@link #groupedItems} collection.\n\t *\n\t * The opposite of {@link #_ungroupFirstItem}.\n\t *\n\t * @private\n\t */\n\t_groupLastItem() {\n\t\tif ( !this.groupedItems.length ) {\n\t\t\tthis.viewChildren.add( new ToolbarSeparatorView() );\n\t\t\tthis.viewChildren.add( this.groupedItemsDropdown );\n\t\t\tthis.viewFocusTracker.add( this.groupedItemsDropdown.element );\n\t\t}\n\n\t\tthis.groupedItems.add( this.ungroupedItems.remove( this.ungroupedItems.last ), 0 );\n\t}\n\n\t/**\n\t * Moves the very first item belonging to {@link #groupedItems} back\n\t * to the {@link #ungroupedItems} collection.\n\t *\n\t * The opposite of {@link #_groupLastItem}.\n\t *\n\t * @private\n\t */\n\t_ungroupFirstItem() {\n\t\tthis.ungroupedItems.add( this.groupedItems.remove( this.groupedItems.first ) );\n\n\t\tif ( !this.groupedItems.length ) {\n\t\t\tthis.viewChildren.remove( this.groupedItemsDropdown );\n\t\t\tthis.viewChildren.remove( this.viewChildren.last );\n\t\t\tthis.viewFocusTracker.remove( this.groupedItemsDropdown.element );\n\t\t}\n\t}\n\n\t/**\n\t * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n\t * collection when there is not enough space in the toolbar to display all items in a single row.\n\t *\n\t * @private\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n\t_createGroupedItemsDropdown() {\n\t\tconst locale = this.viewLocale;\n\t\tconst t = locale.t;\n\t\tconst dropdown = createDropdown( locale );\n\n\t\tdropdown.class = 'ck-toolbar__grouped-dropdown';\n\n\t\t// Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n\t\t// (https://github.com/ckeditor/ckeditor5/issues/5608)\n\t\tdropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n\n\t\taddToolbarToDropdown( dropdown, [] );\n\n\t\tdropdown.buttonView.set( {\n\t\t\tlabel: t( 'Show more items' ),\n\t\t\ttooltip: true,\n\t\t\ttooltipPosition: locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw',\n\t\t\ticon: threeVerticalDots\n\t\t} );\n\n\t\t// 1:1 pass–through binding.\n\t\tdropdown.toolbarView.items.bindTo( this.groupedItems ).using( item => item );\n\n\t\treturn dropdown;\n\t}\n\n\t/**\n\t * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}\n\t * collection so it represents the up–to–date state of the UI from the perspective of the user.\n\t *\n\t * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n\t * it must be subject to focus cycling in the toolbar.\n\t *\n\t * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n\t * to learn more about the purpose of this method.\n\t *\n\t * @private\n\t */\n\t_updateFocusCycleableItems() {\n\t\tthis.viewFocusables.clear();\n\n\t\tthis.ungroupedItems.map( item => {\n\t\t\tthis.viewFocusables.add( item );\n\t\t} );\n\n\t\tif ( this.groupedItems.length ) {\n\t\t\tthis.viewFocusables.add( this.groupedItemsDropdown );\n\t\t}\n\t}\n}\n\n/**\n * Options passed to the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n *\n * @interface module:ui/toolbar/toolbarview~ToolbarOptions\n */\n\n/**\n * When set to `true`, the toolbar will automatically group {@link module:ui/toolbar/toolbarview~ToolbarView#items} that\n * would normally wrap to the next line when there is not enough space to display them in a single row, for\n * instance, if the parent container of the toolbar is narrow. For toolbars in absolutely positioned containers\n * without width restrictions also the {@link module:ui/toolbar/toolbarview~ToolbarOptions#isFloating} option is required to be `true`.\n *\n * See also: {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth}.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull\n */\n\n/**\n * This option should be enabled for toolbars in absolutely positioned containers without width restrictions\n * to enable automatic {@link module:ui/toolbar/toolbarview~ToolbarView#items} grouping.\n * When this option is set to `true`, the items will stop wrapping to the next line\n * and together with {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull},\n * this will allow grouping them when there is not enough space in a single row.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#isFloating\n */\n\n/**\n * A class interface defining the behavior of the {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * Toolbar behaviors extend its look and functionality and have an impact on the\n * {@link module:ui/toolbar/toolbarview~ToolbarView#element} template or\n * {@link module:ui/toolbar/toolbarview~ToolbarView#render rendering}. They can be enabled\n * conditionally, e.g. depending on the configuration of the toolbar.\n *\n * @private\n * @interface module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n\n/**\n * Creates a new toolbar behavior instance.\n *\n * The instance is created in the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n * This is the right place to extend the {@link module:ui/toolbar/toolbarview~ToolbarView#template} of\n * the toolbar, define extra toolbar properties, etc.\n *\n * @method #constructor\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior is added to.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#render rendered}.\n * It can be used to, for example, customize the behavior of the toolbar when its {@link module:ui/toolbar/toolbarview~ToolbarView#element}\n * is available.\n *\n * @readonly\n * @member {Function} #render\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar being rendered.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#destroy destroyed}.\n * It allows cleaning up after the toolbar behavior, for instance, this is the right place to detach\n * event listeners, free up references, etc.\n *\n * @readonly\n * @member {Function} #destroy\n */\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAOA,IAAI,MAAM,SAAS;AAC1B,OAAOC,YAAY,MAAM,4CAA4C;AACrE,OAAOC,WAAW,MAAM,gBAAgB;AACxC,OAAOC,gBAAgB,MAAM,gDAAgD;AAC7E,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,cAAc,MAAM,kDAAkD;AAC7E,OAAOC,cAAc,MAAM,+BAA+B;AAC1D,OAAOC,IAAI,MAAM,wCAAwC;AACzD,OAAOC,SAAS,MAAM,6CAA6C;AACnE,OAAOC,MAAM,MAAM,0CAA0C;AAC7D,SAASC,cAAc,EAAEC,oBAAoB,QAAQ,mBAAmB;AACxE,SAASC,UAAU,QAAQ,6CAA6C;AACxE,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,SAASC,QAAQ,QAAQ,WAAW;AAEpC,OAAOC,iBAAiB,MAAM,8DAA8D;AAE5F,OAAO,4CAA4C;AAEnD,SAASC,KAAK,QAAQ,0BAA0B;AAEhD,MAAMC,oBAAoB,GAAG;EAC5BC,SAAS,EAAEF,KAAK,CAACE,SAAS;EAC1BC,IAAI,EAAEH,KAAK,CAACG,IAAI;EAChBC,YAAY,EAAEJ,KAAK,CAACI,YAAY;EAChCC,SAAS,EAAEL,KAAK,CAACK,SAAS;EAC1BC,IAAI,EAAEN,KAAK,CAACM,IAAI;EAChBC,IAAI,EAAEP,KAAK,CAACO,IAAI;EAChBR,iBAAiB,EAAEC,KAAK,CAACD;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMS,WAAW,SAASzB,IAAI,CAAC;EAC7C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACC0B,WAAW,CAAEC,MAAM,EAAEC,OAAO,EAAG;IAC9B,KAAK,CAAED,MAAM,CAAE;IAEf,MAAME,IAAI,GAAG,IAAI,CAACC,YAAY;IAC9B,MAAMC,CAAC,GAAG,IAAI,CAACA,CAAC;;IAEhB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACH,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;;IAE5B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACI,GAAG,CAAE,WAAW,EAAED,CAAC,CAAE,gBAAgB,CAAE,CAAE;;IAE9C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,GAAG,CAAE,UAAU,EAAE,MAAM,CAAE;;IAE9B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,gBAAgB,EAAE;;IAEpC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,YAAY,GAAG,IAAIlC,YAAY,EAAE;;IAEtC;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmC,UAAU,GAAG,IAAIjC,gBAAgB,EAAE;;IAExC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC6B,GAAG,CAAE,OAAO,CAAE;;IAEnB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,GAAG,CAAE,WAAW,EAAE,KAAK,CAAE;;IAE9B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACK,SAAS,GAAG,IAAIC,SAAS,CAAEX,MAAM,CAAE;;IAExC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACY,QAAQ,GAAG,IAAI,CAACL,gBAAgB,EAAE;IACvC,IAAI,CAACK,QAAQ,CAACC,GAAG,CAAE,IAAI,CAACH,SAAS,CAAE;;IAEnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACI,UAAU,GAAG,IAAI,CAACP,gBAAgB,EAAE;;IAEzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;;IAEE,MAAMQ,KAAK,GAAGf,MAAM,CAACgB,mBAAmB,KAAK,KAAK;IAElD,IAAI,CAACC,YAAY,GAAG,IAAI1C,WAAW,CAAE;MACpCuC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BN,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BU,gBAAgB,EAAE,IAAI,CAA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"},"metadata":{},"sourceType":"module"}