{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/diff\n */\nimport fastDiff from './fastdiff';\n// The following code is based on the \"O(NP) Sequence Comparison Algorithm\"\n// by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n/**\n * Calculates the difference between two arrays or strings producing an array containing a list of changes\n * necessary to transform input into output.\n *\n *\t\tdiff( 'aba', 'acca' ); // [ 'equal', 'insert', 'insert', 'delete', 'equal' ]\n *\n * This function is based on the \"O(NP) Sequence Comparison Algorithm\" by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n * Unfortunately, while it gives the most precise results, its to complex for longer strings/arrow (above 200 items).\n * Therefore, `diff()` automatically switches to {@link module:utils/fastdiff~fastDiff `fastDiff()`} when detecting\n * such a scenario. The return formats of both functions are identical.\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Output array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default === is used.\n * @returns {Array.<module:utils/diff~DiffResult>} Array of changes.\n */\nexport default function diff(a, b, cmp) {\n  // Set the comparator function.\n  cmp = cmp || function (a, b) {\n    return a === b;\n  };\n  const aLength = a.length;\n  const bLength = b.length;\n  // Perform `fastDiff` for longer strings/arrays (see #269).\n  if (aLength > 200 || bLength > 200 || aLength + bLength > 300) {\n    return diff.fastDiff(a, b, cmp, true);\n  }\n  // Temporary action type statics.\n  let _insert, _delete;\n  // Swapped the arrays to use the shorter one as the first one.\n  if (bLength < aLength) {\n    const tmp = a;\n    a = b;\n    b = tmp;\n    // We swap the action types as well.\n    _insert = 'delete';\n    _delete = 'insert';\n  } else {\n    _insert = 'insert';\n    _delete = 'delete';\n  }\n  const m = a.length;\n  const n = b.length;\n  const delta = n - m;\n  // Edit scripts, for each diagonal.\n  const es = {};\n  // Furthest points, the furthest y we can get on each diagonal.\n  const fp = {};\n  function snake(k) {\n    // We use -1 as an alternative below to handle initial values ( instead of filling the fp with -1 first ).\n    // Furthest points (y) on the diagonal below k.\n    const y1 = (fp[k - 1] !== undefined ? fp[k - 1] : -1) + 1;\n    // Furthest points (y) on the diagonal above k.\n    const y2 = fp[k + 1] !== undefined ? fp[k + 1] : -1;\n    // The way we should go to get further.\n    const dir = y1 > y2 ? -1 : 1;\n    // Clone previous changes array (if any).\n    if (es[k + dir]) {\n      es[k] = es[k + dir].slice(0);\n    }\n    // Create changes array.\n    if (!es[k]) {\n      es[k] = [];\n    }\n    // Push the action.\n    es[k].push(y1 > y2 ? _insert : _delete);\n    // Set the beginning coordinates.\n    let y = Math.max(y1, y2);\n    let x = y - k;\n    // Traverse the diagonal as long as the values match.\n    while (x < m && y < n && cmp(a[x], b[y])) {\n      x++;\n      y++;\n      // Push no change action.\n      es[k].push('equal');\n    }\n    return y;\n  }\n  let p = 0;\n  let k;\n  // Traverse the graph until we reach the end of the longer string.\n  do {\n    // Updates furthest points and edit scripts for diagonals below delta.\n    for (k = -p; k < delta; k++) {\n      fp[k] = snake(k);\n    }\n    // Updates furthest points and edit scripts for diagonals above delta.\n    for (k = delta + p; k > delta; k--) {\n      fp[k] = snake(k);\n    }\n    // Updates furthest point and edit script for the delta diagonal.\n    // note that the delta diagonal is the one which goes through the sink (m, n).\n    fp[delta] = snake(delta);\n    p++;\n  } while (fp[delta] !== n);\n  // Return the final list of edit changes.\n  // We remove the first item that represents the action for the injected nulls.\n  return es[delta].slice(1);\n}\n// Store the API in static property to easily overwrite it in tests.\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\ndiff.fastDiff = fastDiff;","map":{"version":3,"names":["fastDiff","diff","a","b","cmp","aLength","length","bLength","_insert","_delete","tmp","m","n","delta","es","fp","snake","k","y1","undefined","y2","dir","slice","push","y","Math","max","x","p"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/diff.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/diff\n */\nimport fastDiff from './fastdiff';\n// The following code is based on the \"O(NP) Sequence Comparison Algorithm\"\n// by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n/**\n * Calculates the difference between two arrays or strings producing an array containing a list of changes\n * necessary to transform input into output.\n *\n *\t\tdiff( 'aba', 'acca' ); // [ 'equal', 'insert', 'insert', 'delete', 'equal' ]\n *\n * This function is based on the \"O(NP) Sequence Comparison Algorithm\" by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n * Unfortunately, while it gives the most precise results, its to complex for longer strings/arrow (above 200 items).\n * Therefore, `diff()` automatically switches to {@link module:utils/fastdiff~fastDiff `fastDiff()`} when detecting\n * such a scenario. The return formats of both functions are identical.\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Output array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default === is used.\n * @returns {Array.<module:utils/diff~DiffResult>} Array of changes.\n */\nexport default function diff(a, b, cmp) {\n    // Set the comparator function.\n    cmp = cmp || function (a, b) {\n        return a === b;\n    };\n    const aLength = a.length;\n    const bLength = b.length;\n    // Perform `fastDiff` for longer strings/arrays (see #269).\n    if (aLength > 200 || bLength > 200 || aLength + bLength > 300) {\n        return diff.fastDiff(a, b, cmp, true);\n    }\n    // Temporary action type statics.\n    let _insert, _delete;\n    // Swapped the arrays to use the shorter one as the first one.\n    if (bLength < aLength) {\n        const tmp = a;\n        a = b;\n        b = tmp;\n        // We swap the action types as well.\n        _insert = 'delete';\n        _delete = 'insert';\n    }\n    else {\n        _insert = 'insert';\n        _delete = 'delete';\n    }\n    const m = a.length;\n    const n = b.length;\n    const delta = n - m;\n    // Edit scripts, for each diagonal.\n    const es = {};\n    // Furthest points, the furthest y we can get on each diagonal.\n    const fp = {};\n    function snake(k) {\n        // We use -1 as an alternative below to handle initial values ( instead of filling the fp with -1 first ).\n        // Furthest points (y) on the diagonal below k.\n        const y1 = (fp[k - 1] !== undefined ? fp[k - 1] : -1) + 1;\n        // Furthest points (y) on the diagonal above k.\n        const y2 = fp[k + 1] !== undefined ? fp[k + 1] : -1;\n        // The way we should go to get further.\n        const dir = y1 > y2 ? -1 : 1;\n        // Clone previous changes array (if any).\n        if (es[k + dir]) {\n            es[k] = es[k + dir].slice(0);\n        }\n        // Create changes array.\n        if (!es[k]) {\n            es[k] = [];\n        }\n        // Push the action.\n        es[k].push(y1 > y2 ? _insert : _delete);\n        // Set the beginning coordinates.\n        let y = Math.max(y1, y2);\n        let x = y - k;\n        // Traverse the diagonal as long as the values match.\n        while (x < m && y < n && cmp(a[x], b[y])) {\n            x++;\n            y++;\n            // Push no change action.\n            es[k].push('equal');\n        }\n        return y;\n    }\n    let p = 0;\n    let k;\n    // Traverse the graph until we reach the end of the longer string.\n    do {\n        // Updates furthest points and edit scripts for diagonals below delta.\n        for (k = -p; k < delta; k++) {\n            fp[k] = snake(k);\n        }\n        // Updates furthest points and edit scripts for diagonals above delta.\n        for (k = delta + p; k > delta; k--) {\n            fp[k] = snake(k);\n        }\n        // Updates furthest point and edit script for the delta diagonal.\n        // note that the delta diagonal is the one which goes through the sink (m, n).\n        fp[delta] = snake(delta);\n        p++;\n    } while (fp[delta] !== n);\n    // Return the final list of edit changes.\n    // We remove the first item that represents the action for the injected nulls.\n    return es[delta].slice(1);\n}\n// Store the API in static property to easily overwrite it in tests.\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\ndiff.fastDiff = fastDiff;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}