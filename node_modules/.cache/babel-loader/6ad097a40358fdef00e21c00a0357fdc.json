{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Set of utils to handle unicode characters.\n *\n * @module utils/unicode\n */\n/**\n * Checks whether given `character` is a combining mark.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isCombiningMark(character) {\n  // eslint-disable-next-line no-misleading-character-class\n  return !!character && character.length == 1 && /[\\u0300-\\u036f\\u1ab0-\\u1aff\\u1dc0-\\u1dff\\u20d0-\\u20ff\\ufe20-\\ufe2f]/.test(character);\n}\n/**\n * Checks whether given `character` is a high half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isHighSurrogateHalf(character) {\n  return !!character && character.length == 1 && /[\\ud800-\\udbff]/.test(character);\n}\n/**\n * Checks whether given `character` is a low half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isLowSurrogateHalf(character) {\n  return !!character && character.length == 1 && /[\\udc00-\\udfff]/.test(character);\n}\n/**\n * Checks whether given offset in a string is inside a surrogate pair (between two surrogate halves).\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideSurrogatePair(string, offset) {\n  return isHighSurrogateHalf(string.charAt(offset - 1)) && isLowSurrogateHalf(string.charAt(offset));\n}\n/**\n * Checks whether given offset in a string is between base character and combining mark or between two combining marks.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideCombinedSymbol(string, offset) {\n  return isCombiningMark(string.charAt(offset));\n}\nconst EMOJI_PATTERN = buildEmojiRegexp();\n/**\n * Checks whether given offset in a string is inside multi-character emoji sequence.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideEmojiSequence(string, offset) {\n  const matches = String(string).matchAll(EMOJI_PATTERN);\n  return Array.from(matches).some(match => match.index < offset && offset < match.index + match[0].length);\n}\nfunction buildEmojiRegexp() {\n  const parts = [\n  // Emoji Tag Sequence (ETS)\n  /\\p{Emoji}[\\u{E0020}-\\u{E007E}]+\\u{E007F}/u,\n  // Emoji Keycap Sequence\n  /\\p{Emoji}\\u{FE0F}?\\u{20E3}/u,\n  // Emoji Presentation Sequence\n  /\\p{Emoji}\\u{FE0F}/u,\n  // Single-Character Emoji / Emoji Modifier Sequence\n  /(?=\\p{General_Category=Other_Symbol})\\p{Emoji}\\p{Emoji_Modifier}*/u];\n  const flagSequence = /\\p{Regional_Indicator}{2}/u.source;\n  const emoji = '(?:' + parts.map(part => part.source).join('|') + ')';\n  const sequence = `${flagSequence}|${emoji}(?:\\u{200D}${emoji})*`;\n  return new RegExp(sequence, 'ug');\n}","map":{"version":3,"names":["isCombiningMark","character","length","test","isHighSurrogateHalf","isLowSurrogateHalf","isInsideSurrogatePair","string","offset","charAt","isInsideCombinedSymbol","EMOJI_PATTERN","buildEmojiRegexp","isInsideEmojiSequence","matches","String","matchAll","Array","from","some","match","index","parts","flagSequence","source","emoji","map","part","join","sequence","RegExp"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/unicode.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Set of utils to handle unicode characters.\n *\n * @module utils/unicode\n */\n/**\n * Checks whether given `character` is a combining mark.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isCombiningMark(character) {\n    // eslint-disable-next-line no-misleading-character-class\n    return !!character && character.length == 1 && /[\\u0300-\\u036f\\u1ab0-\\u1aff\\u1dc0-\\u1dff\\u20d0-\\u20ff\\ufe20-\\ufe2f]/.test(character);\n}\n/**\n * Checks whether given `character` is a high half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isHighSurrogateHalf(character) {\n    return !!character && character.length == 1 && /[\\ud800-\\udbff]/.test(character);\n}\n/**\n * Checks whether given `character` is a low half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isLowSurrogateHalf(character) {\n    return !!character && character.length == 1 && /[\\udc00-\\udfff]/.test(character);\n}\n/**\n * Checks whether given offset in a string is inside a surrogate pair (between two surrogate halves).\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideSurrogatePair(string, offset) {\n    return isHighSurrogateHalf(string.charAt(offset - 1)) && isLowSurrogateHalf(string.charAt(offset));\n}\n/**\n * Checks whether given offset in a string is between base character and combining mark or between two combining marks.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideCombinedSymbol(string, offset) {\n    return isCombiningMark(string.charAt(offset));\n}\nconst EMOJI_PATTERN = buildEmojiRegexp();\n/**\n * Checks whether given offset in a string is inside multi-character emoji sequence.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideEmojiSequence(string, offset) {\n    const matches = String(string).matchAll(EMOJI_PATTERN);\n    return Array.from(matches).some(match => match.index < offset && offset < match.index + match[0].length);\n}\nfunction buildEmojiRegexp() {\n    const parts = [\n        // Emoji Tag Sequence (ETS)\n        /\\p{Emoji}[\\u{E0020}-\\u{E007E}]+\\u{E007F}/u,\n        // Emoji Keycap Sequence\n        /\\p{Emoji}\\u{FE0F}?\\u{20E3}/u,\n        // Emoji Presentation Sequence\n        /\\p{Emoji}\\u{FE0F}/u,\n        // Single-Character Emoji / Emoji Modifier Sequence\n        /(?=\\p{General_Category=Other_Symbol})\\p{Emoji}\\p{Emoji_Modifier}*/u\n    ];\n    const flagSequence = /\\p{Regional_Indicator}{2}/u.source;\n    const emoji = '(?:' + parts.map(part => part.source).join('|') + ')';\n    const sequence = `${flagSequence}|${emoji}(?:\\u{200D}${emoji})*`;\n    return new RegExp(sequence, 'ug');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAe,CAACC,SAAS,EAAE;EACvC;EACA,OAAO,CAAC,CAACA,SAAS,IAAIA,SAAS,CAACC,MAAM,IAAI,CAAC,IAAI,qEAAqE,CAACC,IAAI,CAACF,SAAS,CAAC;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,mBAAmB,CAACH,SAAS,EAAE;EAC3C,OAAO,CAAC,CAACA,SAAS,IAAIA,SAAS,CAACC,MAAM,IAAI,CAAC,IAAI,iBAAiB,CAACC,IAAI,CAACF,SAAS,CAAC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,kBAAkB,CAACJ,SAAS,EAAE;EAC1C,OAAO,CAAC,CAACA,SAAS,IAAIA,SAAS,CAACC,MAAM,IAAI,CAAC,IAAI,iBAAiB,CAACC,IAAI,CAACF,SAAS,CAAC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,qBAAqB,CAACC,MAAM,EAAEC,MAAM,EAAE;EAClD,OAAOJ,mBAAmB,CAACG,MAAM,CAACE,MAAM,CAACD,MAAM,GAAG,CAAC,CAAC,CAAC,IAAIH,kBAAkB,CAACE,MAAM,CAACE,MAAM,CAACD,MAAM,CAAC,CAAC;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,sBAAsB,CAACH,MAAM,EAAEC,MAAM,EAAE;EACnD,OAAOR,eAAe,CAACO,MAAM,CAACE,MAAM,CAACD,MAAM,CAAC,CAAC;AACjD;AACA,MAAMG,aAAa,GAAGC,gBAAgB,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqB,CAACN,MAAM,EAAEC,MAAM,EAAE;EAClD,MAAMM,OAAO,GAAGC,MAAM,CAACR,MAAM,CAAC,CAACS,QAAQ,CAACL,aAAa,CAAC;EACtD,OAAOM,KAAK,CAACC,IAAI,CAACJ,OAAO,CAAC,CAACK,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,KAAK,GAAGb,MAAM,IAAIA,MAAM,GAAGY,KAAK,CAACC,KAAK,GAAGD,KAAK,CAAC,CAAC,CAAC,CAAClB,MAAM,CAAC;AAC5G;AACA,SAASU,gBAAgB,GAAG;EACxB,MAAMU,KAAK,GAAG;EACV;EACA,2CAA2C;EAC3C;EACA,6BAA6B;EAC7B;EACA,oBAAoB;EACpB;EACA,oEAAoE,CACvE;EACD,MAAMC,YAAY,GAAG,4BAA4B,CAACC,MAAM;EACxD,MAAMC,KAAK,GAAG,KAAK,GAAGH,KAAK,CAACI,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACH,MAAM,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;EACpE,MAAMC,QAAQ,GAAI,GAAEN,YAAa,IAAGE,KAAM,cAAaA,KAAM,IAAG;EAChE,OAAO,IAAIK,MAAM,CAACD,QAAQ,EAAE,IAAI,CAAC;AACrC"},"metadata":{},"sourceType":"module"}