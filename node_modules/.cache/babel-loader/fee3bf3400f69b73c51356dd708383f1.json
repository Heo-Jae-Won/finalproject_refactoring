{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/block/blocktoolbar\n */\n\n/* global window */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport pilcrow from '@ckeditor/ckeditor5-core/theme/icons/pilcrow.svg';\nimport BlockButtonView from './blockbuttonview';\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview';\nimport ToolbarView from '../toolbarview';\nimport clickOutsideHandler from '../../bindings/clickoutsidehandler';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\nconst toPx = toUnit('px');\n\n/**\n * The block toolbar plugin.\n *\n * This plugin provides a button positioned next to the block of content where the selection is anchored.\n * Upon clicking the button, a dropdown providing access to editor features shows up, as configured in\n * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar}.\n *\n * By default, the button is displayed next to all elements marked in {@link module:engine/model/schema~Schema}\n * as `$block` for which the toolbar provides at least one option.\n *\n * By default, the button is attached so its right boundary is touching the\n * {@link module:engine/view/editableelement~EditableElement}:\n *\n * \t\t __ |\n * \t\t|  ||  This is a block of content that the\n * \t\t ¯¯ |  button is attached to. This is a\n * \t\t    |  block of content that the button is\n * \t\t    |  attached to.\n *\n * The position of the button can be adjusted using the CSS `transform` property:\n *\n * \t\t.ck-block-toolbar-button {\n * \t\t\ttransform: translateX( -10px );\n * \t\t}\n *\n * \t\t __   |\n * \t\t|  |  |  This is a block of content that the\n * \t\t ¯¯   |  button is attached to. This is a\n * \t\t      |  block of content that the button is\n * \t\t      |  attached to.\n *\n * **Note**: If you plan to run the editor in a right–to–left (RTL) language, keep in mind the button\n * will be attached to the **right** boundary of the editable area. In that case, make sure the\n * CSS position adjustment works properly by adding the following styles:\n *\n * \t\t.ck[dir=\"rtl\"] .ck-block-toolbar-button {\n * \t\t\ttransform: translateX( 10px );\n * \t\t}\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockToolbar extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'BlockToolbar';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n\n    /**\n     * A cached and normalized `config.blockToolbar` object.\n     *\n     * @type {module:core/editor/editorconfig~EditorConfig#blockToolbar}\n     * @private\n     */\n    this._blockToolbarConfig = normalizeToolbarConfig(this.editor.config.get('blockToolbar'));\n\n    /**\n     * The toolbar view.\n     *\n     * @type {module:ui/toolbar/toolbarview~ToolbarView}\n     */\n    this.toolbarView = this._createToolbarView();\n\n    /**\n     * The balloon panel view, containing the {@link #toolbarView}.\n     *\n     * @type {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n     */\n    this.panelView = this._createPanelView();\n\n    /**\n     * The button view that opens the {@link #toolbarView}.\n     *\n     * @type {module:ui/toolbar/block/blockbuttonview~BlockButtonView}\n     */\n    this.buttonView = this._createButtonView();\n\n    /**\n     * An instance of the resize observer that allows to respond to changes in editable's geometry\n     * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n     *\n     * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n     * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar configuration}.\n     *\n     * **Note:** Created in {@link #afterInit}.\n     *\n     * @protected\n     * @member {module:utils/dom/resizeobserver~ResizeObserver}\n     */\n    this._resizeObserver = null;\n\n    // Close the #panelView upon clicking outside of the plugin UI.\n    clickOutsideHandler({\n      emitter: this.panelView,\n      contextElements: [this.panelView.element, this.buttonView.element],\n      activator: () => this.panelView.isVisible,\n      callback: () => this._hidePanel()\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    const editor = this.editor;\n\n    // Hides panel on a direct selection change.\n    this.listenTo(editor.model.document.selection, 'change:range', (evt, data) => {\n      if (data.directChange) {\n        this._hidePanel();\n      }\n    });\n    this.listenTo(editor.ui, 'update', () => this._updateButton());\n    // `low` priority is used because of https://github.com/ckeditor/ckeditor5-core/issues/133.\n    this.listenTo(editor, 'change:isReadOnly', () => this._updateButton(), {\n      priority: 'low'\n    });\n    this.listenTo(editor.ui.focusTracker, 'change:isFocused', () => this._updateButton());\n\n    // Reposition button on resize.\n    this.listenTo(this.buttonView, 'change:isVisible', (evt, name, isVisible) => {\n      if (isVisible) {\n        // Keep correct position of button and panel on window#resize.\n        this.buttonView.listenTo(window, 'resize', () => this._updateButton());\n      } else {\n        // Stop repositioning button when is hidden.\n        this.buttonView.stopListening(window, 'resize');\n\n        // Hide the panel when the button disappears.\n        this._hidePanel();\n      }\n    });\n\n    // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n    editor.ui.addToolbar(this.toolbarView, {\n      beforeFocus: () => this._showPanel(),\n      afterBlur: () => this._hidePanel()\n    });\n  }\n\n  /**\n   * Fills the toolbar with its items based on the configuration.\n   *\n   * **Note:** This needs to be done after all plugins are ready.\n   *\n   * @inheritDoc\n   */\n  afterInit() {\n    const factory = this.editor.ui.componentFactory;\n    const config = this._blockToolbarConfig;\n    this.toolbarView.fillFromConfig(config, factory);\n\n    // Hide panel before executing each button in the panel.\n    for (const item of this.toolbarView.items) {\n      item.on('execute', () => this._hidePanel(true), {\n        priority: 'high'\n      });\n    }\n    if (!config.shouldNotGroupWhenFull) {\n      this.listenTo(this.editor, 'ready', () => {\n        const editableElement = this.editor.ui.view.editable.element;\n\n        // Set #toolbarView's max-width just after the initialization and update it on the editable resize.\n        this._resizeObserver = new ResizeObserver(editableElement, () => {\n          this.toolbarView.maxWidth = this._getToolbarMaxWidth();\n        });\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  destroy() {\n    super.destroy();\n\n    // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n    this.panelView.destroy();\n    this.buttonView.destroy();\n    this.toolbarView.destroy();\n    if (this._resizeObserver) {\n      this._resizeObserver.destroy();\n    }\n  }\n\n  /**\n   * Creates the {@link #toolbarView}.\n   *\n   * @private\n   * @returns {module:ui/toolbar/toolbarview~ToolbarView}\n   */\n  _createToolbarView() {\n    const t = this.editor.locale.t;\n    const shouldGroupWhenFull = !this._blockToolbarConfig.shouldNotGroupWhenFull;\n    const toolbarView = new ToolbarView(this.editor.locale, {\n      shouldGroupWhenFull,\n      isFloating: true\n    });\n    toolbarView.ariaLabel = t('Editor block content toolbar');\n\n    // When toolbar lost focus then panel should hide.\n    toolbarView.focusTracker.on('change:isFocused', (evt, name, is) => {\n      if (!is) {\n        this._hidePanel();\n      }\n    });\n    return toolbarView;\n  }\n\n  /**\n   * Creates the {@link #panelView}.\n   *\n   * @private\n   * @returns {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n   */\n  _createPanelView() {\n    const editor = this.editor;\n    const panelView = new BalloonPanelView(editor.locale);\n    panelView.content.add(this.toolbarView);\n    panelView.class = 'ck-toolbar-container';\n    editor.ui.view.body.add(panelView);\n    editor.ui.focusTracker.add(panelView.element);\n\n    // Close #panelView on `Esc` press.\n    this.toolbarView.keystrokes.set('Esc', (evt, cancel) => {\n      this._hidePanel(true);\n      cancel();\n    });\n    return panelView;\n  }\n\n  /**\n   * Creates the {@link #buttonView}.\n   *\n   * @private\n   * @returns {module:ui/toolbar/block/blockbuttonview~BlockButtonView}\n   */\n  _createButtonView() {\n    const editor = this.editor;\n    const t = editor.t;\n    const buttonView = new BlockButtonView(editor.locale);\n    const bind = buttonView.bindTemplate;\n    buttonView.set({\n      label: t('Edit block'),\n      icon: pilcrow,\n      withText: false\n    });\n\n    // Note that this piece over here overrides the default mousedown logic in ButtonView\n    // to make it work with BlockToolbar. See the implementation of the ButtonView class to learn more.\n    buttonView.extendTemplate({\n      on: {\n        mousedown: bind.to(evt => {\n          // On Safari we have to force the focus on a button on click as it's the only browser\n          // that doesn't do that automatically. See #12115.\n          if (env.isSafari && this.panelView.isVisible) {\n            this.toolbarView.focus();\n          }\n\n          // Workaround to #12184, see https://github.com/ckeditor/ckeditor5/issues/12184#issuecomment-1199147964.\n          evt.preventDefault();\n        })\n      }\n    });\n\n    // Bind the panelView observable properties to the buttonView.\n    buttonView.bind('isOn').to(this.panelView, 'isVisible');\n    buttonView.bind('tooltip').to(this.panelView, 'isVisible', isVisible => !isVisible);\n\n    // Toggle the panelView upon buttonView#execute.\n    this.listenTo(buttonView, 'execute', () => {\n      if (!this.panelView.isVisible) {\n        this._showPanel();\n      } else {\n        this._hidePanel(true);\n      }\n    });\n    editor.ui.view.body.add(buttonView);\n    editor.ui.focusTracker.add(buttonView.element);\n    return buttonView;\n  }\n\n  /**\n   * Shows or hides the button.\n   * When all the conditions for displaying the button are matched, it shows the button. Hides otherwise.\n   *\n   * @private\n   */\n  _updateButton() {\n    const editor = this.editor;\n    const model = editor.model;\n    const view = editor.editing.view;\n\n    // Hides the button when the editor is not focused.\n    if (!editor.ui.focusTracker.isFocused) {\n      this._hideButton();\n      return;\n    }\n\n    // Hides the button when the editor switches to the read-only mode.\n    if (editor.isReadOnly) {\n      this._hideButton();\n      return;\n    }\n\n    // Get the first selected block, button will be attached to this element.\n    const modelTarget = Array.from(model.document.selection.getSelectedBlocks())[0];\n\n    // Hides the button when there is no enabled item in toolbar for the current block element.\n    if (!modelTarget || Array.from(this.toolbarView.items).every(item => !item.isEnabled)) {\n      this._hideButton();\n      return;\n    }\n\n    // Get DOM target element.\n    const domTarget = view.domConverter.mapViewToDom(editor.editing.mapper.toViewElement(modelTarget));\n\n    // Show block button.\n    this.buttonView.isVisible = true;\n\n    // Attach block button to target DOM element.\n    this._attachButtonToElement(domTarget);\n\n    // When panel is opened then refresh it position to be properly aligned with block button.\n    if (this.panelView.isVisible) {\n      this._showPanel();\n    }\n  }\n\n  /**\n   * Hides the button.\n   *\n   * @private\n   */\n  _hideButton() {\n    this.buttonView.isVisible = false;\n  }\n\n  /**\n   * Shows the {@link #toolbarView} attached to the {@link #buttonView}.\n   * If the toolbar is already visible, then it simply repositions it.\n   *\n   * @private\n   */\n  _showPanel() {\n    // Usually, the only way to show the toolbar is by pressing the block button. It makes it impossible for\n    // the toolbar to show up when the button is invisible (feature does not make sense for the selection then).\n    // The toolbar navigation using Alt+F10 does not access the button but shows the panel directly using this method.\n    // So we need to check whether this is possible first.\n    if (!this.buttonView.isVisible) {\n      return;\n    }\n    const wasVisible = this.panelView.isVisible;\n\n    // So here's the thing: If there was no initial panelView#show() or these two were in different order, the toolbar\n    // positioning will break in RTL editors. Weird, right? What you show know is that the toolbar\n    // grouping works thanks to:\n    //\n    // * the ResizeObserver, which kicks in as soon as the toolbar shows up in DOM (becomes visible again).\n    // * the observable ToolbarView#maxWidth, which triggers re-grouping when changed.\n    //\n    // Here are the possible scenarios:\n    //\n    // 1. (WRONG ❌) If the #maxWidth is set when the toolbar is invisible, it won't affect item grouping (no DOMRects, no grouping).\n    //    Then, when panelView.pin() is called, the position of the toolbar will be calculated for the old\n    //    items grouping state, and when finally ResizeObserver kicks in (hey, the toolbar is visible now, right?)\n    //    it will group/ungroup some items and the length of the toolbar will change. But since in RTL the toolbar\n    //    is attached on the right side and the positioning uses CSS \"left\", it will result in the toolbar shifting\n    //    to the left and being displayed in the wrong place.\n    // 2. (WRONG ❌) If the panelView.pin() is called first and #maxWidth set next, then basically the story repeats. The balloon\n    //    calculates the position for the old toolbar grouping state, then the toolbar re-groups items and because\n    //    it is positioned using CSS \"left\" it will move.\n    // 3. (RIGHT ✅) We show the panel first (the toolbar does re-grouping but it does not matter), then the #maxWidth\n    //    is set allowing the toolbar to re-group again and finally panelView.pin() does the positioning when the\n    //    items grouping state is stable and final.\n    //\n    // https://github.com/ckeditor/ckeditor5/issues/6449, https://github.com/ckeditor/ckeditor5/issues/6575\n    this.panelView.show();\n    this.toolbarView.maxWidth = this._getToolbarMaxWidth();\n    this.panelView.pin({\n      target: this.buttonView.element,\n      limiter: this.editor.ui.getEditableElement()\n    });\n    if (!wasVisible) {\n      this.toolbarView.items.get(0).focus();\n    }\n  }\n\n  /**\n   * Hides the {@link #toolbarView}.\n   *\n   * @private\n   * @param {Boolean} [focusEditable=false] When `true`, the editable will be focused after hiding the panel.\n   */\n  _hidePanel(focusEditable) {\n    this.panelView.isVisible = false;\n    if (focusEditable) {\n      this.editor.editing.view.focus();\n    }\n  }\n\n  /**\n   * Attaches the {@link #buttonView} to the target block of content.\n   *\n   * @protected\n   * @param {HTMLElement} targetElement Target element.\n   */\n  _attachButtonToElement(targetElement) {\n    const contentStyles = window.getComputedStyle(targetElement);\n    const editableRect = new Rect(this.editor.ui.getEditableElement());\n    const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n    // When line height is not an integer then thread it as \"normal\".\n    // MDN says that 'normal' == ~1.2 on desktop browsers.\n    const contentLineHeight = parseInt(contentStyles.lineHeight, 10) || parseInt(contentStyles.fontSize, 10) * 1.2;\n    const position = getOptimalPosition({\n      element: this.buttonView.element,\n      target: targetElement,\n      positions: [(contentRect, buttonRect) => {\n        let left;\n        if (this.editor.locale.uiLanguageDirection === 'ltr') {\n          left = editableRect.left - buttonRect.width;\n        } else {\n          left = editableRect.right;\n        }\n        return {\n          top: contentRect.top + contentPaddingTop + (contentLineHeight - buttonRect.height) / 2,\n          left\n        };\n      }]\n    });\n    this.buttonView.top = position.top;\n    this.buttonView.left = position.left;\n  }\n\n  /**\n   * Gets the {@link #toolbarView} max-width, based on\n   * editable width plus distance between farthest edge of the {@link #buttonView} and the editable.\n   *\n   * @private\n   * @returns {String} maxWidth A maximum width that toolbar can have, in pixels.\n   */\n  _getToolbarMaxWidth() {\n    const editableElement = this.editor.ui.view.editable.element;\n    const editableRect = new Rect(editableElement);\n    const buttonRect = new Rect(this.buttonView.element);\n    const isRTL = this.editor.locale.uiLanguageDirection === 'rtl';\n    const offset = isRTL ? buttonRect.left - editableRect.right + buttonRect.width : editableRect.left - buttonRect.left;\n    return toPx(editableRect.width + offset);\n  }\n}\n\n/**\n * The block toolbar configuration. Used by the {@link module:ui/toolbar/block/blocktoolbar~BlockToolbar}\n * feature.\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: [ 'paragraph', 'heading1', 'heading2', 'bulletedList', 'numberedList' ]\n *\t\t};\n *\n * You can also use `'|'` to create a separator between groups of items:\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: [ 'paragraph', 'heading1', 'heading2', '|', 'bulletedList', 'numberedList' ]\n *\t\t};\n *\n * ## Configuring items grouping\n *\n * You can prevent automatic items grouping by setting the `shouldNotGroupWhenFull` option:\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: {\n *\t\t\t\titems: [ 'paragraph', 'heading1', 'heading2', '|', 'bulletedList', 'numberedList' ],\n *\t\t\t\tshouldNotGroupWhenFull: true\n *\t\t\t},\n *\t\t};\n *\n * Read more about configuring the main editor toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>|Object} module:core/editor/editorconfig~EditorConfig#blockToolbar\n */","map":{"version":3,"names":["Plugin","pilcrow","BlockButtonView","BalloonPanelView","ToolbarView","clickOutsideHandler","getOptimalPosition","Rect","normalizeToolbarConfig","ResizeObserver","toUnit","env","toPx","BlockToolbar","pluginName","constructor","editor","_blockToolbarConfig","config","get","toolbarView","_createToolbarView","panelView","_createPanelView","buttonView","_createButtonView","_resizeObserver","emitter","contextElements","element","activator","isVisible","callback","_hidePanel","init","listenTo","model","document","selection","evt","data","directChange","ui","_updateButton","priority","focusTracker","name","window","stopListening","addToolbar","beforeFocus","_showPanel","afterBlur","afterInit","factory","componentFactory","fillFromConfig","item","items","on","shouldNotGroupWhenFull","editableElement","view","editable","maxWidth","_getToolbarMaxWidth","destroy","t","locale","shouldGroupWhenFull","isFloating","ariaLabel","is","content","add","class","body","keystrokes","set","cancel","bind","bindTemplate","label","icon","withText","extendTemplate","mousedown","to","isSafari","focus","preventDefault","editing","isFocused","_hideButton","isReadOnly","modelTarget","Array","from","getSelectedBlocks","every","isEnabled","domTarget","domConverter","mapViewToDom","mapper","toViewElement","_attachButtonToElement","wasVisible","show","pin","target","limiter","getEditableElement","focusEditable","targetElement","contentStyles","getComputedStyle","editableRect","contentPaddingTop","parseInt","paddingTop","contentLineHeight","lineHeight","fontSize","position","positions","contentRect","buttonRect","left","uiLanguageDirection","width","right","top","height","isRTL","offset"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-ui/src/toolbar/block/blocktoolbar.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/block/blocktoolbar\n */\n\n/* global window */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport pilcrow from '@ckeditor/ckeditor5-core/theme/icons/pilcrow.svg';\n\nimport BlockButtonView from './blockbuttonview';\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview';\nimport ToolbarView from '../toolbarview';\n\nimport clickOutsideHandler from '../../bindings/clickoutsidehandler';\n\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig';\n\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\n\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\nconst toPx = toUnit( 'px' );\n\n/**\n * The block toolbar plugin.\n *\n * This plugin provides a button positioned next to the block of content where the selection is anchored.\n * Upon clicking the button, a dropdown providing access to editor features shows up, as configured in\n * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar}.\n *\n * By default, the button is displayed next to all elements marked in {@link module:engine/model/schema~Schema}\n * as `$block` for which the toolbar provides at least one option.\n *\n * By default, the button is attached so its right boundary is touching the\n * {@link module:engine/view/editableelement~EditableElement}:\n *\n * \t\t __ |\n * \t\t|  ||  This is a block of content that the\n * \t\t ¯¯ |  button is attached to. This is a\n * \t\t    |  block of content that the button is\n * \t\t    |  attached to.\n *\n * The position of the button can be adjusted using the CSS `transform` property:\n *\n * \t\t.ck-block-toolbar-button {\n * \t\t\ttransform: translateX( -10px );\n * \t\t}\n *\n * \t\t __   |\n * \t\t|  |  |  This is a block of content that the\n * \t\t ¯¯   |  button is attached to. This is a\n * \t\t      |  block of content that the button is\n * \t\t      |  attached to.\n *\n * **Note**: If you plan to run the editor in a right–to–left (RTL) language, keep in mind the button\n * will be attached to the **right** boundary of the editable area. In that case, make sure the\n * CSS position adjustment works properly by adding the following styles:\n *\n * \t\t.ck[dir=\"rtl\"] .ck-block-toolbar-button {\n * \t\t\ttransform: translateX( 10px );\n * \t\t}\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockToolbar extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'BlockToolbar';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * A cached and normalized `config.blockToolbar` object.\n\t\t *\n\t\t * @type {module:core/editor/editorconfig~EditorConfig#blockToolbar}\n\t\t * @private\n\t\t */\n\t\tthis._blockToolbarConfig = normalizeToolbarConfig( this.editor.config.get( 'blockToolbar' ) );\n\n\t\t/**\n\t\t * The toolbar view.\n\t\t *\n\t\t * @type {module:ui/toolbar/toolbarview~ToolbarView}\n\t\t */\n\t\tthis.toolbarView = this._createToolbarView();\n\n\t\t/**\n\t\t * The balloon panel view, containing the {@link #toolbarView}.\n\t\t *\n\t\t * @type {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n\t\t */\n\t\tthis.panelView = this._createPanelView();\n\n\t\t/**\n\t\t * The button view that opens the {@link #toolbarView}.\n\t\t *\n\t\t * @type {module:ui/toolbar/block/blockbuttonview~BlockButtonView}\n\t\t */\n\t\tthis.buttonView = this._createButtonView();\n\n\t\t/**\n\t\t * An instance of the resize observer that allows to respond to changes in editable's geometry\n\t\t * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n\t\t *\n\t\t * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n\t\t * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar configuration}.\n\t\t *\n\t\t * **Note:** Created in {@link #afterInit}.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/dom/resizeobserver~ResizeObserver}\n\t\t */\n\t\tthis._resizeObserver = null;\n\n\t\t// Close the #panelView upon clicking outside of the plugin UI.\n\t\tclickOutsideHandler( {\n\t\t\temitter: this.panelView,\n\t\t\tcontextElements: [ this.panelView.element, this.buttonView.element ],\n\t\t\tactivator: () => this.panelView.isVisible,\n\t\t\tcallback: () => this._hidePanel()\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Hides panel on a direct selection change.\n\t\tthis.listenTo( editor.model.document.selection, 'change:range', ( evt, data ) => {\n\t\t\tif ( data.directChange ) {\n\t\t\t\tthis._hidePanel();\n\t\t\t}\n\t\t} );\n\n\t\tthis.listenTo( editor.ui, 'update', () => this._updateButton() );\n\t\t// `low` priority is used because of https://github.com/ckeditor/ckeditor5-core/issues/133.\n\t\tthis.listenTo( editor, 'change:isReadOnly', () => this._updateButton(), { priority: 'low' } );\n\t\tthis.listenTo( editor.ui.focusTracker, 'change:isFocused', () => this._updateButton() );\n\n\t\t// Reposition button on resize.\n\t\tthis.listenTo( this.buttonView, 'change:isVisible', ( evt, name, isVisible ) => {\n\t\t\tif ( isVisible ) {\n\t\t\t\t// Keep correct position of button and panel on window#resize.\n\t\t\t\tthis.buttonView.listenTo( window, 'resize', () => this._updateButton() );\n\t\t\t} else {\n\t\t\t\t// Stop repositioning button when is hidden.\n\t\t\t\tthis.buttonView.stopListening( window, 'resize' );\n\n\t\t\t\t// Hide the panel when the button disappears.\n\t\t\t\tthis._hidePanel();\n\t\t\t}\n\t\t} );\n\n\t\t// Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n\t\teditor.ui.addToolbar( this.toolbarView, {\n\t\t\tbeforeFocus: () => this._showPanel(),\n\t\t\tafterBlur: () => this._hidePanel()\n\t\t} );\n\t}\n\n\t/**\n\t * Fills the toolbar with its items based on the configuration.\n\t *\n\t * **Note:** This needs to be done after all plugins are ready.\n\t *\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst factory = this.editor.ui.componentFactory;\n\t\tconst config = this._blockToolbarConfig;\n\n\t\tthis.toolbarView.fillFromConfig( config, factory );\n\n\t\t// Hide panel before executing each button in the panel.\n\t\tfor ( const item of this.toolbarView.items ) {\n\t\t\titem.on( 'execute', () => this._hidePanel( true ), { priority: 'high' } );\n\t\t}\n\n\t\tif ( !config.shouldNotGroupWhenFull ) {\n\t\t\tthis.listenTo( this.editor, 'ready', () => {\n\t\t\t\tconst editableElement = this.editor.ui.view.editable.element;\n\n\t\t\t\t// Set #toolbarView's max-width just after the initialization and update it on the editable resize.\n\t\t\t\tthis._resizeObserver = new ResizeObserver( editableElement, () => {\n\t\t\t\t\tthis.toolbarView.maxWidth = this._getToolbarMaxWidth();\n\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\t// Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n\t\tthis.panelView.destroy();\n\t\tthis.buttonView.destroy();\n\t\tthis.toolbarView.destroy();\n\n\t\tif ( this._resizeObserver ) {\n\t\t\tthis._resizeObserver.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Creates the {@link #toolbarView}.\n\t *\n\t * @private\n\t * @returns {module:ui/toolbar/toolbarview~ToolbarView}\n\t */\n\t_createToolbarView() {\n\t\tconst t = this.editor.locale.t;\n\t\tconst shouldGroupWhenFull = !this._blockToolbarConfig.shouldNotGroupWhenFull;\n\t\tconst toolbarView = new ToolbarView( this.editor.locale, {\n\t\t\tshouldGroupWhenFull,\n\t\t\tisFloating: true\n\t\t} );\n\n\t\ttoolbarView.ariaLabel = t( 'Editor block content toolbar' );\n\n\t\t// When toolbar lost focus then panel should hide.\n\t\ttoolbarView.focusTracker.on( 'change:isFocused', ( evt, name, is ) => {\n\t\t\tif ( !is ) {\n\t\t\t\tthis._hidePanel();\n\t\t\t}\n\t\t} );\n\n\t\treturn toolbarView;\n\t}\n\n\t/**\n\t * Creates the {@link #panelView}.\n\t *\n\t * @private\n\t * @returns {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n\t */\n\t_createPanelView() {\n\t\tconst editor = this.editor;\n\t\tconst panelView = new BalloonPanelView( editor.locale );\n\n\t\tpanelView.content.add( this.toolbarView );\n\t\tpanelView.class = 'ck-toolbar-container';\n\t\teditor.ui.view.body.add( panelView );\n\t\teditor.ui.focusTracker.add( panelView.element );\n\n\t\t// Close #panelView on `Esc` press.\n\t\tthis.toolbarView.keystrokes.set( 'Esc', ( evt, cancel ) => {\n\t\t\tthis._hidePanel( true );\n\t\t\tcancel();\n\t\t} );\n\n\t\treturn panelView;\n\t}\n\n\t/**\n\t * Creates the {@link #buttonView}.\n\t *\n\t * @private\n\t * @returns {module:ui/toolbar/block/blockbuttonview~BlockButtonView}\n\t */\n\t_createButtonView() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst buttonView = new BlockButtonView( editor.locale );\n\t\tconst bind = buttonView.bindTemplate;\n\n\t\tbuttonView.set( {\n\t\t\tlabel: t( 'Edit block' ),\n\t\t\ticon: pilcrow,\n\t\t\twithText: false\n\t\t} );\n\n\t\t// Note that this piece over here overrides the default mousedown logic in ButtonView\n\t\t// to make it work with BlockToolbar. See the implementation of the ButtonView class to learn more.\n\t\tbuttonView.extendTemplate( {\n\t\t\ton: {\n\t\t\t\tmousedown: bind.to( evt => {\n\t\t\t\t\t// On Safari we have to force the focus on a button on click as it's the only browser\n\t\t\t\t\t// that doesn't do that automatically. See #12115.\n\t\t\t\t\tif ( env.isSafari && this.panelView.isVisible ) {\n\t\t\t\t\t\tthis.toolbarView.focus();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Workaround to #12184, see https://github.com/ckeditor/ckeditor5/issues/12184#issuecomment-1199147964.\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\n\t\t// Bind the panelView observable properties to the buttonView.\n\t\tbuttonView.bind( 'isOn' ).to( this.panelView, 'isVisible' );\n\t\tbuttonView.bind( 'tooltip' ).to( this.panelView, 'isVisible', isVisible => !isVisible );\n\n\t\t// Toggle the panelView upon buttonView#execute.\n\t\tthis.listenTo( buttonView, 'execute', () => {\n\t\t\tif ( !this.panelView.isVisible ) {\n\t\t\t\tthis._showPanel();\n\t\t\t} else {\n\t\t\t\tthis._hidePanel( true );\n\t\t\t}\n\t\t} );\n\n\t\teditor.ui.view.body.add( buttonView );\n\t\teditor.ui.focusTracker.add( buttonView.element );\n\n\t\treturn buttonView;\n\t}\n\n\t/**\n\t * Shows or hides the button.\n\t * When all the conditions for displaying the button are matched, it shows the button. Hides otherwise.\n\t *\n\t * @private\n\t */\n\t_updateButton() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst view = editor.editing.view;\n\n\t\t// Hides the button when the editor is not focused.\n\t\tif ( !editor.ui.focusTracker.isFocused ) {\n\t\t\tthis._hideButton();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Hides the button when the editor switches to the read-only mode.\n\t\tif ( editor.isReadOnly ) {\n\t\t\tthis._hideButton();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the first selected block, button will be attached to this element.\n\t\tconst modelTarget = Array.from( model.document.selection.getSelectedBlocks() )[ 0 ];\n\n\t\t// Hides the button when there is no enabled item in toolbar for the current block element.\n\t\tif ( !modelTarget || Array.from( this.toolbarView.items ).every( item => !item.isEnabled ) ) {\n\t\t\tthis._hideButton();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Get DOM target element.\n\t\tconst domTarget = view.domConverter.mapViewToDom( editor.editing.mapper.toViewElement( modelTarget ) );\n\n\t\t// Show block button.\n\t\tthis.buttonView.isVisible = true;\n\n\t\t// Attach block button to target DOM element.\n\t\tthis._attachButtonToElement( domTarget );\n\n\t\t// When panel is opened then refresh it position to be properly aligned with block button.\n\t\tif ( this.panelView.isVisible ) {\n\t\t\tthis._showPanel();\n\t\t}\n\t}\n\n\t/**\n\t * Hides the button.\n\t *\n\t * @private\n\t */\n\t_hideButton() {\n\t\tthis.buttonView.isVisible = false;\n\t}\n\n\t/**\n\t * Shows the {@link #toolbarView} attached to the {@link #buttonView}.\n\t * If the toolbar is already visible, then it simply repositions it.\n\t *\n\t * @private\n\t */\n\t_showPanel() {\n\t\t// Usually, the only way to show the toolbar is by pressing the block button. It makes it impossible for\n\t\t// the toolbar to show up when the button is invisible (feature does not make sense for the selection then).\n\t\t// The toolbar navigation using Alt+F10 does not access the button but shows the panel directly using this method.\n\t\t// So we need to check whether this is possible first.\n\t\tif ( !this.buttonView.isVisible ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst wasVisible = this.panelView.isVisible;\n\n\t\t// So here's the thing: If there was no initial panelView#show() or these two were in different order, the toolbar\n\t\t// positioning will break in RTL editors. Weird, right? What you show know is that the toolbar\n\t\t// grouping works thanks to:\n\t\t//\n\t\t// * the ResizeObserver, which kicks in as soon as the toolbar shows up in DOM (becomes visible again).\n\t\t// * the observable ToolbarView#maxWidth, which triggers re-grouping when changed.\n\t\t//\n\t\t// Here are the possible scenarios:\n\t\t//\n\t\t// 1. (WRONG ❌) If the #maxWidth is set when the toolbar is invisible, it won't affect item grouping (no DOMRects, no grouping).\n\t\t//    Then, when panelView.pin() is called, the position of the toolbar will be calculated for the old\n\t\t//    items grouping state, and when finally ResizeObserver kicks in (hey, the toolbar is visible now, right?)\n\t\t//    it will group/ungroup some items and the length of the toolbar will change. But since in RTL the toolbar\n\t\t//    is attached on the right side and the positioning uses CSS \"left\", it will result in the toolbar shifting\n\t\t//    to the left and being displayed in the wrong place.\n\t\t// 2. (WRONG ❌) If the panelView.pin() is called first and #maxWidth set next, then basically the story repeats. The balloon\n\t\t//    calculates the position for the old toolbar grouping state, then the toolbar re-groups items and because\n\t\t//    it is positioned using CSS \"left\" it will move.\n\t\t// 3. (RIGHT ✅) We show the panel first (the toolbar does re-grouping but it does not matter), then the #maxWidth\n\t\t//    is set allowing the toolbar to re-group again and finally panelView.pin() does the positioning when the\n\t\t//    items grouping state is stable and final.\n\t\t//\n\t\t// https://github.com/ckeditor/ckeditor5/issues/6449, https://github.com/ckeditor/ckeditor5/issues/6575\n\t\tthis.panelView.show();\n\t\tthis.toolbarView.maxWidth = this._getToolbarMaxWidth();\n\n\t\tthis.panelView.pin( {\n\t\t\ttarget: this.buttonView.element,\n\t\t\tlimiter: this.editor.ui.getEditableElement()\n\t\t} );\n\n\t\tif ( !wasVisible ) {\n\t\t\tthis.toolbarView.items.get( 0 ).focus();\n\t\t}\n\t}\n\n\t/**\n\t * Hides the {@link #toolbarView}.\n\t *\n\t * @private\n\t * @param {Boolean} [focusEditable=false] When `true`, the editable will be focused after hiding the panel.\n\t */\n\t_hidePanel( focusEditable ) {\n\t\tthis.panelView.isVisible = false;\n\n\t\tif ( focusEditable ) {\n\t\t\tthis.editor.editing.view.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Attaches the {@link #buttonView} to the target block of content.\n\t *\n\t * @protected\n\t * @param {HTMLElement} targetElement Target element.\n\t */\n\t_attachButtonToElement( targetElement ) {\n\t\tconst contentStyles = window.getComputedStyle( targetElement );\n\n\t\tconst editableRect = new Rect( this.editor.ui.getEditableElement() );\n\t\tconst contentPaddingTop = parseInt( contentStyles.paddingTop, 10 );\n\t\t// When line height is not an integer then thread it as \"normal\".\n\t\t// MDN says that 'normal' == ~1.2 on desktop browsers.\n\t\tconst contentLineHeight = parseInt( contentStyles.lineHeight, 10 ) || parseInt( contentStyles.fontSize, 10 ) * 1.2;\n\n\t\tconst position = getOptimalPosition( {\n\t\t\telement: this.buttonView.element,\n\t\t\ttarget: targetElement,\n\t\t\tpositions: [\n\t\t\t\t( contentRect, buttonRect ) => {\n\t\t\t\t\tlet left;\n\n\t\t\t\t\tif ( this.editor.locale.uiLanguageDirection === 'ltr' ) {\n\t\t\t\t\t\tleft = editableRect.left - buttonRect.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tleft = editableRect.right;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttop: contentRect.top + contentPaddingTop + ( contentLineHeight - buttonRect.height ) / 2,\n\t\t\t\t\t\tleft\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\tthis.buttonView.top = position.top;\n\t\tthis.buttonView.left = position.left;\n\t}\n\n\t/**\n\t * Gets the {@link #toolbarView} max-width, based on\n\t * editable width plus distance between farthest edge of the {@link #buttonView} and the editable.\n\t *\n\t * @private\n\t * @returns {String} maxWidth A maximum width that toolbar can have, in pixels.\n\t */\n\t_getToolbarMaxWidth() {\n\t\tconst editableElement = this.editor.ui.view.editable.element;\n\t\tconst editableRect = new Rect( editableElement );\n\t\tconst buttonRect = new Rect( this.buttonView.element );\n\t\tconst isRTL = this.editor.locale.uiLanguageDirection === 'rtl';\n\t\tconst offset = isRTL ? ( buttonRect.left - editableRect.right ) + buttonRect.width : editableRect.left - buttonRect.left;\n\n\t\treturn toPx( editableRect.width + offset );\n\t}\n}\n\n/**\n * The block toolbar configuration. Used by the {@link module:ui/toolbar/block/blocktoolbar~BlockToolbar}\n * feature.\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: [ 'paragraph', 'heading1', 'heading2', 'bulletedList', 'numberedList' ]\n *\t\t};\n *\n * You can also use `'|'` to create a separator between groups of items:\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: [ 'paragraph', 'heading1', 'heading2', '|', 'bulletedList', 'numberedList' ]\n *\t\t};\n *\n * ## Configuring items grouping\n *\n * You can prevent automatic items grouping by setting the `shouldNotGroupWhenFull` option:\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: {\n *\t\t\t\titems: [ 'paragraph', 'heading1', 'heading2', '|', 'bulletedList', 'numberedList' ],\n *\t\t\t\tshouldNotGroupWhenFull: true\n *\t\t\t},\n *\t\t};\n *\n * Read more about configuring the main editor toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>|Object} module:core/editor/editorconfig~EditorConfig#blockToolbar\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}