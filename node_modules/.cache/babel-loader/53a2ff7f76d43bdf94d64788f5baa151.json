{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledfield/utils\n */\n\nimport InputTextView from '../inputtext/inputtextview';\nimport InputNumberView from '../inputnumber/inputnumberview';\nimport { createDropdown } from '../dropdown/utils';\n\n/**\n * A helper for creating labeled inputs.\n *\n * It creates an instance of a {@link module:ui/inputtext/inputtextview~InputTextView input text} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets input's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isReadOnly` to the labeled view.\n * * It binds input's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the input.\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledInputText );\n *\t\tconsole.log( labeledInputView.fieldView ); // A text input instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the input.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the input.\n * @returns {module:ui/inputtext/inputtextview~InputTextView} The input text view instance.\n */\nexport function createLabeledInputText(labeledFieldView, viewUid, statusUid) {\n  const inputView = new InputTextView(labeledFieldView.locale);\n  inputView.set({\n    id: viewUid,\n    ariaDescribedById: statusUid\n  });\n  inputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', value => !value);\n  inputView.bind('hasError').to(labeledFieldView, 'errorText', value => !!value);\n  inputView.on('input', () => {\n    // UX: Make the error text disappear and disable the error indicator as the user\n    // starts fixing the errors.\n    labeledFieldView.errorText = null;\n  });\n  labeledFieldView.bind('isEmpty', 'isFocused', 'placeholder').to(inputView);\n  return inputView;\n}\n\n/**\n * A helper for creating labeled number inputs.\n *\n * It creates an instance of a {@link module:ui/inputnumber/inputnumberview~InputNumberView input number} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets input's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isReadOnly` to the labeled view.\n * * It binds input's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the input.\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledInputNumber );\n *\t\tconsole.log( labeledInputView.fieldView ); // A number input instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the input.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the input.\n * @returns {module:ui/inputnumber/inputnumberview~InputNumberView} The input number view instance.\n */\nexport function createLabeledInputNumber(labeledFieldView, viewUid, statusUid) {\n  const inputView = new InputNumberView(labeledFieldView.locale);\n  inputView.set({\n    id: viewUid,\n    ariaDescribedById: statusUid,\n    inputMode: 'numeric'\n  });\n  inputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', value => !value);\n  inputView.bind('hasError').to(labeledFieldView, 'errorText', value => !!value);\n  inputView.on('input', () => {\n    // UX: Make the error text disappear and disable the error indicator as the user\n    // starts fixing the errors.\n    labeledFieldView.errorText = null;\n  });\n  labeledFieldView.bind('isEmpty', 'isFocused', 'placeholder').to(inputView);\n  return inputView;\n}\n\n/**\n * A helper for creating labeled dropdowns.\n *\n * It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled field view}.\n *\n * The helper does the following:\n *\n * * It sets dropdown's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isEnabled` to the labeled view.\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledDropdown );\n *\t\tconsole.log( labeledInputView.fieldView ); // A dropdown instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view label} and the dropdown.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view status} and the dropdown.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\nexport function createLabeledDropdown(labeledFieldView, viewUid, statusUid) {\n  const dropdownView = createDropdown(labeledFieldView.locale);\n  dropdownView.set({\n    id: viewUid,\n    ariaDescribedById: statusUid\n  });\n  dropdownView.bind('isEnabled').to(labeledFieldView);\n  return dropdownView;\n}","map":{"version":3,"names":["InputTextView","InputNumberView","createDropdown","createLabeledInputText","labeledFieldView","viewUid","statusUid","inputView","locale","set","id","ariaDescribedById","bind","to","value","on","errorText","createLabeledInputNumber","inputMode","createLabeledDropdown","dropdownView"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-ui/src/labeledfield/utils.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledfield/utils\n */\n\nimport InputTextView from '../inputtext/inputtextview';\nimport InputNumberView from '../inputnumber/inputnumberview';\nimport { createDropdown } from '../dropdown/utils';\n\n/**\n * A helper for creating labeled inputs.\n *\n * It creates an instance of a {@link module:ui/inputtext/inputtextview~InputTextView input text} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets input's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isReadOnly` to the labeled view.\n * * It binds input's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the input.\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledInputText );\n *\t\tconsole.log( labeledInputView.fieldView ); // A text input instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the input.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the input.\n * @returns {module:ui/inputtext/inputtextview~InputTextView} The input text view instance.\n */\nexport function createLabeledInputText( labeledFieldView, viewUid, statusUid ) {\n\tconst inputView = new InputTextView( labeledFieldView.locale );\n\n\tinputView.set( {\n\t\tid: viewUid,\n\t\tariaDescribedById: statusUid\n\t} );\n\n\tinputView.bind( 'isReadOnly' ).to( labeledFieldView, 'isEnabled', value => !value );\n\tinputView.bind( 'hasError' ).to( labeledFieldView, 'errorText', value => !!value );\n\n\tinputView.on( 'input', () => {\n\t\t// UX: Make the error text disappear and disable the error indicator as the user\n\t\t// starts fixing the errors.\n\t\tlabeledFieldView.errorText = null;\n\t} );\n\n\tlabeledFieldView.bind( 'isEmpty', 'isFocused', 'placeholder' ).to( inputView );\n\n\treturn inputView;\n}\n\n/**\n * A helper for creating labeled number inputs.\n *\n * It creates an instance of a {@link module:ui/inputnumber/inputnumberview~InputNumberView input number} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets input's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isReadOnly` to the labeled view.\n * * It binds input's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the input.\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledInputNumber );\n *\t\tconsole.log( labeledInputView.fieldView ); // A number input instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the input.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the input.\n * @returns {module:ui/inputnumber/inputnumberview~InputNumberView} The input number view instance.\n */\nexport function createLabeledInputNumber( labeledFieldView, viewUid, statusUid ) {\n\tconst inputView = new InputNumberView( labeledFieldView.locale );\n\n\tinputView.set( {\n\t\tid: viewUid,\n\t\tariaDescribedById: statusUid,\n\t\tinputMode: 'numeric'\n\t} );\n\n\tinputView.bind( 'isReadOnly' ).to( labeledFieldView, 'isEnabled', value => !value );\n\tinputView.bind( 'hasError' ).to( labeledFieldView, 'errorText', value => !!value );\n\n\tinputView.on( 'input', () => {\n\t\t// UX: Make the error text disappear and disable the error indicator as the user\n\t\t// starts fixing the errors.\n\t\tlabeledFieldView.errorText = null;\n\t} );\n\n\tlabeledFieldView.bind( 'isEmpty', 'isFocused', 'placeholder' ).to( inputView );\n\n\treturn inputView;\n}\n\n/**\n * A helper for creating labeled dropdowns.\n *\n * It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled field view}.\n *\n * The helper does the following:\n *\n * * It sets dropdown's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isEnabled` to the labeled view.\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledDropdown );\n *\t\tconsole.log( labeledInputView.fieldView ); // A dropdown instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view label} and the dropdown.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view status} and the dropdown.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\nexport function createLabeledDropdown( labeledFieldView, viewUid, statusUid ) {\n\tconst dropdownView = createDropdown( labeledFieldView.locale );\n\n\tdropdownView.set( {\n\t\tid: viewUid,\n\t\tariaDescribedById: statusUid\n\t} );\n\n\tdropdownView.bind( 'isEnabled' ).to( labeledFieldView );\n\n\treturn dropdownView;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}