{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/focusobserver\n */\n/* globals setTimeout, clearTimeout */\nimport DomEventObserver from './domeventobserver';\n/**\n * {@link module:engine/view/document~Document#event:focus Focus}\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class FocusObserver extends DomEventObserver {\n  constructor(view) {\n    super(view);\n    this.domEventType = ['focus', 'blur'];\n    this.useCapture = true;\n    const document = this.document;\n    document.on('focus', () => {\n      document.isFocused = true;\n      // Unfortunately native `selectionchange` event is fired asynchronously.\n      // We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\n      // overwrite new DOM selection with selection from the view.\n      // See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\n      // Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\n      //\n      // Using `view.change()` instead of `view.forceRender()` to prevent double rendering\n      // in a situation where `selectionchange` already caused selection change.\n      this._renderTimeoutId = setTimeout(() => view.change(() => {}), 50);\n    });\n    document.on('blur', (evt, data) => {\n      const selectedEditable = document.selection.editableElement;\n      if (selectedEditable === null || selectedEditable === data.target) {\n        document.isFocused = false;\n        // Re-render the document to update view elements\n        // (changing document.isFocused already marked view as changed since last rendering).\n        view.change(() => {});\n      }\n    });\n    /**\n     * Identifier of the timeout currently used by focus listener to delay rendering execution.\n     *\n     * @private\n     * @member {Number} #_renderTimeoutId\n     */\n  }\n\n  onDomEvent(domEvent) {\n    this.fire(domEvent.type, domEvent);\n  }\n  /**\n   * @inheritDoc\n   */\n  destroy() {\n    if (this._renderTimeoutId) {\n      clearTimeout(this._renderTimeoutId);\n    }\n    super.destroy();\n  }\n}\n/**\n * Fired when one of the editables gets focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:focus\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n/**\n * Fired when one of the editables loses focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:blur\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */","map":{"version":3,"names":["DomEventObserver","FocusObserver","constructor","view","domEventType","useCapture","document","on","isFocused","_renderTimeoutId","setTimeout","change","evt","data","selectedEditable","selection","editableElement","target","onDomEvent","domEvent","fire","type","destroy","clearTimeout"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/focusobserver.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/focusobserver\n */\n/* globals setTimeout, clearTimeout */\nimport DomEventObserver from './domeventobserver';\n/**\n * {@link module:engine/view/document~Document#event:focus Focus}\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class FocusObserver extends DomEventObserver {\n    constructor(view) {\n        super(view);\n        this.domEventType = ['focus', 'blur'];\n        this.useCapture = true;\n        const document = this.document;\n        document.on('focus', () => {\n            document.isFocused = true;\n            // Unfortunately native `selectionchange` event is fired asynchronously.\n            // We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\n            // overwrite new DOM selection with selection from the view.\n            // See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\n            // Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\n            //\n            // Using `view.change()` instead of `view.forceRender()` to prevent double rendering\n            // in a situation where `selectionchange` already caused selection change.\n            this._renderTimeoutId = setTimeout(() => view.change(() => { }), 50);\n        });\n        document.on('blur', (evt, data) => {\n            const selectedEditable = document.selection.editableElement;\n            if (selectedEditable === null || selectedEditable === data.target) {\n                document.isFocused = false;\n                // Re-render the document to update view elements\n                // (changing document.isFocused already marked view as changed since last rendering).\n                view.change(() => { });\n            }\n        });\n        /**\n         * Identifier of the timeout currently used by focus listener to delay rendering execution.\n         *\n         * @private\n         * @member {Number} #_renderTimeoutId\n         */\n    }\n    onDomEvent(domEvent) {\n        this.fire(domEvent.type, domEvent);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        if (this._renderTimeoutId) {\n            clearTimeout(this._renderTimeoutId);\n        }\n        super.destroy();\n    }\n}\n/**\n * Fired when one of the editables gets focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:focus\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n/**\n * Fired when one of the editables loses focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:blur\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,gBAAgB,MAAM,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,aAAa,SAASD,gBAAgB,CAAC;EACxDE,WAAW,CAACC,IAAI,EAAE;IACd,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACC,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC;IACrC,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,MAAMC,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9BA,QAAQ,CAACC,EAAE,CAAC,OAAO,EAAE,MAAM;MACvBD,QAAQ,CAACE,SAAS,GAAG,IAAI;MACzB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,CAACC,gBAAgB,GAAGC,UAAU,CAAC,MAAMP,IAAI,CAACQ,MAAM,CAAC,MAAM,CAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACxE,CAAC,CAAC;IACFL,QAAQ,CAACC,EAAE,CAAC,MAAM,EAAE,CAACK,GAAG,EAAEC,IAAI,KAAK;MAC/B,MAAMC,gBAAgB,GAAGR,QAAQ,CAACS,SAAS,CAACC,eAAe;MAC3D,IAAIF,gBAAgB,KAAK,IAAI,IAAIA,gBAAgB,KAAKD,IAAI,CAACI,MAAM,EAAE;QAC/DX,QAAQ,CAACE,SAAS,GAAG,KAAK;QAC1B;QACA;QACAL,IAAI,CAACQ,MAAM,CAAC,MAAM,CAAE,CAAC,CAAC;MAC1B;IACJ,CAAC,CAAC;IACF;AACR;AACA;AACA;AACA;AACA;EACI;;EACAO,UAAU,CAACC,QAAQ,EAAE;IACjB,IAAI,CAACC,IAAI,CAACD,QAAQ,CAACE,IAAI,EAAEF,QAAQ,CAAC;EACtC;EACA;AACJ;AACA;EACIG,OAAO,GAAG;IACN,IAAI,IAAI,CAACb,gBAAgB,EAAE;MACvBc,YAAY,CAAC,IAAI,CAACd,gBAAgB,CAAC;IACvC;IACA,KAAK,CAACa,OAAO,EAAE;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}