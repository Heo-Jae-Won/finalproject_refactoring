{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/input/inputview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport '../../theme/components/input/input.css';\n\n/**\n * The base input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class InputView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    var _this;\n    super(locale);\n    _this = this;\n    /**\n     * The value of the input.\n     *\n     * @observable\n     * @member {String} #value\n     */\n    this.set('value');\n\n    /**\n     * The `id` attribute of the input (i.e. to pair with a `<label>` element).\n     *\n     * @observable\n     * @member {String} #id\n     */\n    this.set('id');\n\n    /**\n     * The `placeholder` attribute of the input.\n     *\n     * @observable\n     * @member {String} #placeholder\n     */\n    this.set('placeholder');\n\n    /**\n     * Controls whether the input view is in read-only mode.\n     *\n     * @observable\n     * @member {Boolean} #isReadOnly\n     */\n    this.set('isReadOnly', false);\n\n    /**\n     * Set to `true` when the field has some error. Usually controlled via\n     * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n     *\n     * @observable\n     * @member {Boolean} #hasError\n     */\n    this.set('hasError', false);\n\n    /**\n     * The `id` of the element describing this field, e.g. when it has\n     * some error; it helps screen readers read the error text.\n     *\n     * @observable\n     * @member {Boolean} #ariaDescribedById\n     */\n    this.set('ariaDescribedById');\n\n    /**\n     * Stores information about the editor UI focus and propagates it so various plugins and components\n     * are unified as a focus group.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker} #focusTracker\n     */\n    this.focusTracker = new FocusTracker();\n\n    /**\n     * An observable flag set to `true` when the input is currently focused by the user.\n     * Set to `false` otherwise.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isFocused\n     * @default false\n     */\n    this.bind('isFocused').to(this.focusTracker);\n\n    /**\n     * An observable flag set to `true` when the input contains no text, i.e.\n     * when {@link #value} is `''`, `null`, or `false`.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isEmpty\n     * @default true\n     */\n    this.set('isEmpty', true);\n\n    /**\n     * Corresponds to the `inputmode` DOM attribute. Can be `text`, `numeric`, `decimal`, etc.\n     *\n     * @observable\n     * @member {Boolean} #inputMode\n     * @default 'text'\n     */\n    this.set('inputMode', 'text');\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'input',\n      attributes: {\n        class: ['ck', 'ck-input', bind.if('isFocused', 'ck-input_focused'), bind.if('isEmpty', 'ck-input-text_empty'), bind.if('hasError', 'ck-error')],\n        id: bind.to('id'),\n        placeholder: bind.to('placeholder'),\n        readonly: bind.to('isReadOnly'),\n        inputmode: bind.to('inputMode'),\n        'aria-invalid': bind.if('hasError', true),\n        'aria-describedby': bind.to('ariaDescribedById')\n      },\n      on: {\n        input: bind.to(function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          _this.fire('input', ...args);\n          _this._updateIsEmpty();\n        }),\n        change: bind.to(this._updateIsEmpty.bind(this))\n      }\n    });\n\n    /**\n     * Fired when the user types in the input. Corresponds to the native\n     * DOM `input` event.\n     *\n     * @event input\n     */\n  }\n\n  /**\n   * @inheritDoc\n   */\n  render() {\n    super.render();\n    this.focusTracker.add(this.element);\n    this._setDomElementValue(this.value);\n    this._updateIsEmpty();\n\n    // Bind `this.value` to the DOM element's value.\n    // We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n    this.on('change:value', (evt, name, value) => {\n      this._setDomElementValue(value);\n      this._updateIsEmpty();\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  destroy() {\n    super.destroy();\n    this.focusTracker.destroy();\n  }\n\n  /**\n   * Moves the focus to the input and selects the value.\n   */\n  select() {\n    this.element.select();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    this.element.focus();\n  }\n\n  /**\n   * Updates the {@link #isEmpty} property value on demand.\n   *\n   * @private\n   */\n  _updateIsEmpty() {\n    this.isEmpty = isInputElementEmpty(this.element);\n  }\n\n  /**\n   * Sets the `value` property of the {@link #element DOM element} on demand.\n   *\n   * @private\n   */\n  _setDomElementValue(value) {\n    this.element.value = !value && value !== 0 ? '' : value;\n  }\n}\nfunction isInputElementEmpty(domElement) {\n  return !domElement.value;\n}","map":{"version":3,"names":["View","FocusTracker","InputView","constructor","locale","set","focusTracker","bind","to","bindTemplate","setTemplate","tag","attributes","class","if","id","placeholder","readonly","inputmode","on","input","args","fire","_updateIsEmpty","change","render","add","element","_setDomElementValue","value","evt","name","destroy","select","focus","isEmpty","isInputElementEmpty","domElement"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-ui/src/input/inputview.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/input/inputview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\n\nimport '../../theme/components/input/input.css';\n\n/**\n * The base input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class InputView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * The `id` attribute of the input (i.e. to pair with a `<label>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #id\n\t\t */\n\t\tthis.set( 'id' );\n\n\t\t/**\n\t\t * The `placeholder` attribute of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #placeholder\n\t\t */\n\t\tthis.set( 'placeholder' );\n\n\t\t/**\n\t\t * Controls whether the input view is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Set to `true` when the field has some error. Usually controlled via\n\t\t * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #hasError\n\t\t */\n\t\tthis.set( 'hasError', false );\n\n\t\t/**\n\t\t * The `id` of the element describing this field, e.g. when it has\n\t\t * some error; it helps screen readers read the error text.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #ariaDescribedById\n\t\t */\n\t\tthis.set( 'ariaDescribedById' );\n\n\t\t/**\n\t\t * Stores information about the editor UI focus and propagates it so various plugins and components\n\t\t * are unified as a focus group.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An observable flag set to `true` when the input is currently focused by the user.\n\t\t * Set to `false` otherwise.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t * @default false\n\t\t */\n\t\tthis.bind( 'isFocused' ).to( this.focusTracker );\n\n\t\t/**\n\t\t * An observable flag set to `true` when the input contains no text, i.e.\n\t\t * when {@link #value} is `''`, `null`, or `false`.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isEmpty\n\t\t * @default true\n\t\t */\n\t\tthis.set( 'isEmpty', true );\n\n\t\t/**\n\t\t * Corresponds to the `inputmode` DOM attribute. Can be `text`, `numeric`, `decimal`, etc.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #inputMode\n\t\t * @default 'text'\n\t\t */\n\t\tthis.set( 'inputMode', 'text' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'input',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-input',\n\t\t\t\t\tbind.if( 'isFocused', 'ck-input_focused' ),\n\t\t\t\t\tbind.if( 'isEmpty', 'ck-input-text_empty' ),\n\t\t\t\t\tbind.if( 'hasError', 'ck-error' )\n\t\t\t\t],\n\t\t\t\tid: bind.to( 'id' ),\n\t\t\t\tplaceholder: bind.to( 'placeholder' ),\n\t\t\t\treadonly: bind.to( 'isReadOnly' ),\n\t\t\t\tinputmode: bind.to( 'inputMode' ),\n\t\t\t\t'aria-invalid': bind.if( 'hasError', true ),\n\t\t\t\t'aria-describedby': bind.to( 'ariaDescribedById' )\n\t\t\t},\n\t\t\ton: {\n\t\t\t\tinput: bind.to( ( ...args ) => {\n\t\t\t\t\tthis.fire( 'input', ...args );\n\t\t\t\t\tthis._updateIsEmpty();\n\t\t\t\t} ),\n\t\t\t\tchange: bind.to( this._updateIsEmpty.bind( this ) )\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Fired when the user types in the input. Corresponds to the native\n\t\t * DOM `input` event.\n\t\t *\n\t\t * @event input\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.focusTracker.add( this.element );\n\n\t\tthis._setDomElementValue( this.value );\n\t\tthis._updateIsEmpty();\n\n\t\t// Bind `this.value` to the DOM element's value.\n\t\t// We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n\t\tthis.on( 'change:value', ( evt, name, value ) => {\n\t\t\tthis._setDomElementValue( value );\n\t\t\tthis._updateIsEmpty();\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t}\n\n\t/**\n\t * Moves the focus to the input and selects the value.\n\t */\n\tselect() {\n\t\tthis.element.select();\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n\n\t/**\n\t * Updates the {@link #isEmpty} property value on demand.\n\t *\n\t * @private\n\t */\n\t_updateIsEmpty() {\n\t\tthis.isEmpty = isInputElementEmpty( this.element );\n\t}\n\n\t/**\n\t * Sets the `value` property of the {@link #element DOM element} on demand.\n\t *\n\t * @private\n\t */\n\t_setDomElementValue( value ) {\n\t\tthis.element.value = ( !value && value !== 0 ) ? '' : value;\n\t}\n}\n\nfunction isInputElementEmpty( domElement ) {\n\treturn !domElement.value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}