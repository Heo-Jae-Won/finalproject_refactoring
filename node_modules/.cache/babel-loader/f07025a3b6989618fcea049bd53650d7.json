{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/utils\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Returns true if container children have mutated or more than a single text node was changed.\n *\n * @private\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n * @returns {Boolean}\n */\nexport function containerChildrenMutated(mutations) {\n  if (mutations.length == 0) {\n    return false;\n  }\n\n  // Check if there is any mutation of `children` type or any mutation that changes more than one text node.\n  for (const mutation of mutations) {\n    if (mutation.type === 'children' && !getSingleTextNodeChange(mutation)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns change made to a single text node.\n *\n * @private\n * @param {module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren} mutation\n * @returns {Object|undefined} Change object (see {@link module:utils/difftochanges~diffToChanges} output)\n * or undefined if more than a single text node was changed.\n */\nexport function getSingleTextNodeChange(mutation) {\n  // One new node.\n  if (mutation.newChildren.length - mutation.oldChildren.length != 1) {\n    return;\n  }\n\n  // Which is text.\n  const diffResult = diff(mutation.oldChildren, mutation.newChildren, compareChildNodes);\n  const changes = diffToChanges(diffResult, mutation.newChildren);\n\n  // In case of [ delete, insert, insert ] the previous check will not exit.\n  if (changes.length > 1) {\n    return;\n  }\n  const change = changes[0];\n\n  // Which is text.\n  if (!(!!change.values[0] && change.values[0].is('$text'))) {\n    return;\n  }\n  return change;\n}\n\n/**\n * Checks whether two view nodes are identical, which means they are the same object\n * or contain exactly same data (in case of text nodes).\n *\n * @private\n * @param {module:engine/view/node~Node} oldChild\n * @param {module:engine/view/node~Node} newChild\n * @returns {Boolean}\n */\nexport function compareChildNodes(oldChild, newChild) {\n  if (!!oldChild && oldChild.is('$text') && !!newChild && newChild.is('$text')) {\n    return oldChild.data === newChild.data;\n  } else {\n    return oldChild === newChild;\n  }\n}\n\n/**\n * Checks if <kbd>Shift</kbd> + <kbd>Delete</kbd> keystroke was pressed on a non-collapsed selection.\n *\n * This key combination has a special meaning on Windows machines and it should work in the same way as the `cut` event on a non-collapsed\n * selection.\n *\n * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData Event data.\n * @param {module:engine/view/document~Document} document The document instance on which the event has been fired.\n * @returns {Boolean}\n */\nexport function isShiftDeleteOnNonCollapsedSelection(domEventData, document) {\n  const selection = document.selection;\n  const isShiftDelete = domEventData.shiftKey && domEventData.keyCode === keyCodes.delete;\n  const isNonCollapsedSelection = !selection.isCollapsed;\n  return isShiftDelete && isNonCollapsedSelection;\n}","map":{"version":3,"names":["diff","diffToChanges","keyCodes","containerChildrenMutated","mutations","length","mutation","type","getSingleTextNodeChange","newChildren","oldChildren","diffResult","compareChildNodes","changes","change","values","is","oldChild","newChild","data","isShiftDeleteOnNonCollapsedSelection","domEventData","document","selection","isShiftDelete","shiftKey","keyCode","delete","isNonCollapsedSelection","isCollapsed"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-typing/src/utils/utils.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/utils\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Returns true if container children have mutated or more than a single text node was changed.\n *\n * @private\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n * @returns {Boolean}\n */\nexport function containerChildrenMutated( mutations ) {\n\tif ( mutations.length == 0 ) {\n\t\treturn false;\n\t}\n\n\t// Check if there is any mutation of `children` type or any mutation that changes more than one text node.\n\tfor ( const mutation of mutations ) {\n\t\tif ( mutation.type === 'children' && !getSingleTextNodeChange( mutation ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns change made to a single text node.\n *\n * @private\n * @param {module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren} mutation\n * @returns {Object|undefined} Change object (see {@link module:utils/difftochanges~diffToChanges} output)\n * or undefined if more than a single text node was changed.\n */\nexport function getSingleTextNodeChange( mutation ) {\n\t// One new node.\n\tif ( mutation.newChildren.length - mutation.oldChildren.length != 1 ) {\n\t\treturn;\n\t}\n\n\t// Which is text.\n\tconst diffResult = diff( mutation.oldChildren, mutation.newChildren, compareChildNodes );\n\tconst changes = diffToChanges( diffResult, mutation.newChildren );\n\n\t// In case of [ delete, insert, insert ] the previous check will not exit.\n\tif ( changes.length > 1 ) {\n\t\treturn;\n\t}\n\n\tconst change = changes[ 0 ];\n\n\t// Which is text.\n\tif ( !( !!change.values[ 0 ] && change.values[ 0 ].is( '$text' ) ) ) {\n\t\treturn;\n\t}\n\n\treturn change;\n}\n\n/**\n * Checks whether two view nodes are identical, which means they are the same object\n * or contain exactly same data (in case of text nodes).\n *\n * @private\n * @param {module:engine/view/node~Node} oldChild\n * @param {module:engine/view/node~Node} newChild\n * @returns {Boolean}\n */\nexport function compareChildNodes( oldChild, newChild ) {\n\tif ( !!oldChild && oldChild.is( '$text' ) && !!newChild && newChild.is( '$text' ) ) {\n\t\treturn oldChild.data === newChild.data;\n\t} else {\n\t\treturn oldChild === newChild;\n\t}\n}\n\n/**\n * Checks if <kbd>Shift</kbd> + <kbd>Delete</kbd> keystroke was pressed on a non-collapsed selection.\n *\n * This key combination has a special meaning on Windows machines and it should work in the same way as the `cut` event on a non-collapsed\n * selection.\n *\n * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData Event data.\n * @param {module:engine/view/document~Document} document The document instance on which the event has been fired.\n * @returns {Boolean}\n */\nexport function isShiftDeleteOnNonCollapsedSelection( domEventData, document ) {\n\tconst selection = document.selection;\n\tconst isShiftDelete = domEventData.shiftKey && domEventData.keyCode === keyCodes.delete;\n\tconst isNonCollapsedSelection = !selection.isCollapsed;\n\n\treturn isShiftDelete && isNonCollapsedSelection;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAOA,IAAI,MAAM,oCAAoC;AACrD,OAAOC,aAAa,MAAM,6CAA6C;AACvE,SAASC,QAAQ,QAAQ,wCAAwC;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwB,CAAEC,SAAS,EAAG;EACrD,IAAKA,SAAS,CAACC,MAAM,IAAI,CAAC,EAAG;IAC5B,OAAO,KAAK;EACb;;EAEA;EACA,KAAM,MAAMC,QAAQ,IAAIF,SAAS,EAAG;IACnC,IAAKE,QAAQ,CAACC,IAAI,KAAK,UAAU,IAAI,CAACC,uBAAuB,CAAEF,QAAQ,CAAE,EAAG;MAC3E,OAAO,IAAI;IACZ;EACD;EAEA,OAAO,KAAK;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,uBAAuB,CAAEF,QAAQ,EAAG;EACnD;EACA,IAAKA,QAAQ,CAACG,WAAW,CAACJ,MAAM,GAAGC,QAAQ,CAACI,WAAW,CAACL,MAAM,IAAI,CAAC,EAAG;IACrE;EACD;;EAEA;EACA,MAAMM,UAAU,GAAGX,IAAI,CAAEM,QAAQ,CAACI,WAAW,EAAEJ,QAAQ,CAACG,WAAW,EAAEG,iBAAiB,CAAE;EACxF,MAAMC,OAAO,GAAGZ,aAAa,CAAEU,UAAU,EAAEL,QAAQ,CAACG,WAAW,CAAE;;EAEjE;EACA,IAAKI,OAAO,CAACR,MAAM,GAAG,CAAC,EAAG;IACzB;EACD;EAEA,MAAMS,MAAM,GAAGD,OAAO,CAAE,CAAC,CAAE;;EAE3B;EACA,IAAK,EAAG,CAAC,CAACC,MAAM,CAACC,MAAM,CAAE,CAAC,CAAE,IAAID,MAAM,CAACC,MAAM,CAAE,CAAC,CAAE,CAACC,EAAE,CAAE,OAAO,CAAE,CAAE,EAAG;IACpE;EACD;EAEA,OAAOF,MAAM;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASF,iBAAiB,CAAEK,QAAQ,EAAEC,QAAQ,EAAG;EACvD,IAAK,CAAC,CAACD,QAAQ,IAAIA,QAAQ,CAACD,EAAE,CAAE,OAAO,CAAE,IAAI,CAAC,CAACE,QAAQ,IAAIA,QAAQ,CAACF,EAAE,CAAE,OAAO,CAAE,EAAG;IACnF,OAAOC,QAAQ,CAACE,IAAI,KAAKD,QAAQ,CAACC,IAAI;EACvC,CAAC,MAAM;IACN,OAAOF,QAAQ,KAAKC,QAAQ;EAC7B;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,oCAAoC,CAAEC,YAAY,EAAEC,QAAQ,EAAG;EAC9E,MAAMC,SAAS,GAAGD,QAAQ,CAACC,SAAS;EACpC,MAAMC,aAAa,GAAGH,YAAY,CAACI,QAAQ,IAAIJ,YAAY,CAACK,OAAO,KAAKxB,QAAQ,CAACyB,MAAM;EACvF,MAAMC,uBAAuB,GAAG,CAACL,SAAS,CAACM,WAAW;EAEtD,OAAOL,aAAa,IAAII,uBAAuB;AAChD"},"metadata":{},"sourceType":"module"}