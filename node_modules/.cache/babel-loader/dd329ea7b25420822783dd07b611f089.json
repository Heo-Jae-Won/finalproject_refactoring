{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* globals window, document */\n/**\n * @module utils/dom/global\n */\n/**\n * A helper (module) giving an access to the global DOM objects such as `window` and\n * `document`. Accessing these objects using this helper allows easy and bulletproof\n * testing, i.e. stubbing native properties:\n *\n *\t\timport global from 'ckeditor5/utils/dom/global.js';\n *\n *\t\t// This stub will work for any code using global module.\n *\t\ttestUtils.sinon.stub( global, 'window', {\n *\t\t\tinnerWidth: 10000\n *\t\t} );\n *\n *\t\tconsole.log( global.window.innerWidth );\n */\nlet global;\n// In some environments window and document API might not be available.\ntry {\n  global = {\n    window,\n    document\n  };\n} catch (e) {\n  // It's not possible to mock a window object to simulate lack of a window object without writing extremely convoluted code.\n  /* istanbul ignore next */\n  // Let's cast it to not change module's API.\n  // We only handle this so loading editor in environments without window and document doesn't fail.\n  // For better DX we shouldn't introduce mixed types and require developers to check the type manually.\n  // This module should not be used on purpose in any environment outside browser.\n  global = {\n    window: {},\n    document: {}\n  };\n}\nexport default global;","map":{"version":3,"names":["global","window","document","e"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* globals window, document */\n/**\n * @module utils/dom/global\n */\n/**\n * A helper (module) giving an access to the global DOM objects such as `window` and\n * `document`. Accessing these objects using this helper allows easy and bulletproof\n * testing, i.e. stubbing native properties:\n *\n *\t\timport global from 'ckeditor5/utils/dom/global.js';\n *\n *\t\t// This stub will work for any code using global module.\n *\t\ttestUtils.sinon.stub( global, 'window', {\n *\t\t\tinnerWidth: 10000\n *\t\t} );\n *\n *\t\tconsole.log( global.window.innerWidth );\n */\nlet global;\n// In some environments window and document API might not be available.\ntry {\n    global = { window, document };\n}\ncatch (e) {\n    // It's not possible to mock a window object to simulate lack of a window object without writing extremely convoluted code.\n    /* istanbul ignore next */\n    // Let's cast it to not change module's API.\n    // We only handle this so loading editor in environments without window and document doesn't fail.\n    // For better DX we shouldn't introduce mixed types and require developers to check the type manually.\n    // This module should not be used on purpose in any environment outside browser.\n    global = { window: {}, document: {} };\n}\nexport default global;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,MAAM;AACV;AACA,IAAI;EACAA,MAAM,GAAG;IAAEC,MAAM;IAAEC;EAAS,CAAC;AACjC,CAAC,CACD,OAAOC,CAAC,EAAE;EACN;EACA;EACA;EACA;EACA;EACA;EACAH,MAAM,GAAG;IAAEC,MAAM,EAAE,CAAC,CAAC;IAAEC,QAAQ,EAAE,CAAC;EAAE,CAAC;AACzC;AACA,eAAeF,MAAM"},"metadata":{},"sourceType":"module"}