{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/context\n */\n\nimport Config from '@ckeditor/ckeditor5-utils/src/config';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport PluginCollection from './plugincollection';\nimport Locale from '@ckeditor/ckeditor5-utils/src/locale';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides a common, higher-level environment for solutions that use multiple {@link module:core/editor/editor~Editor editors}\n * or plugins that work outside the editor. Use it instead of {@link module:core/editor/editor~Editor.create `Editor.create()`}\n * in advanced application integrations.\n *\n * All configuration options passed to a context will be used as default options for editor instances initialized in that context.\n *\n * {@link module:core/contextplugin~ContextPlugin Context plugins} passed to a context instance will be shared among all\n * editor instances initialized in this context. These will be the same plugin instances for all the editors.\n *\n * **Note:** The context can only be initialized with {@link module:core/contextplugin~ContextPlugin context plugins}\n * (e.g. [comments](https://ckeditor.com/collaboration/comments/)). Regular {@link module:core/plugin~Plugin plugins} require an\n * editor instance to work and cannot be added to a context.\n *\n * **Note:** You can add a context plugin to an editor instance, though.\n *\n * If you are using multiple editor instances on one page and use any context plugins, create a context to share the configuration and\n * plugins among these editors. Some plugins will use the information about all existing editors to better integrate between them.\n *\n * If you are using plugins that do not require an editor to work (e.g. [comments](https://ckeditor.com/collaboration/comments/)),\n * enable and configure them using the context.\n *\n * If you are using only a single editor on each page, use {@link module:core/editor/editor~Editor.create `Editor.create()`} instead.\n * In such case, a context instance will be created by the editor instance in a transparent way.\n *\n * See {@link module:core/context~Context.create `Context.create()`} for usage examples.\n */\nexport default class Context {\n  /**\n   * Creates a context instance with a given configuration.\n   *\n   * Usually not to be used directly. See the static {@link module:core/context~Context.create `create()`} method.\n   *\n   * @param {Object} [config={}] The context configuration.\n   */\n  constructor(config) {\n    /**\n     * Stores all the configurations specific to this context instance.\n     *\n     * @readonly\n     * @type {module:utils/config~Config}\n     */\n    this.config = new Config(config, this.constructor.defaultConfig);\n    const availablePlugins = this.constructor.builtinPlugins;\n    this.config.define('plugins', availablePlugins);\n\n    /**\n     * The plugins loaded and in use by this context instance.\n     *\n     * @readonly\n     * @type {module:core/plugincollection~PluginCollection}\n     */\n    this.plugins = new PluginCollection(this, availablePlugins);\n    const languageConfig = this.config.get('language') || {};\n\n    /**\n     * @readonly\n     * @type {module:utils/locale~Locale}\n     */\n    this.locale = new Locale({\n      uiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n      contentLanguage: this.config.get('language.content')\n    });\n\n    /**\n     * Shorthand for {@link module:utils/locale~Locale#t}.\n     *\n     * @see module:utils/locale~Locale#t\n     * @method #t\n     */\n    this.t = this.locale.t;\n\n    /**\n     * A list of editors that this context instance is injected to.\n     *\n     * @readonly\n     * @type {module:utils/collection~Collection}\n     */\n    this.editors = new Collection();\n\n    /**\n     * Reference to the editor which created the context.\n     * Null when the context was created outside of the editor.\n     *\n     * It is used to destroy the context when removing the editor that has created the context.\n     *\n     * @private\n     * @type {module:core/editor/editor~Editor|null}\n     */\n    this._contextOwner = null;\n  }\n\n  /**\n   * Loads and initializes plugins specified in the configuration.\n   *\n   * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which resolves\n   * once the initialization is completed, providing an array of loaded plugins.\n   */\n  initPlugins() {\n    const plugins = this.config.get('plugins') || [];\n    const substitutePlugins = this.config.get('substitutePlugins') || [];\n\n    // Plugins for substitution should be checked as well.\n    for (const Plugin of plugins.concat(substitutePlugins)) {\n      if (typeof Plugin != 'function') {\n        /**\n         * Only a constructor function is allowed as a {@link module:core/contextplugin~ContextPlugin context plugin}.\n         *\n         * @error context-initplugins-constructor-only\n         */\n        throw new CKEditorError('context-initplugins-constructor-only', null, {\n          Plugin\n        });\n      }\n      if (Plugin.isContextPlugin !== true) {\n        /**\n         * Only a plugin marked as a {@link module:core/contextplugin~ContextPlugin.isContextPlugin context plugin}\n         * is allowed to be used with a context.\n         *\n         * @error context-initplugins-invalid-plugin\n         */\n        throw new CKEditorError('context-initplugins-invalid-plugin', null, {\n          Plugin\n        });\n      }\n    }\n    return this.plugins.init(plugins, [], substitutePlugins);\n  }\n\n  /**\n   * Destroys the context instance and all editors used with the context,\n   * releasing all resources used by the context.\n   *\n   * @returns {Promise} A promise that resolves once the context instance is fully destroyed.\n   */\n  destroy() {\n    return Promise.all(Array.from(this.editors, editor => editor.destroy())).then(() => this.plugins.destroy());\n  }\n\n  /**\n   * Adds a reference to the editor which is used with this context.\n   *\n   * When the given editor has created the context, the reference to this editor will be stored\n   * as a {@link ~Context#_contextOwner}.\n   *\n   * This method should only be used by the editor.\n   *\n   * @protected\n   * @param {module:core/editor/editor~Editor} editor\n   * @param {Boolean} isContextOwner Stores the given editor as a context owner.\n   */\n  _addEditor(editor, isContextOwner) {\n    if (this._contextOwner) {\n      /**\n       * Cannot add multiple editors to the context which is created by the editor.\n       *\n       * @error context-addeditor-private-context\n       */\n      throw new CKEditorError('context-addeditor-private-context');\n    }\n    this.editors.add(editor);\n    if (isContextOwner) {\n      this._contextOwner = editor;\n    }\n  }\n\n  /**\n   * Removes a reference to the editor which was used with this context.\n   * When the context was created by the given editor, the context will be destroyed.\n   *\n   * This method should only be used by the editor.\n   *\n   * @protected\n   * @param {module:core/editor/editor~Editor} editor\n   * @return {Promise} A promise that resolves once the editor is removed from the context or when the context was destroyed.\n   */\n  _removeEditor(editor) {\n    if (this.editors.has(editor)) {\n      this.editors.remove(editor);\n    }\n    if (this._contextOwner === editor) {\n      return this.destroy();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns the context configuration which will be copied to the editors created using this context.\n   *\n   * The configuration returned by this method has the plugins configuration removed &mdash; plugins are shared with all editors\n   * through another mechanism.\n   *\n   * This method should only be used by the editor.\n   *\n   * @protected\n   * @returns {Object} Configuration as a plain object.\n   */\n  _getEditorConfig() {\n    const result = {};\n    for (const name of this.config.names()) {\n      if (!['plugins', 'removePlugins', 'extraPlugins'].includes(name)) {\n        result[name] = this.config.get(name);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates and initializes a new context instance.\n   *\n   *\t\tconst commonConfig = { ... }; // Configuration for all the plugins and editors.\n   *\t\tconst editorPlugins = [ ... ]; // Regular plugins here.\n   *\n   *\t\tContext\n   *\t\t\t.create( {\n   *\t\t\t\t// Only context plugins here.\n   *\t\t\t\tplugins: [ ... ],\n   *\n   *\t\t\t\t// Configure the language for all the editors (it cannot be overwritten).\n   *\t\t\t\tlanguage: { ... },\n   *\n   *\t\t\t\t// Configuration for context plugins.\n   *\t\t\t\tcomments: { ... },\n   *\t\t\t\t...\n   *\n   *\t\t\t\t// Default configuration for editor plugins.\n   *\t\t\t\ttoolbar: { ... },\n   *\t\t\t\timage: { ... },\n   *\t\t\t\t...\n   *\t\t\t} )\n   *\t\t\t.then( context => {\n   *\t\t\t\tconst promises = [];\n   *\n   *\t\t\t\tpromises.push( ClassicEditor.create(\n   *\t\t\t\t\tdocument.getElementById( 'editor1' ),\n   *\t\t\t\t\t{\n   *\t\t\t\t\t\teditorPlugins,\n   *\t\t\t\t\t\tcontext\n   *\t\t\t\t\t}\n   *\t\t\t\t) );\n   *\n   *\t\t\t\tpromises.push( ClassicEditor.create(\n   *\t\t\t\t\tdocument.getElementById( 'editor2' ),\n   *\t\t\t\t\t{\n   *\t\t\t\t\t\teditorPlugins,\n   *\t\t\t\t\t\tcontext,\n   *\t\t\t\t\t\ttoolbar: { ... } // You can overwrite the configuration of the context.\n   *\t\t\t\t\t}\n   *\t\t\t\t) );\n   *\n   *\t\t\t\treturn Promise.all( promises );\n   *\t\t\t} );\n   *\n   * @param {Object} [config] The context configuration.\n   * @returns {Promise} A promise resolved once the context is ready. The promise resolves with the created context instance.\n   */\n  static create(config) {\n    return new Promise(resolve => {\n      const context = new this(config);\n      resolve(context.initPlugins().then(() => context));\n    });\n  }\n}\n\n/**\n * An array of plugins built into the `Context` class.\n *\n * It is used in CKEditor 5 builds featuring `Context` to provide a list of context plugins which are later automatically initialized\n * during the context initialization.\n *\n * They will be automatically initialized by `Context` unless `config.plugins` is passed.\n *\n *\t\t// Build some context plugins into the Context class first.\n *\t\tContext.builtinPlugins = [ FooPlugin, BarPlugin ];\n *\n *\t\t// Normally, you need to define config.plugins, but since Context.builtinPlugins was\n *\t\t// defined, now you can call create() without any configuration.\n *\t\tContext\n *\t\t\t.create()\n *\t\t\t.then( context => {\n *\t\t\t\tcontext.plugins.get( FooPlugin ); // -> An instance of the Foo plugin.\n *\t\t\t\tcontext.plugins.get( BarPlugin ); // -> An instance of the Bar plugin.\n *\t\t\t} );\n *\n * See also {@link module:core/context~Context.defaultConfig `Context.defaultConfig`}\n * and {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n *\n * @static\n * @member {Array.<Function>} module:core/context~Context.builtinPlugins\n */\n\n/**\n * The default configuration which is built into the `Context` class.\n *\n * It is used in CKEditor 5 builds featuring `Context` to provide the default configuration options which are later used during the\n * context initialization.\n *\n *\t\tContext.defaultConfig = {\n *\t\t\tfoo: 1,\n *\t\t\tbar: 2\n *\t\t};\n *\n *\t\tContext\n *\t\t\t.create()\n *\t\t\t.then( context => {\n *\t\t\t\tcontext.config.get( 'foo' ); // -> 1\n *\t\t\t\tcontext.config.get( 'bar' ); // -> 2\n *\t\t\t} );\n *\n *\t\t// The default options can be overridden by the configuration passed to create().\n *\t\tContext\n *\t\t\t.create( { bar: 3 } )\n *\t\t\t.then( context => {\n *\t\t\t\tcontext.config.get( 'foo' ); // -> 1\n *\t\t\t\tcontext.config.get( 'bar' ); // -> 3\n *\t\t\t} );\n *\n * See also {@link module:core/context~Context.builtinPlugins `Context.builtinPlugins`}\n * and {@link module:core/editor/editor~Editor.defaultConfig `Editor.defaultConfig`}.\n *\n * @static\n * @member {Object} module:core/context~Context.defaultConfig\n */","map":{"version":3,"names":["Config","Collection","PluginCollection","Locale","CKEditorError","Context","constructor","config","defaultConfig","availablePlugins","builtinPlugins","define","plugins","languageConfig","get","locale","uiLanguage","ui","contentLanguage","t","editors","_contextOwner","initPlugins","substitutePlugins","Plugin","concat","isContextPlugin","init","destroy","Promise","all","Array","from","editor","then","_addEditor","isContextOwner","add","_removeEditor","has","remove","resolve","_getEditorConfig","result","name","names","includes","create","context"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-core/src/context.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/context\n */\n\nimport Config from '@ckeditor/ckeditor5-utils/src/config';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport PluginCollection from './plugincollection';\nimport Locale from '@ckeditor/ckeditor5-utils/src/locale';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides a common, higher-level environment for solutions that use multiple {@link module:core/editor/editor~Editor editors}\n * or plugins that work outside the editor. Use it instead of {@link module:core/editor/editor~Editor.create `Editor.create()`}\n * in advanced application integrations.\n *\n * All configuration options passed to a context will be used as default options for editor instances initialized in that context.\n *\n * {@link module:core/contextplugin~ContextPlugin Context plugins} passed to a context instance will be shared among all\n * editor instances initialized in this context. These will be the same plugin instances for all the editors.\n *\n * **Note:** The context can only be initialized with {@link module:core/contextplugin~ContextPlugin context plugins}\n * (e.g. [comments](https://ckeditor.com/collaboration/comments/)). Regular {@link module:core/plugin~Plugin plugins} require an\n * editor instance to work and cannot be added to a context.\n *\n * **Note:** You can add a context plugin to an editor instance, though.\n *\n * If you are using multiple editor instances on one page and use any context plugins, create a context to share the configuration and\n * plugins among these editors. Some plugins will use the information about all existing editors to better integrate between them.\n *\n * If you are using plugins that do not require an editor to work (e.g. [comments](https://ckeditor.com/collaboration/comments/)),\n * enable and configure them using the context.\n *\n * If you are using only a single editor on each page, use {@link module:core/editor/editor~Editor.create `Editor.create()`} instead.\n * In such case, a context instance will be created by the editor instance in a transparent way.\n *\n * See {@link module:core/context~Context.create `Context.create()`} for usage examples.\n */\nexport default class Context {\n\t/**\n\t * Creates a context instance with a given configuration.\n\t *\n\t * Usually not to be used directly. See the static {@link module:core/context~Context.create `create()`} method.\n\t *\n\t * @param {Object} [config={}] The context configuration.\n\t */\n\tconstructor( config ) {\n\t\t/**\n\t\t * Stores all the configurations specific to this context instance.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils/config~Config}\n\t\t */\n\t\tthis.config = new Config( config, this.constructor.defaultConfig );\n\n\t\tconst availablePlugins = this.constructor.builtinPlugins;\n\n\t\tthis.config.define( 'plugins', availablePlugins );\n\n\t\t/**\n\t\t * The plugins loaded and in use by this context instance.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:core/plugincollection~PluginCollection}\n\t\t */\n\t\tthis.plugins = new PluginCollection( this, availablePlugins );\n\n\t\tconst languageConfig = this.config.get( 'language' ) || {};\n\n\t\t/**\n\t\t * @readonly\n\t\t * @type {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = new Locale( {\n\t\t\tuiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n\t\t\tcontentLanguage: this.config.get( 'language.content' )\n\t\t} );\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method #t\n\t\t */\n\t\tthis.t = this.locale.t;\n\n\t\t/**\n\t\t * A list of editors that this context instance is injected to.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils/collection~Collection}\n\t\t */\n\t\tthis.editors = new Collection();\n\n\t\t/**\n\t\t * Reference to the editor which created the context.\n\t\t * Null when the context was created outside of the editor.\n\t\t *\n\t\t * It is used to destroy the context when removing the editor that has created the context.\n\t\t *\n\t\t * @private\n\t\t * @type {module:core/editor/editor~Editor|null}\n\t\t */\n\t\tthis._contextOwner = null;\n\t}\n\n\t/**\n\t * Loads and initializes plugins specified in the configuration.\n\t *\n\t * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which resolves\n\t * once the initialization is completed, providing an array of loaded plugins.\n\t */\n\tinitPlugins() {\n\t\tconst plugins = this.config.get( 'plugins' ) || [];\n\t\tconst substitutePlugins = this.config.get( 'substitutePlugins' ) || [];\n\n\t\t// Plugins for substitution should be checked as well.\n\t\tfor ( const Plugin of plugins.concat( substitutePlugins ) ) {\n\t\t\tif ( typeof Plugin != 'function' ) {\n\t\t\t\t/**\n\t\t\t\t * Only a constructor function is allowed as a {@link module:core/contextplugin~ContextPlugin context plugin}.\n\t\t\t\t *\n\t\t\t\t * @error context-initplugins-constructor-only\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'context-initplugins-constructor-only',\n\t\t\t\t\tnull,\n\t\t\t\t\t{ Plugin }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( Plugin.isContextPlugin !== true ) {\n\t\t\t\t/**\n\t\t\t\t * Only a plugin marked as a {@link module:core/contextplugin~ContextPlugin.isContextPlugin context plugin}\n\t\t\t\t * is allowed to be used with a context.\n\t\t\t\t *\n\t\t\t\t * @error context-initplugins-invalid-plugin\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'context-initplugins-invalid-plugin',\n\t\t\t\t\tnull,\n\t\t\t\t\t{ Plugin }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn this.plugins.init( plugins, [], substitutePlugins );\n\t}\n\n\t/**\n\t * Destroys the context instance and all editors used with the context,\n\t * releasing all resources used by the context.\n\t *\n\t * @returns {Promise} A promise that resolves once the context instance is fully destroyed.\n\t */\n\tdestroy() {\n\t\treturn Promise.all( Array.from( this.editors, editor => editor.destroy() ) )\n\t\t\t.then( () => this.plugins.destroy() );\n\t}\n\n\t/**\n\t * Adds a reference to the editor which is used with this context.\n\t *\n\t * When the given editor has created the context, the reference to this editor will be stored\n\t * as a {@link ~Context#_contextOwner}.\n\t *\n\t * This method should only be used by the editor.\n\t *\n\t * @protected\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Boolean} isContextOwner Stores the given editor as a context owner.\n\t */\n\t_addEditor( editor, isContextOwner ) {\n\t\tif ( this._contextOwner ) {\n\t\t\t/**\n\t\t\t * Cannot add multiple editors to the context which is created by the editor.\n\t\t\t *\n\t\t\t * @error context-addeditor-private-context\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'context-addeditor-private-context' );\n\t\t}\n\n\t\tthis.editors.add( editor );\n\n\t\tif ( isContextOwner ) {\n\t\t\tthis._contextOwner = editor;\n\t\t}\n\t}\n\n\t/**\n\t * Removes a reference to the editor which was used with this context.\n\t * When the context was created by the given editor, the context will be destroyed.\n\t *\n\t * This method should only be used by the editor.\n\t *\n\t * @protected\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @return {Promise} A promise that resolves once the editor is removed from the context or when the context was destroyed.\n\t */\n\t_removeEditor( editor ) {\n\t\tif ( this.editors.has( editor ) ) {\n\t\t\tthis.editors.remove( editor );\n\t\t}\n\n\t\tif ( this._contextOwner === editor ) {\n\t\t\treturn this.destroy();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Returns the context configuration which will be copied to the editors created using this context.\n\t *\n\t * The configuration returned by this method has the plugins configuration removed &mdash; plugins are shared with all editors\n\t * through another mechanism.\n\t *\n\t * This method should only be used by the editor.\n\t *\n\t * @protected\n\t * @returns {Object} Configuration as a plain object.\n\t */\n\t_getEditorConfig() {\n\t\tconst result = {};\n\n\t\tfor ( const name of this.config.names() ) {\n\t\t\tif ( ![ 'plugins', 'removePlugins', 'extraPlugins' ].includes( name ) ) {\n\t\t\t\tresult[ name ] = this.config.get( name );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates and initializes a new context instance.\n\t *\n\t *\t\tconst commonConfig = { ... }; // Configuration for all the plugins and editors.\n\t *\t\tconst editorPlugins = [ ... ]; // Regular plugins here.\n\t *\n\t *\t\tContext\n\t *\t\t\t.create( {\n\t *\t\t\t\t// Only context plugins here.\n\t *\t\t\t\tplugins: [ ... ],\n\t *\n\t *\t\t\t\t// Configure the language for all the editors (it cannot be overwritten).\n\t *\t\t\t\tlanguage: { ... },\n\t *\n\t *\t\t\t\t// Configuration for context plugins.\n\t *\t\t\t\tcomments: { ... },\n\t *\t\t\t\t...\n\t *\n\t *\t\t\t\t// Default configuration for editor plugins.\n\t *\t\t\t\ttoolbar: { ... },\n\t *\t\t\t\timage: { ... },\n\t *\t\t\t\t...\n\t *\t\t\t} )\n\t *\t\t\t.then( context => {\n\t *\t\t\t\tconst promises = [];\n\t *\n\t *\t\t\t\tpromises.push( ClassicEditor.create(\n\t *\t\t\t\t\tdocument.getElementById( 'editor1' ),\n\t *\t\t\t\t\t{\n\t *\t\t\t\t\t\teditorPlugins,\n\t *\t\t\t\t\t\tcontext\n\t *\t\t\t\t\t}\n\t *\t\t\t\t) );\n\t *\n\t *\t\t\t\tpromises.push( ClassicEditor.create(\n\t *\t\t\t\t\tdocument.getElementById( 'editor2' ),\n\t *\t\t\t\t\t{\n\t *\t\t\t\t\t\teditorPlugins,\n\t *\t\t\t\t\t\tcontext,\n\t *\t\t\t\t\t\ttoolbar: { ... } // You can overwrite the configuration of the context.\n\t *\t\t\t\t\t}\n\t *\t\t\t\t) );\n\t *\n\t *\t\t\t\treturn Promise.all( promises );\n\t *\t\t\t} );\n\t *\n\t * @param {Object} [config] The context configuration.\n\t * @returns {Promise} A promise resolved once the context is ready. The promise resolves with the created context instance.\n\t */\n\tstatic create( config ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst context = new this( config );\n\n\t\t\tresolve( context.initPlugins().then( () => context ) );\n\t\t} );\n\t}\n}\n\n/**\n * An array of plugins built into the `Context` class.\n *\n * It is used in CKEditor 5 builds featuring `Context` to provide a list of context plugins which are later automatically initialized\n * during the context initialization.\n *\n * They will be automatically initialized by `Context` unless `config.plugins` is passed.\n *\n *\t\t// Build some context plugins into the Context class first.\n *\t\tContext.builtinPlugins = [ FooPlugin, BarPlugin ];\n *\n *\t\t// Normally, you need to define config.plugins, but since Context.builtinPlugins was\n *\t\t// defined, now you can call create() without any configuration.\n *\t\tContext\n *\t\t\t.create()\n *\t\t\t.then( context => {\n *\t\t\t\tcontext.plugins.get( FooPlugin ); // -> An instance of the Foo plugin.\n *\t\t\t\tcontext.plugins.get( BarPlugin ); // -> An instance of the Bar plugin.\n *\t\t\t} );\n *\n * See also {@link module:core/context~Context.defaultConfig `Context.defaultConfig`}\n * and {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n *\n * @static\n * @member {Array.<Function>} module:core/context~Context.builtinPlugins\n */\n\n/**\n * The default configuration which is built into the `Context` class.\n *\n * It is used in CKEditor 5 builds featuring `Context` to provide the default configuration options which are later used during the\n * context initialization.\n *\n *\t\tContext.defaultConfig = {\n *\t\t\tfoo: 1,\n *\t\t\tbar: 2\n *\t\t};\n *\n *\t\tContext\n *\t\t\t.create()\n *\t\t\t.then( context => {\n *\t\t\t\tcontext.config.get( 'foo' ); // -> 1\n *\t\t\t\tcontext.config.get( 'bar' ); // -> 2\n *\t\t\t} );\n *\n *\t\t// The default options can be overridden by the configuration passed to create().\n *\t\tContext\n *\t\t\t.create( { bar: 3 } )\n *\t\t\t.then( context => {\n *\t\t\t\tcontext.config.get( 'foo' ); // -> 1\n *\t\t\t\tcontext.config.get( 'bar' ); // -> 3\n *\t\t\t} );\n *\n * See also {@link module:core/context~Context.builtinPlugins `Context.builtinPlugins`}\n * and {@link module:core/editor/editor~Editor.defaultConfig `Editor.defaultConfig`}.\n *\n * @static\n * @member {Object} module:core/context~Context.defaultConfig\n */\n"],"mappings":"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;IAE1B,IAAKG,cAAc,EAAG;MACrB,IAAI,CAACf,aAAa,GAAGY,MAAM;IAC5B;EACD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCK,aAAa,CAAEL,MAAM,EAAG;IACvB,IAAK,IAAI,CAACb,OAAO,CAACmB,GAAG,CAAEN,MAAM,CAAE,EAAG;MACjC,IAAI,CAACb,OAAO,CAACoB,MAAM,CAAEP,MAAM,CAAE;IAC9B;IAEA,IAAK,IAAI,CAACZ,aAAa,KAAKY,MAAM,EAAG;MACpC,OAAO,IAAI,CAACL,OAAO,EAAE;IACtB;IAEA,OAAOC,OAAO,CAACY,OAAO,EAAE;EACzB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,gBAAgB,GAAG;IAClB,MAAMC,MAAM,GAAG,CAAC,CAAC;IAEjB,KAAM,MAAMC,IAAI,IAAI,IAAI,CAACrC,MAAM,CAACsC,KAAK,EAAE,EAAG;MACzC,IAAK,CAAC,CAAE,SAAS,EAAE,eAAe,EAAE,cAAc,CAAE,CAACC,QAAQ,CAAEF,IAAI,CAAE,EAAG;QACvED,MAAM,CAAEC,IAAI,CAAE,GAAG,IAAI,CAACrC,MAAM,CAACO,GAAG,CAAE8B,IAAI,CAAE;MACzC;IACD;IAEA,OAAOD,MAAM;EACd;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,OAAOI,MAAM,CAAExC,MAAM,EAAG;IACvB,OAAO,IAAIsB,OAAO,CAAEY,OAAO,IAAI;MAC9B,MAAMO,OAAO,GAAG,IAAI,IAAI,CAAEzC,MAAM,CAAE;MAElCkC,OAAO,CAAEO,OAAO,CAAC1B,WAAW,EAAE,CAACY,IAAI,CAAE,MAAMc,OAAO,CAAE,CAAE;IACvD,CAAC,CAAE;EACJ;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}