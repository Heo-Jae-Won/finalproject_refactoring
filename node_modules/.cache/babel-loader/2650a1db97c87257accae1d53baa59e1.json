{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/utils\n */\n\nimport DropdownPanelView from './dropdownpanelview';\nimport DropdownView from './dropdownview';\nimport DropdownButtonView from './button/dropdownbuttonview';\nimport ToolbarView from '../toolbar/toolbarview';\nimport ListView from '../list/listview';\nimport ListItemView from '../list/listitemview';\nimport ListSeparatorView from '../list/listseparatorview';\nimport ButtonView from '../button/buttonview';\nimport SwitchButtonView from '../button/switchbuttonview';\nimport clickOutsideHandler from '../bindings/clickoutsidehandler';\nimport { global, priorities, logWarning } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/dropdown/toolbardropdown.css';\nimport '../../theme/components/dropdown/listdropdown.css';\n\n/**\n * A helper for creating dropdowns. It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown},\n * with a {@link module:ui/dropdown/button/dropdownbutton~DropdownButton button},\n * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView panel} and all standard dropdown's behaviors.\n *\n * # Creating dropdowns\n *\n * By default, the default {@link module:ui/dropdown/button/dropdownbuttonview~DropdownButtonView} class is used as\n * definition of the button:\n *\n *\t\tconst dropdown = createDropdown( model );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * You can also provide other button views (they need to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface). For instance, you can use\n * {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} to create a dropdown with a split button.\n *\n *\t\tconst dropdown = createDropdown( locale, SplitButtonView );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.buttonView.on( 'execute', () => {\n *\t\t\t// Add the behavior of the \"action part\" of the split button.\n *\t\t\t// Split button consists of the \"action part\" and \"arrow part\".\n *\t\t\t// The arrow opens the dropdown while the action part can have some other behavior.\n * \t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * # Adding content to the dropdown's panel\n *\n * The content of the panel can be inserted directly into the `dropdown.panelView.element`:\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n * However, most of the time you will want to add there either a {@link module:ui/list/listview~ListView list of options}\n * or a list of buttons (i.e. a {@link module:ui/toolbar/toolbarview~ToolbarView toolbar}).\n * To simplify the task, you can use, respectively, {@link module:ui/dropdown/utils~addListToDropdown} or\n * {@link module:ui/dropdown/utils~addToolbarToDropdown} utils.\n *\n * @param {module:utils/locale~Locale} locale The locale instance.\n * @param {Function} ButtonClass The dropdown button view class. Needs to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\nexport function createDropdown(locale) {\n  let ButtonClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DropdownButtonView;\n  const buttonView = new ButtonClass(locale);\n  const panelView = new DropdownPanelView(locale);\n  const dropdownView = new DropdownView(locale, buttonView, panelView);\n  buttonView.bind('isEnabled').to(dropdownView);\n  if (buttonView instanceof DropdownButtonView) {\n    buttonView.bind('isOn').to(dropdownView, 'isOpen');\n  } else {\n    buttonView.arrowView.bind('isOn').to(dropdownView, 'isOpen');\n  }\n  addDefaultBehavior(dropdownView);\n  return dropdownView;\n}\n\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n *\n *\t\tconst buttons = [];\n *\n *\t\t// Either create a new ButtonView instance or create existing.\n *\t\tbuttons.push( new ButtonView() );\n *\t\tbuttons.push( editor.ui.componentFactory.create( 'someButton' ) );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddToolbarToDropdown( dropdown, buttons );\n *\n *\t\tdropdown.toolbarView.isVertical = true;\n *\n *\t\t// Will render a vertical button dropdown labeled \"A button dropdown\"\n *\t\t// with a button group in the panel containing two buttons.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * **Note:** To improve the accessibility, you can tell the dropdown to focus the first active button of the toolbar when the dropdown\n * {@link module:ui/dropdown/dropdownview~DropdownView#isOpen gets open}. See the documentation of `options` to learn more.\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ToolbarView` will be added.\n * @param {Iterable.<module:ui/button/buttonview~ButtonView>} buttons\n * @param {Object} [options]\n * @param {Boolean} [options.enableActiveItemFocusOnDropdownOpen=false] When set `true`, the focus will automatically move to the first\n * active {@link module:ui/toolbar/toolbarview~ToolbarView#items item} of the toolbar upon\n * {@link module:ui/dropdown/dropdownview~DropdownView#isOpen opening} the dropdown. Active items are those with the `isOn` property set\n * `true` (for instance {@link module:ui/button/buttonview~ButtonView buttons}). If no active items is found, the toolbar will be focused\n * as a whole resulting in the focus moving to its first focusable item (default behavior of\n * {@link module:ui/dropdown/dropdownview~DropdownView}).\n */\nexport function addToolbarToDropdown(dropdownView, buttons) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const locale = dropdownView.locale;\n  const t = locale.t;\n  const toolbarView = dropdownView.toolbarView = new ToolbarView(locale);\n  toolbarView.set('ariaLabel', t('Dropdown toolbar'));\n  dropdownView.extendTemplate({\n    attributes: {\n      class: ['ck-toolbar-dropdown']\n    }\n  });\n  buttons.map(view => toolbarView.items.add(view));\n  if (options.enableActiveItemFocusOnDropdownOpen) {\n    // Accessibility: Focus the first active button in the toolbar when the dropdown gets open.\n    focusChildOnDropdownOpen(dropdownView, () => toolbarView.items.find(item => item.isOn));\n  }\n  dropdownView.panelView.children.add(toolbarView);\n  toolbarView.items.delegate('execute').to(dropdownView);\n}\n\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n *\n *\t\tconst items = new Collection();\n *\n *\t\titems.add( {\n *\t\t\ttype: 'button',\n *\t\t\tmodel: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'First item',\n *\t\t\t\tlabelStyle: 'color: red'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\titems.add( {\n *\t\t\t type: 'button',\n *\t\t\t model: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'Second item',\n *\t\t\t\tlabelStyle: 'color: green',\n *\t\t\t\tclass: 'foo'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddListToDropdown( dropdown, items );\n *\n *\t\t// Will render a dropdown with a list in the panel containing two items.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * The `items` collection passed to this methods controls the presence and attributes of respective\n * {@link module:ui/list/listitemview~ListItemView list items}.\n *\n * **Note:** To improve the accessibility, when a list is added to the dropdown using this helper the dropdown will automatically attempt\n * to focus the first active item (a host to a {@link module:ui/button/buttonview~ButtonView} with\n * {@link module:ui/button/buttonview~ButtonView#isOn} set `true`) or the very first item when none are active.\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:list/list~List}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ListVIew` will be added.\n * @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} items\n * A collection of the list item definitions to populate the list.\n */\nexport function addListToDropdown(dropdownView, items) {\n  const locale = dropdownView.locale;\n  const listView = dropdownView.listView = new ListView(locale);\n  listView.items.bindTo(items).using(_ref => {\n    let {\n      type,\n      model\n    } = _ref;\n    if (type === 'separator') {\n      return new ListSeparatorView(locale);\n    } else if (type === 'button' || type === 'switchbutton') {\n      const listItemView = new ListItemView(locale);\n      let buttonView;\n      if (type === 'button') {\n        buttonView = new ButtonView(locale);\n      } else {\n        buttonView = new SwitchButtonView(locale);\n      }\n\n      // Bind all model properties to the button view.\n      buttonView.bind(...Object.keys(model)).to(model);\n      buttonView.delegate('execute').to(listItemView);\n      listItemView.children.add(buttonView);\n      return listItemView;\n    }\n  });\n  dropdownView.panelView.children.add(listView);\n  listView.items.delegate('execute').to(dropdownView);\n\n  // Accessibility: Focus the first active button in the list when the dropdown gets open.\n  focusChildOnDropdownOpen(dropdownView, () => listView.items.find(item => {\n    if (item instanceof ListItemView) {\n      return item.children.first.isOn;\n    }\n    return false;\n  }));\n}\n\n/**\n * A helper to be used on an existing {@link module:ui/dropdown/dropdownview~DropdownView} that focuses\n * a specific child in DOM when the dropdown {@link module:ui/dropdown/dropdownview~DropdownView#isOpen gets open}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which the focus behavior will be added.\n * @param {Function} childSelectorCallback A callback executed when the dropdown gets open. It should return a {@link module:ui/view~View}\n * instance (child of {@link module:ui/dropdown/dropdownview~DropdownView#panelView}) that will get focused or a falsy value.\n * If falsy value is returned, a default behavior of the dropdown will engage focusing the first focusable child in\n * the {@link module:ui/dropdown/dropdownview~DropdownView#panelView}.\n */\nexport function focusChildOnDropdownOpen(dropdownView, childSelectorCallback) {\n  dropdownView.on('change:isOpen', () => {\n    if (!dropdownView.isOpen) {\n      return;\n    }\n    const childToFocus = childSelectorCallback();\n    if (!childToFocus) {\n      return;\n    }\n    if (typeof childToFocus.focus === 'function') {\n      childToFocus.focus();\n    } else {\n      /**\n       * The child view of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown} is missing the `focus()` method\n       * and could not be focused when the dropdown got {@link module:ui/dropdown/dropdownview~DropdownView#isOpen open}.\n       *\n       * Making the content of a dropdown focusable in this case greatly improves the accessibility. Please make the view instance\n       * implements the {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable focusable interface} for the best user\n       * experience.\n       *\n       * @error ui-dropdown-focus-child-on-open-child-missing-focus\n       * @param {module:ui/view~View} view\n       */\n      logWarning('ui-dropdown-focus-child-on-open-child-missing-focus', {\n        view: childToFocus\n      });\n    }\n\n    // * Let the panel show up first (do not focus an invisible element).\n    // * Execute after focusDropdownPanelOnOpen(). See focusDropdownPanelOnOpen() to learn more.\n  }, {\n    priority: priorities.low - 10\n  });\n}\n\n// Add a set of default behaviors to dropdown view.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction addDefaultBehavior(dropdownView) {\n  closeDropdownOnClickOutside(dropdownView);\n  closeDropdownOnExecute(dropdownView);\n  closeDropdownOnBlur(dropdownView);\n  focusDropdownContentsOnArrows(dropdownView);\n  focusDropdownButtonOnClose(dropdownView);\n  focusDropdownPanelOnOpen(dropdownView);\n}\n\n// Adds a behavior to a dropdownView that closes opened dropdown when user clicks outside the dropdown.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnClickOutside(dropdownView) {\n  dropdownView.on('render', () => {\n    clickOutsideHandler({\n      emitter: dropdownView,\n      activator: () => dropdownView.isOpen,\n      callback: () => {\n        dropdownView.isOpen = false;\n      },\n      contextElements: [dropdownView.element]\n    });\n  });\n}\n\n// Adds a behavior to a dropdownView that closes the dropdown view on \"execute\" event.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnExecute(dropdownView) {\n  // Close the dropdown when one of the list items has been executed.\n  dropdownView.on('execute', evt => {\n    // Toggling a switch button view should not close the dropdown.\n    if (evt.source instanceof SwitchButtonView) {\n      return;\n    }\n    dropdownView.isOpen = false;\n  });\n}\n\n// Adds a behavior to a dropdown view that closes opened dropdown when it loses focus.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnBlur(dropdownView) {\n  dropdownView.focusTracker.on('change:isFocused', (evt, name, isFocused) => {\n    if (dropdownView.isOpen && !isFocused) {\n      dropdownView.isOpen = false;\n    }\n  });\n}\n\n// Adds a behavior to a dropdownView that focuses the dropdown's panel view contents on keystrokes.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction focusDropdownContentsOnArrows(dropdownView) {\n  // If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\n  dropdownView.keystrokes.set('arrowdown', (data, cancel) => {\n    if (dropdownView.isOpen) {\n      dropdownView.panelView.focus();\n      cancel();\n    }\n  });\n\n  // If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\n  dropdownView.keystrokes.set('arrowup', (data, cancel) => {\n    if (dropdownView.isOpen) {\n      dropdownView.panelView.focusLast();\n      cancel();\n    }\n  });\n}\n\n// Adds a behavior that focuses the #buttonView when the dropdown was closed but focus was within the #panelView element.\n// This makes sure the focus is never lost.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction focusDropdownButtonOnClose(dropdownView) {\n  dropdownView.on('change:isOpen', (evt, name, isOpen) => {\n    if (isOpen) {\n      return;\n    }\n\n    // If the dropdown was closed, move the focus back to the button (#12125).\n    // Don't touch the focus, if it moved somewhere else (e.g. moved to the editing root on #execute) (#12178).\n    // Note: Don't use the state of the DropdownView#focusTracker here. It fires #blur with the timeout.\n    if (dropdownView.panelView.element.contains(global.document.activeElement)) {\n      dropdownView.buttonView.focus();\n    }\n  });\n}\n\n// Adds a behavior that focuses the #panelView when dropdown gets open (accessibility).\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction focusDropdownPanelOnOpen(dropdownView) {\n  dropdownView.on('change:isOpen', (evt, name, isOpen) => {\n    if (!isOpen) {\n      return;\n    }\n\n    // Focus the first item in the dropdown when the dropdown opened.\n    dropdownView.panelView.focus();\n\n    // * Let the panel show up first (do not focus an invisible element).\n    // * Also, execute before focusChildOnDropdownOpen() to make sure this helper does not break the\n    //   focus of a specific child by kicking in too late and resetting the focus in the panel.\n  }, {\n    priority: 'low'\n  });\n}\n\n/**\n * A definition of the list item used by the {@link module:ui/dropdown/utils~addListToDropdown}\n * utility.\n *\n * @typedef {Object} module:ui/dropdown/utils~ListDropdownItemDefinition\n *\n * @property {String} type Either `'separator'`, `'button'` or `'switchbutton'`.\n * @property {module:ui/model~Model} [model] Model of the item (when **not** `'separator'`).\n * Its properties fuel the newly created list item (or its children, depending on the `type`).\n */","map":{"version":3,"names":["DropdownPanelView","DropdownView","DropdownButtonView","ToolbarView","ListView","ListItemView","ListSeparatorView","ButtonView","SwitchButtonView","clickOutsideHandler","global","priorities","logWarning","createDropdown","locale","ButtonClass","buttonView","panelView","dropdownView","bind","to","arrowView","addDefaultBehavior","addToolbarToDropdown","buttons","options","t","toolbarView","set","extendTemplate","attributes","class","map","view","items","add","enableActiveItemFocusOnDropdownOpen","focusChildOnDropdownOpen","find","item","isOn","children","delegate","addListToDropdown","listView","bindTo","using","type","model","listItemView","Object","keys","first","childSelectorCallback","on","isOpen","childToFocus","focus","priority","low","closeDropdownOnClickOutside","closeDropdownOnExecute","closeDropdownOnBlur","focusDropdownContentsOnArrows","focusDropdownButtonOnClose","focusDropdownPanelOnOpen","emitter","activator","callback","contextElements","element","evt","source","focusTracker","name","isFocused","keystrokes","data","cancel","focusLast","contains","document","activeElement"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-ui/src/dropdown/utils.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/utils\n */\n\nimport DropdownPanelView from './dropdownpanelview';\nimport DropdownView from './dropdownview';\nimport DropdownButtonView from './button/dropdownbuttonview';\nimport ToolbarView from '../toolbar/toolbarview';\nimport ListView from '../list/listview';\nimport ListItemView from '../list/listitemview';\nimport ListSeparatorView from '../list/listseparatorview';\nimport ButtonView from '../button/buttonview';\nimport SwitchButtonView from '../button/switchbuttonview';\n\nimport clickOutsideHandler from '../bindings/clickoutsidehandler';\n\nimport { global, priorities, logWarning } from '@ckeditor/ckeditor5-utils';\n\nimport '../../theme/components/dropdown/toolbardropdown.css';\nimport '../../theme/components/dropdown/listdropdown.css';\n\n/**\n * A helper for creating dropdowns. It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown},\n * with a {@link module:ui/dropdown/button/dropdownbutton~DropdownButton button},\n * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView panel} and all standard dropdown's behaviors.\n *\n * # Creating dropdowns\n *\n * By default, the default {@link module:ui/dropdown/button/dropdownbuttonview~DropdownButtonView} class is used as\n * definition of the button:\n *\n *\t\tconst dropdown = createDropdown( model );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * You can also provide other button views (they need to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface). For instance, you can use\n * {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} to create a dropdown with a split button.\n *\n *\t\tconst dropdown = createDropdown( locale, SplitButtonView );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.buttonView.on( 'execute', () => {\n *\t\t\t// Add the behavior of the \"action part\" of the split button.\n *\t\t\t// Split button consists of the \"action part\" and \"arrow part\".\n *\t\t\t// The arrow opens the dropdown while the action part can have some other behavior.\n * \t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * # Adding content to the dropdown's panel\n *\n * The content of the panel can be inserted directly into the `dropdown.panelView.element`:\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n * However, most of the time you will want to add there either a {@link module:ui/list/listview~ListView list of options}\n * or a list of buttons (i.e. a {@link module:ui/toolbar/toolbarview~ToolbarView toolbar}).\n * To simplify the task, you can use, respectively, {@link module:ui/dropdown/utils~addListToDropdown} or\n * {@link module:ui/dropdown/utils~addToolbarToDropdown} utils.\n *\n * @param {module:utils/locale~Locale} locale The locale instance.\n * @param {Function} ButtonClass The dropdown button view class. Needs to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\nexport function createDropdown( locale, ButtonClass = DropdownButtonView ) {\n\tconst buttonView = new ButtonClass( locale );\n\n\tconst panelView = new DropdownPanelView( locale );\n\tconst dropdownView = new DropdownView( locale, buttonView, panelView );\n\n\tbuttonView.bind( 'isEnabled' ).to( dropdownView );\n\n\tif ( buttonView instanceof DropdownButtonView ) {\n\t\tbuttonView.bind( 'isOn' ).to( dropdownView, 'isOpen' );\n\t} else {\n\t\tbuttonView.arrowView.bind( 'isOn' ).to( dropdownView, 'isOpen' );\n\t}\n\n\taddDefaultBehavior( dropdownView );\n\n\treturn dropdownView;\n}\n\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n *\n *\t\tconst buttons = [];\n *\n *\t\t// Either create a new ButtonView instance or create existing.\n *\t\tbuttons.push( new ButtonView() );\n *\t\tbuttons.push( editor.ui.componentFactory.create( 'someButton' ) );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddToolbarToDropdown( dropdown, buttons );\n *\n *\t\tdropdown.toolbarView.isVertical = true;\n *\n *\t\t// Will render a vertical button dropdown labeled \"A button dropdown\"\n *\t\t// with a button group in the panel containing two buttons.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * **Note:** To improve the accessibility, you can tell the dropdown to focus the first active button of the toolbar when the dropdown\n * {@link module:ui/dropdown/dropdownview~DropdownView#isOpen gets open}. See the documentation of `options` to learn more.\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ToolbarView` will be added.\n * @param {Iterable.<module:ui/button/buttonview~ButtonView>} buttons\n * @param {Object} [options]\n * @param {Boolean} [options.enableActiveItemFocusOnDropdownOpen=false] When set `true`, the focus will automatically move to the first\n * active {@link module:ui/toolbar/toolbarview~ToolbarView#items item} of the toolbar upon\n * {@link module:ui/dropdown/dropdownview~DropdownView#isOpen opening} the dropdown. Active items are those with the `isOn` property set\n * `true` (for instance {@link module:ui/button/buttonview~ButtonView buttons}). If no active items is found, the toolbar will be focused\n * as a whole resulting in the focus moving to its first focusable item (default behavior of\n * {@link module:ui/dropdown/dropdownview~DropdownView}).\n */\nexport function addToolbarToDropdown( dropdownView, buttons, options = {} ) {\n\tconst locale = dropdownView.locale;\n\tconst t = locale.t;\n\tconst toolbarView = dropdownView.toolbarView = new ToolbarView( locale );\n\n\ttoolbarView.set( 'ariaLabel', t( 'Dropdown toolbar' ) );\n\n\tdropdownView.extendTemplate( {\n\t\tattributes: {\n\t\t\tclass: [ 'ck-toolbar-dropdown' ]\n\t\t}\n\t} );\n\n\tbuttons.map( view => toolbarView.items.add( view ) );\n\n\tif ( options.enableActiveItemFocusOnDropdownOpen ) {\n\t\t// Accessibility: Focus the first active button in the toolbar when the dropdown gets open.\n\t\tfocusChildOnDropdownOpen( dropdownView, () => toolbarView.items.find( item => item.isOn ) );\n\t}\n\n\tdropdownView.panelView.children.add( toolbarView );\n\ttoolbarView.items.delegate( 'execute' ).to( dropdownView );\n}\n\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n *\n *\t\tconst items = new Collection();\n *\n *\t\titems.add( {\n *\t\t\ttype: 'button',\n *\t\t\tmodel: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'First item',\n *\t\t\t\tlabelStyle: 'color: red'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\titems.add( {\n *\t\t\t type: 'button',\n *\t\t\t model: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'Second item',\n *\t\t\t\tlabelStyle: 'color: green',\n *\t\t\t\tclass: 'foo'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddListToDropdown( dropdown, items );\n *\n *\t\t// Will render a dropdown with a list in the panel containing two items.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * The `items` collection passed to this methods controls the presence and attributes of respective\n * {@link module:ui/list/listitemview~ListItemView list items}.\n *\n * **Note:** To improve the accessibility, when a list is added to the dropdown using this helper the dropdown will automatically attempt\n * to focus the first active item (a host to a {@link module:ui/button/buttonview~ButtonView} with\n * {@link module:ui/button/buttonview~ButtonView#isOn} set `true`) or the very first item when none are active.\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:list/list~List}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ListVIew` will be added.\n * @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} items\n * A collection of the list item definitions to populate the list.\n */\nexport function addListToDropdown( dropdownView, items ) {\n\tconst locale = dropdownView.locale;\n\tconst listView = dropdownView.listView = new ListView( locale );\n\n\tlistView.items.bindTo( items ).using( ( { type, model } ) => {\n\t\tif ( type === 'separator' ) {\n\t\t\treturn new ListSeparatorView( locale );\n\t\t} else if ( type === 'button' || type === 'switchbutton' ) {\n\t\t\tconst listItemView = new ListItemView( locale );\n\t\t\tlet buttonView;\n\n\t\t\tif ( type === 'button' ) {\n\t\t\t\tbuttonView = new ButtonView( locale );\n\t\t\t} else {\n\t\t\t\tbuttonView = new SwitchButtonView( locale );\n\t\t\t}\n\n\t\t\t// Bind all model properties to the button view.\n\t\t\tbuttonView.bind( ...Object.keys( model ) ).to( model );\n\t\t\tbuttonView.delegate( 'execute' ).to( listItemView );\n\n\t\t\tlistItemView.children.add( buttonView );\n\n\t\t\treturn listItemView;\n\t\t}\n\t} );\n\n\tdropdownView.panelView.children.add( listView );\n\n\tlistView.items.delegate( 'execute' ).to( dropdownView );\n\n\t// Accessibility: Focus the first active button in the list when the dropdown gets open.\n\tfocusChildOnDropdownOpen( dropdownView, () => listView.items.find( item => {\n\t\tif ( item instanceof ListItemView ) {\n\t\t\treturn item.children.first.isOn;\n\t\t}\n\n\t\treturn false;\n\t} ) );\n}\n\n/**\n * A helper to be used on an existing {@link module:ui/dropdown/dropdownview~DropdownView} that focuses\n * a specific child in DOM when the dropdown {@link module:ui/dropdown/dropdownview~DropdownView#isOpen gets open}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which the focus behavior will be added.\n * @param {Function} childSelectorCallback A callback executed when the dropdown gets open. It should return a {@link module:ui/view~View}\n * instance (child of {@link module:ui/dropdown/dropdownview~DropdownView#panelView}) that will get focused or a falsy value.\n * If falsy value is returned, a default behavior of the dropdown will engage focusing the first focusable child in\n * the {@link module:ui/dropdown/dropdownview~DropdownView#panelView}.\n */\nexport function focusChildOnDropdownOpen( dropdownView, childSelectorCallback ) {\n\tdropdownView.on( 'change:isOpen', () => {\n\t\tif ( !dropdownView.isOpen ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst childToFocus = childSelectorCallback();\n\n\t\tif ( !childToFocus ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( typeof childToFocus.focus === 'function' ) {\n\t\t\tchildToFocus.focus();\n\t\t} else {\n\t\t\t/**\n\t\t\t * The child view of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown} is missing the `focus()` method\n\t\t\t * and could not be focused when the dropdown got {@link module:ui/dropdown/dropdownview~DropdownView#isOpen open}.\n\t\t\t *\n\t\t\t * Making the content of a dropdown focusable in this case greatly improves the accessibility. Please make the view instance\n\t\t\t * implements the {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable focusable interface} for the best user\n\t\t\t * experience.\n\t\t\t *\n\t\t\t * @error ui-dropdown-focus-child-on-open-child-missing-focus\n\t\t\t * @param {module:ui/view~View} view\n\t\t\t */\n\t\t\tlogWarning( 'ui-dropdown-focus-child-on-open-child-missing-focus', { view: childToFocus } );\n\t\t}\n\n\t// * Let the panel show up first (do not focus an invisible element).\n\t// * Execute after focusDropdownPanelOnOpen(). See focusDropdownPanelOnOpen() to learn more.\n\t}, { priority: priorities.low - 10 } );\n}\n\n// Add a set of default behaviors to dropdown view.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction addDefaultBehavior( dropdownView ) {\n\tcloseDropdownOnClickOutside( dropdownView );\n\tcloseDropdownOnExecute( dropdownView );\n\tcloseDropdownOnBlur( dropdownView );\n\tfocusDropdownContentsOnArrows( dropdownView );\n\tfocusDropdownButtonOnClose( dropdownView );\n\tfocusDropdownPanelOnOpen( dropdownView );\n}\n\n// Adds a behavior to a dropdownView that closes opened dropdown when user clicks outside the dropdown.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnClickOutside( dropdownView ) {\n\tdropdownView.on( 'render', () => {\n\t\tclickOutsideHandler( {\n\t\t\temitter: dropdownView,\n\t\t\tactivator: () => dropdownView.isOpen,\n\t\t\tcallback: () => {\n\t\t\t\tdropdownView.isOpen = false;\n\t\t\t},\n\t\t\tcontextElements: [ dropdownView.element ]\n\t\t} );\n\t} );\n}\n\n// Adds a behavior to a dropdownView that closes the dropdown view on \"execute\" event.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnExecute( dropdownView ) {\n\t// Close the dropdown when one of the list items has been executed.\n\tdropdownView.on( 'execute', evt => {\n\t\t// Toggling a switch button view should not close the dropdown.\n\t\tif ( evt.source instanceof SwitchButtonView ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdropdownView.isOpen = false;\n\t} );\n}\n\n// Adds a behavior to a dropdown view that closes opened dropdown when it loses focus.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnBlur( dropdownView ) {\n\tdropdownView.focusTracker.on( 'change:isFocused', ( evt, name, isFocused ) => {\n\t\tif ( dropdownView.isOpen && !isFocused ) {\n\t\t\tdropdownView.isOpen = false;\n\t\t}\n\t} );\n}\n\n// Adds a behavior to a dropdownView that focuses the dropdown's panel view contents on keystrokes.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction focusDropdownContentsOnArrows( dropdownView ) {\n\t// If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\n\tdropdownView.keystrokes.set( 'arrowdown', ( data, cancel ) => {\n\t\tif ( dropdownView.isOpen ) {\n\t\t\tdropdownView.panelView.focus();\n\t\t\tcancel();\n\t\t}\n\t} );\n\n\t// If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\n\tdropdownView.keystrokes.set( 'arrowup', ( data, cancel ) => {\n\t\tif ( dropdownView.isOpen ) {\n\t\t\tdropdownView.panelView.focusLast();\n\t\t\tcancel();\n\t\t}\n\t} );\n}\n\n// Adds a behavior that focuses the #buttonView when the dropdown was closed but focus was within the #panelView element.\n// This makes sure the focus is never lost.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction focusDropdownButtonOnClose( dropdownView ) {\n\tdropdownView.on( 'change:isOpen', ( evt, name, isOpen ) => {\n\t\tif ( isOpen ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If the dropdown was closed, move the focus back to the button (#12125).\n\t\t// Don't touch the focus, if it moved somewhere else (e.g. moved to the editing root on #execute) (#12178).\n\t\t// Note: Don't use the state of the DropdownView#focusTracker here. It fires #blur with the timeout.\n\t\tif ( dropdownView.panelView.element.contains( global.document.activeElement ) ) {\n\t\t\tdropdownView.buttonView.focus();\n\t\t}\n\t} );\n}\n\n// Adds a behavior that focuses the #panelView when dropdown gets open (accessibility).\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction focusDropdownPanelOnOpen( dropdownView ) {\n\tdropdownView.on( 'change:isOpen', ( evt, name, isOpen ) => {\n\t\tif ( !isOpen ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Focus the first item in the dropdown when the dropdown opened.\n\t\tdropdownView.panelView.focus();\n\n\t// * Let the panel show up first (do not focus an invisible element).\n\t// * Also, execute before focusChildOnDropdownOpen() to make sure this helper does not break the\n\t//   focus of a specific child by kicking in too late and resetting the focus in the panel.\n\t}, { priority: 'low' } );\n}\n\n/**\n * A definition of the list item used by the {@link module:ui/dropdown/utils~addListToDropdown}\n * utility.\n *\n * @typedef {Object} module:ui/dropdown/utils~ListDropdownItemDefinition\n *\n * @property {String} type Either `'separator'`, `'button'` or `'switchbutton'`.\n * @property {module:ui/model~Model} [model] Model of the item (when **not** `'separator'`).\n * Its properties fuel the newly created list item (or its children, depending on the `type`).\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}