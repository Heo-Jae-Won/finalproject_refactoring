{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/elementreplacer\n */\n/**\n * Utility class allowing to hide existing HTML elements or replace them with given ones in a way that doesn't remove\n * the original elements from the DOM.\n */\nexport default class ElementReplacer {\n  constructor() {\n    this._replacedElements = [];\n  }\n  /**\n   * Hides the `element` and, if specified, inserts the the given element next to it.\n   *\n   * The effect of this method can be reverted by {@link #restore}.\n   *\n   * @param {HTMLElement} element The element to replace.\n   * @param {HTMLElement} [newElement] The replacement element. If not passed, then the `element` will just be hidden.\n   */\n  replace(element, newElement) {\n    this._replacedElements.push({\n      element,\n      newElement\n    });\n    element.style.display = 'none';\n    if (newElement) {\n      element.parentNode.insertBefore(newElement, element.nextSibling);\n    }\n  }\n  /**\n   * Restores what {@link #replace} did.\n   */\n  restore() {\n    this._replacedElements.forEach(_ref => {\n      let {\n        element,\n        newElement\n      } = _ref;\n      element.style.display = '';\n      if (newElement) {\n        newElement.remove();\n      }\n    });\n    this._replacedElements = [];\n  }\n}","map":{"version":3,"names":["ElementReplacer","constructor","_replacedElements","replace","element","newElement","push","style","display","parentNode","insertBefore","nextSibling","restore","forEach","remove"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/elementreplacer.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/elementreplacer\n */\n/**\n * Utility class allowing to hide existing HTML elements or replace them with given ones in a way that doesn't remove\n * the original elements from the DOM.\n */\nexport default class ElementReplacer {\n    constructor() {\n        this._replacedElements = [];\n    }\n    /**\n     * Hides the `element` and, if specified, inserts the the given element next to it.\n     *\n     * The effect of this method can be reverted by {@link #restore}.\n     *\n     * @param {HTMLElement} element The element to replace.\n     * @param {HTMLElement} [newElement] The replacement element. If not passed, then the `element` will just be hidden.\n     */\n    replace(element, newElement) {\n        this._replacedElements.push({ element, newElement });\n        element.style.display = 'none';\n        if (newElement) {\n            element.parentNode.insertBefore(newElement, element.nextSibling);\n        }\n    }\n    /**\n     * Restores what {@link #replace} did.\n     */\n    restore() {\n        this._replacedElements.forEach(({ element, newElement }) => {\n            element.style.display = '';\n            if (newElement) {\n                newElement.remove();\n            }\n        });\n        this._replacedElements = [];\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMA,eAAe,CAAC;EACjCC,WAAW,GAAG;IACV,IAAI,CAACC,iBAAiB,GAAG,EAAE;EAC/B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,OAAO,CAACC,OAAO,EAAEC,UAAU,EAAE;IACzB,IAAI,CAACH,iBAAiB,CAACI,IAAI,CAAC;MAAEF,OAAO;MAAEC;IAAW,CAAC,CAAC;IACpDD,OAAO,CAACG,KAAK,CAACC,OAAO,GAAG,MAAM;IAC9B,IAAIH,UAAU,EAAE;MACZD,OAAO,CAACK,UAAU,CAACC,YAAY,CAACL,UAAU,EAAED,OAAO,CAACO,WAAW,CAAC;IACpE;EACJ;EACA;AACJ;AACA;EACIC,OAAO,GAAG;IACN,IAAI,CAACV,iBAAiB,CAACW,OAAO,CAAC,QAA6B;MAAA,IAA5B;QAAET,OAAO;QAAEC;MAAW,CAAC;MACnDD,OAAO,CAACG,KAAK,CAACC,OAAO,GAAG,EAAE;MAC1B,IAAIH,UAAU,EAAE;QACZA,UAAU,CAACS,MAAM,EAAE;MACvB;IACJ,CAAC,CAAC;IACF,IAAI,CAACZ,iBAAiB,GAAG,EAAE;EAC/B;AACJ"},"metadata":{},"sourceType":"module"}