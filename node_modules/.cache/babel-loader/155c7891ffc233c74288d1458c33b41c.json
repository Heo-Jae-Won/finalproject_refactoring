{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/ckeditorerror\n */\n/* globals console */\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL = 'https://ckeditor.com/docs/ckeditor5/latest/support/error-codes.html';\n/**\n * The CKEditor error class.\n *\n * You should throw `CKEditorError` when:\n *\n * * An unexpected situation occurred and the editor (most probably) will not work properly. Such exception will be handled\n * by the {@link module:watchdog/watchdog~Watchdog watchdog} (if it is integrated),\n * * If the editor is incorrectly integrated or the editor API is used in the wrong way. This way you will give\n * feedback to the developer as soon as possible. Keep in mind that for common integration issues which should not\n * stop editor initialization (like missing upload adapter, wrong name of a toolbar component) we use\n * {@link module:utils/ckeditorerror~logWarning `logWarning()`} and\n * {@link module:utils/ckeditorerror~logError `logError()`}\n * to improve developers experience and let them see the a working editor as soon as possible.\n *\n *\t\t/**\n *\t\t * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\n *\t\t *\n *\t\t * @error plugin-load\n *\t\t * @param pluginName The name of the plugin that could not be loaded.\n *\t\t * @param moduleName The name of the module which tried to load this plugin.\n *\t\t * /\n *\t\tthrow new CKEditorError( 'plugin-load', {\n *\t\t\tpluginName: 'foo',\n *\t\t\tmoduleName: 'bar'\n *\t\t} );\n *\n * @extends Error\n */\nexport default class CKEditorError extends Error {\n  /**\n   * Creates an instance of the CKEditorError class.\n   *\n   * @param {String} errorName The error id in an `error-name` format. A link to this error documentation page will be added\n   * to the thrown error's `message`.\n   * @param {Object|null} context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}\n   * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also\n   * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).\n   * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility\n   * to check if the object works as the context.\n   * @param {Object} [data] Additional data describing the error. A stringified version of this object\n   * will be appended to the error message, so the data are quickly visible in the console. The original\n   * data object will also be later available under the {@link #data} property.\n   */\n  constructor(errorName, context, data) {\n    super(getErrorMessage(errorName, data));\n    /**\n     * @type {String}\n     */\n    this.name = 'CKEditorError';\n    /**\n     * A context of the error by which the Watchdog is able to determine which editor crashed.\n     *\n     * @type {Object|null}\n     */\n    this.context = context;\n    /**\n     * The additional error data passed to the constructor. Undefined if none was passed.\n     *\n     * @type {Object|undefined}\n     */\n    this.data = data;\n  }\n  /**\n   * Checks if the error is of the `CKEditorError` type.\n   * @returns {Boolean}\n   */\n  is(type) {\n    return type === 'CKEditorError';\n  }\n  /**\n   * A utility that ensures that the thrown error is a {@link module:utils/ckeditorerror~CKEditorError} one.\n   * It is useful when combined with the {@link module:watchdog/watchdog~Watchdog} feature, which can restart the editor in case\n   * of a {@link module:utils/ckeditorerror~CKEditorError} error.\n   *\n   * @static\n   * @param {Error} err The error to rethrow.\n   * @param {Object} context An object connected through properties with the editor instance. This context will be used\n   * by the watchdog to verify which editor should be restarted.\n   */\n  static rethrowUnexpectedError(err, context) {\n    if (err.is && err.is('CKEditorError')) {\n      throw err;\n    }\n    /**\n     * An unexpected error occurred inside the CKEditor 5 codebase. This error will look like the original one\n     * to make the debugging easier.\n     *\n     * This error is only useful when the editor is initialized using the {@link module:watchdog/watchdog~Watchdog} feature.\n     * In case of such error (or any {@link module:utils/ckeditorerror~CKEditorError} error) the watchdog should restart the editor.\n     *\n     * @error unexpected-error\n     */\n    const error = new CKEditorError(err.message, context);\n    // Restore the original stack trace to make the error look like the original one.\n    // See https://github.com/ckeditor/ckeditor5/issues/5595 for more details.\n    error.stack = err.stack;\n    throw error;\n  }\n}\n/**\n * Logs a warning to the console with a properly formatted message and adds a link to the documentation.\n * Use whenever you want to log a warning to the console.\n *\n *\t\t/**\n *\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t * name does not exist, so it was omitted when rendering the toolbar.\n *\t\t *\n *\t\t * @error toolbarview-item-unavailable\n *\t\t * @param {String} name The name of the component.\n *\t\t * /\n *\t\tlogWarning( 'toolbarview-item-unavailable', { name } );\n *\n * See also {@link module:utils/ckeditorerror~CKEditorError} for an explanation when to throw an error and when to log\n * a warning or an error to the console.\n *\n * @param {String} errorName The error name to be logged.\n * @param {Object} [data] Additional data to be logged.\n */\nexport function logWarning(errorName, data) {\n  console.warn(...formatConsoleArguments(errorName, data));\n}\n/**\n * Logs an error to the console with a properly formatted message and adds a link to the documentation.\n * Use whenever you want to log an error to the console.\n *\n *\t\t/**\n *\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t * name does not exist, so it was omitted when rendering the toolbar.\n *\t\t *\n *\t\t * @error toolbarview-item-unavailable\n *\t\t * @param {String} name The name of the component.\n *\t\t * /\n *\t\t logError( 'toolbarview-item-unavailable', { name } );\n *\n * **Note**: In most cases logging a warning using {@link module:utils/ckeditorerror~logWarning} is enough.\n *\n * See also {@link module:utils/ckeditorerror~CKEditorError} for an explanation when to use each method.\n *\n * @param {String} errorName The error name to be logged.\n * @param {Object} [data] Additional data to be logged.\n */\nexport function logError(errorName, data) {\n  console.error(...formatConsoleArguments(errorName, data));\n}\n// Returns formatted link to documentation message.\n//\n// @private\n// @param {String} errorName\n// @returns {string}\nfunction getLinkToDocumentationMessage(errorName) {\n  return `\\nRead more: ${DOCUMENTATION_URL}#error-${errorName}`;\n}\n// Returns formatted error message.\n//\n// @private\n// @param {String} errorName\n// @param {Object} [data]\n// @returns {string}\nfunction getErrorMessage(errorName, data) {\n  const processedObjects = new WeakSet();\n  const circularReferencesReplacer = (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (processedObjects.has(value)) {\n        return `[object ${value.constructor.name}]`;\n      }\n      processedObjects.add(value);\n    }\n    return value;\n  };\n  const stringifiedData = data ? ` ${JSON.stringify(data, circularReferencesReplacer)}` : '';\n  const documentationLink = getLinkToDocumentationMessage(errorName);\n  return errorName + stringifiedData + documentationLink;\n}\n// Returns formatted console error arguments.\n//\n// @private\n// @param {String} errorName\n// @param {Object} [data]\n// @returns {Array}\nfunction formatConsoleArguments(errorName, data) {\n  const documentationMessage = getLinkToDocumentationMessage(errorName);\n  return data ? [errorName, data, documentationMessage] : [errorName, documentationMessage];\n}","map":{"version":3,"names":["DOCUMENTATION_URL","CKEditorError","Error","constructor","errorName","context","data","getErrorMessage","name","is","type","rethrowUnexpectedError","err","error","message","stack","logWarning","console","warn","formatConsoleArguments","logError","getLinkToDocumentationMessage","processedObjects","WeakSet","circularReferencesReplacer","key","value","has","add","stringifiedData","JSON","stringify","documentationLink","documentationMessage"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/ckeditorerror\n */\n/* globals console */\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL = 'https://ckeditor.com/docs/ckeditor5/latest/support/error-codes.html';\n/**\n * The CKEditor error class.\n *\n * You should throw `CKEditorError` when:\n *\n * * An unexpected situation occurred and the editor (most probably) will not work properly. Such exception will be handled\n * by the {@link module:watchdog/watchdog~Watchdog watchdog} (if it is integrated),\n * * If the editor is incorrectly integrated or the editor API is used in the wrong way. This way you will give\n * feedback to the developer as soon as possible. Keep in mind that for common integration issues which should not\n * stop editor initialization (like missing upload adapter, wrong name of a toolbar component) we use\n * {@link module:utils/ckeditorerror~logWarning `logWarning()`} and\n * {@link module:utils/ckeditorerror~logError `logError()`}\n * to improve developers experience and let them see the a working editor as soon as possible.\n *\n *\t\t/**\n *\t\t * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\n *\t\t *\n *\t\t * @error plugin-load\n *\t\t * @param pluginName The name of the plugin that could not be loaded.\n *\t\t * @param moduleName The name of the module which tried to load this plugin.\n *\t\t * /\n *\t\tthrow new CKEditorError( 'plugin-load', {\n *\t\t\tpluginName: 'foo',\n *\t\t\tmoduleName: 'bar'\n *\t\t} );\n *\n * @extends Error\n */\nexport default class CKEditorError extends Error {\n    /**\n     * Creates an instance of the CKEditorError class.\n     *\n     * @param {String} errorName The error id in an `error-name` format. A link to this error documentation page will be added\n     * to the thrown error's `message`.\n     * @param {Object|null} context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}\n     * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also\n     * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).\n     * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility\n     * to check if the object works as the context.\n     * @param {Object} [data] Additional data describing the error. A stringified version of this object\n     * will be appended to the error message, so the data are quickly visible in the console. The original\n     * data object will also be later available under the {@link #data} property.\n     */\n    constructor(errorName, context, data) {\n        super(getErrorMessage(errorName, data));\n        /**\n         * @type {String}\n         */\n        this.name = 'CKEditorError';\n        /**\n         * A context of the error by which the Watchdog is able to determine which editor crashed.\n         *\n         * @type {Object|null}\n         */\n        this.context = context;\n        /**\n         * The additional error data passed to the constructor. Undefined if none was passed.\n         *\n         * @type {Object|undefined}\n         */\n        this.data = data;\n    }\n    /**\n     * Checks if the error is of the `CKEditorError` type.\n     * @returns {Boolean}\n     */\n    is(type) {\n        return type === 'CKEditorError';\n    }\n    /**\n     * A utility that ensures that the thrown error is a {@link module:utils/ckeditorerror~CKEditorError} one.\n     * It is useful when combined with the {@link module:watchdog/watchdog~Watchdog} feature, which can restart the editor in case\n     * of a {@link module:utils/ckeditorerror~CKEditorError} error.\n     *\n     * @static\n     * @param {Error} err The error to rethrow.\n     * @param {Object} context An object connected through properties with the editor instance. This context will be used\n     * by the watchdog to verify which editor should be restarted.\n     */\n    static rethrowUnexpectedError(err, context) {\n        if (err.is && err.is('CKEditorError')) {\n            throw err;\n        }\n        /**\n         * An unexpected error occurred inside the CKEditor 5 codebase. This error will look like the original one\n         * to make the debugging easier.\n         *\n         * This error is only useful when the editor is initialized using the {@link module:watchdog/watchdog~Watchdog} feature.\n         * In case of such error (or any {@link module:utils/ckeditorerror~CKEditorError} error) the watchdog should restart the editor.\n         *\n         * @error unexpected-error\n         */\n        const error = new CKEditorError(err.message, context);\n        // Restore the original stack trace to make the error look like the original one.\n        // See https://github.com/ckeditor/ckeditor5/issues/5595 for more details.\n        error.stack = err.stack;\n        throw error;\n    }\n}\n/**\n * Logs a warning to the console with a properly formatted message and adds a link to the documentation.\n * Use whenever you want to log a warning to the console.\n *\n *\t\t/**\n *\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t * name does not exist, so it was omitted when rendering the toolbar.\n *\t\t *\n *\t\t * @error toolbarview-item-unavailable\n *\t\t * @param {String} name The name of the component.\n *\t\t * /\n *\t\tlogWarning( 'toolbarview-item-unavailable', { name } );\n *\n * See also {@link module:utils/ckeditorerror~CKEditorError} for an explanation when to throw an error and when to log\n * a warning or an error to the console.\n *\n * @param {String} errorName The error name to be logged.\n * @param {Object} [data] Additional data to be logged.\n */\nexport function logWarning(errorName, data) {\n    console.warn(...formatConsoleArguments(errorName, data));\n}\n/**\n * Logs an error to the console with a properly formatted message and adds a link to the documentation.\n * Use whenever you want to log an error to the console.\n *\n *\t\t/**\n *\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t * name does not exist, so it was omitted when rendering the toolbar.\n *\t\t *\n *\t\t * @error toolbarview-item-unavailable\n *\t\t * @param {String} name The name of the component.\n *\t\t * /\n *\t\t logError( 'toolbarview-item-unavailable', { name } );\n *\n * **Note**: In most cases logging a warning using {@link module:utils/ckeditorerror~logWarning} is enough.\n *\n * See also {@link module:utils/ckeditorerror~CKEditorError} for an explanation when to use each method.\n *\n * @param {String} errorName The error name to be logged.\n * @param {Object} [data] Additional data to be logged.\n */\nexport function logError(errorName, data) {\n    console.error(...formatConsoleArguments(errorName, data));\n}\n// Returns formatted link to documentation message.\n//\n// @private\n// @param {String} errorName\n// @returns {string}\nfunction getLinkToDocumentationMessage(errorName) {\n    return `\\nRead more: ${DOCUMENTATION_URL}#error-${errorName}`;\n}\n// Returns formatted error message.\n//\n// @private\n// @param {String} errorName\n// @param {Object} [data]\n// @returns {string}\nfunction getErrorMessage(errorName, data) {\n    const processedObjects = new WeakSet();\n    const circularReferencesReplacer = (key, value) => {\n        if (typeof value === 'object' && value !== null) {\n            if (processedObjects.has(value)) {\n                return `[object ${value.constructor.name}]`;\n            }\n            processedObjects.add(value);\n        }\n        return value;\n    };\n    const stringifiedData = data ? ` ${JSON.stringify(data, circularReferencesReplacer)}` : '';\n    const documentationLink = getLinkToDocumentationMessage(errorName);\n    return errorName + stringifiedData + documentationLink;\n}\n// Returns formatted console error arguments.\n//\n// @private\n// @param {String} errorName\n// @param {Object} [data]\n// @returns {Array}\nfunction formatConsoleArguments(errorName, data) {\n    const documentationMessage = getLinkToDocumentationMessage(errorName);\n    return data ? [errorName, data, documentationMessage] : [errorName, documentationMessage];\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,iBAAiB,GAAG,qEAAqE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,aAAa,SAASC,KAAK,CAAC;EAC7C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,SAAS,EAAEC,OAAO,EAAEC,IAAI,EAAE;IAClC,KAAK,CAACC,eAAe,CAACH,SAAS,EAAEE,IAAI,CAAC,CAAC;IACvC;AACR;AACA;IACQ,IAAI,CAACE,IAAI,GAAG,eAAe;IAC3B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACH,OAAO,GAAGA,OAAO;IACtB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,IAAI,GAAGA,IAAI;EACpB;EACA;AACJ;AACA;AACA;EACIG,EAAE,CAACC,IAAI,EAAE;IACL,OAAOA,IAAI,KAAK,eAAe;EACnC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,sBAAsB,CAACC,GAAG,EAAEP,OAAO,EAAE;IACxC,IAAIO,GAAG,CAACH,EAAE,IAAIG,GAAG,CAACH,EAAE,CAAC,eAAe,CAAC,EAAE;MACnC,MAAMG,GAAG;IACb;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,MAAMC,KAAK,GAAG,IAAIZ,aAAa,CAACW,GAAG,CAACE,OAAO,EAAET,OAAO,CAAC;IACrD;IACA;IACAQ,KAAK,CAACE,KAAK,GAAGH,GAAG,CAACG,KAAK;IACvB,MAAMF,KAAK;EACf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,UAAU,CAACZ,SAAS,EAAEE,IAAI,EAAE;EACxCW,OAAO,CAACC,IAAI,CAAC,GAAGC,sBAAsB,CAACf,SAAS,EAAEE,IAAI,CAAC,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASc,QAAQ,CAAChB,SAAS,EAAEE,IAAI,EAAE;EACtCW,OAAO,CAACJ,KAAK,CAAC,GAAGM,sBAAsB,CAACf,SAAS,EAAEE,IAAI,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,SAASe,6BAA6B,CAACjB,SAAS,EAAE;EAC9C,OAAQ,gBAAeJ,iBAAkB,UAASI,SAAU,EAAC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,eAAe,CAACH,SAAS,EAAEE,IAAI,EAAE;EACtC,MAAMgB,gBAAgB,GAAG,IAAIC,OAAO,EAAE;EACtC,MAAMC,0BAA0B,GAAG,CAACC,GAAG,EAAEC,KAAK,KAAK;IAC/C,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;MAC7C,IAAIJ,gBAAgB,CAACK,GAAG,CAACD,KAAK,CAAC,EAAE;QAC7B,OAAQ,WAAUA,KAAK,CAACvB,WAAW,CAACK,IAAK,GAAE;MAC/C;MACAc,gBAAgB,CAACM,GAAG,CAACF,KAAK,CAAC;IAC/B;IACA,OAAOA,KAAK;EAChB,CAAC;EACD,MAAMG,eAAe,GAAGvB,IAAI,GAAI,IAAGwB,IAAI,CAACC,SAAS,CAACzB,IAAI,EAAEkB,0BAA0B,CAAE,EAAC,GAAG,EAAE;EAC1F,MAAMQ,iBAAiB,GAAGX,6BAA6B,CAACjB,SAAS,CAAC;EAClE,OAAOA,SAAS,GAAGyB,eAAe,GAAGG,iBAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASb,sBAAsB,CAACf,SAAS,EAAEE,IAAI,EAAE;EAC7C,MAAM2B,oBAAoB,GAAGZ,6BAA6B,CAACjB,SAAS,CAAC;EACrE,OAAOE,IAAI,GAAG,CAACF,SAAS,EAAEE,IAAI,EAAE2B,oBAAoB,CAAC,GAAG,CAAC7B,SAAS,EAAE6B,oBAAoB,CAAC;AAC7F"},"metadata":{},"sourceType":"module"}