{"ast":null,"code":"var _jsxFileName = \"C:\\\\data\\\\project\\\\realproject\\\\src\\\\my\\\\MyChatRead.jsx\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useContext, useEffect } from 'react';\nimport { useState } from 'react';\nimport { UserContext } from '../context/UserContext';\nimport qs from 'qs';\nimport { Button, Spinner, Table } from 'react-bootstrap';\nimport Pagination from 'react-js-pagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyChatRead = () => {\n  _s();\n  const {\n    loginUser\n  } = useContext(UserContext);\n  const pcode = match.params.pcode;\n  const db = getFirestore(app);\n  const [msg, setMsg] = useState('');\n  const [messages, setMessages] = useState(null);\n  const [pwriter_id, setPwriter_id] = useState('');\n  const callPwriter_id = async () => {\n    const result = await axios.get(`/api/pboard/read/${pcode}`);\n    setPwriter_id(result.data.uid);\n    console.log(result.data);\n  };\n\n  //Doc element를 최초 생성\n  const sendMessage = async e => {\n    if (e.keyCode === 13) {\n      if (msg === '') {\n        alert('보낼 내용을 입력하세요');\n        return;\n      }\n      if (e.ctrlKey) {\n        let val = e.target.value;\n        let start = e.target.selectionStart;\n        let end = e.target.selectionEnd;\n        e.target.value = val.substring(0, start) + \"\\n\" + val.substring(end);\n        setMsg(e.target.value);\n        return false; //  prevent focus\n      }\n\n      //rooms라는 collectino아래에 loginUser.uid라는 doc을 만듦.\n      //매번 로그인해서 채팅칠 때마다 다른 doc이 생김.\n      //그 아래 subcollection으로 room이름이 자기 loginUser.uid인 방이 생기고\n      //그 아래 subdoc으로 메시지가 들어감.\n      //pcode ㅡ> pwriter_id(판매자 uid) ㅡ> 로그인한아이디(uid) \n      //room ㅡ> pcode ㅡ> 로그인 아이디 \n      const docRef = doc(db, pcode, pcode);\n      const colRef = collection(docRef, `${sessionStorage.getItem('uid')}`);\n      await addDoc(colRef, {\n        uid: sessionStorage.getItem('uid'),\n        text: msg,\n        date: moment(new Date()).format('LTS'),\n        uprofile: loginUser.uprofile,\n        unickname: loginUser.unickname\n      });\n      setMsg('');\n    }\n  };\n\n  //만든 Doc element를 fetch. 새로 배열 하나 만들어서 뿌려야함.\n  const getMessages = () => {\n    const q = query(collection(db, `${pcode}/${pcode}/${sessionStorage.getItem('uid')}`), orderBy('date', 'asc'), limit(100));\n    onSnapshot(q, snapshot => {\n      let rows = [];\n      snapshot.forEach(doc => {\n        rows.push({\n          id: doc.id,\n          uid: doc.data().uid,\n          text: doc.data().text,\n          date: doc.data().date,\n          uprofile: doc.data().uprofile,\n          unickname: doc.data().unickname\n        });\n      });\n      setMessages(rows);\n    });\n  };\n  useEffect(() => {\n    callPwriter_id();\n    getMessages();\n  }, []);\n  const onClickDelete = async id => {\n    if (!window.confirm(`메세지를 삭제하시겠습니까?`)) return;\n    await deleteDoc(doc(db, `rooms/${sessionStorage.getItem('uid')}/room${sessionStorage.getItem('uid')}`, id));\n  };\n  if (!messages) return /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"border\",\n    variant: \"primary\",\n    style: {\n      width: '20rem',\n      height: '20rem',\n      marginTop: '220px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"MyChatRead\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(MyChatRead, \"2COzVUGSJg3jADoO5f4SZrho2lE=\");\n_c = MyChatRead;\nexport default MyChatRead;\nvar _c;\n$RefreshReg$(_c, \"MyChatRead\");","map":{"version":3,"names":["axios","React","useContext","useEffect","useState","UserContext","qs","Button","Spinner","Table","Pagination","MyChatRead","loginUser","pcode","match","params","db","getFirestore","app","msg","setMsg","messages","setMessages","pwriter_id","setPwriter_id","callPwriter_id","result","get","data","uid","console","log","sendMessage","e","keyCode","alert","ctrlKey","val","target","value","start","selectionStart","end","selectionEnd","substring","docRef","doc","colRef","collection","sessionStorage","getItem","addDoc","text","date","moment","Date","format","uprofile","unickname","getMessages","q","query","orderBy","limit","onSnapshot","snapshot","rows","forEach","push","id","onClickDelete","window","confirm","deleteDoc","width","height","marginTop"],"sources":["C:/data/project/realproject/src/my/MyChatRead.jsx"],"sourcesContent":["import axios from 'axios'\r\nimport React, { useContext, useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { UserContext } from '../context/UserContext';\r\nimport qs from 'qs';\r\nimport { Button, Spinner, Table } from 'react-bootstrap';\r\nimport Pagination from 'react-js-pagination';\r\n\r\nconst MyChatRead = () => {\r\n  const { loginUser } = useContext(UserContext);\r\n  const pcode = match.params.pcode;\r\n  const db = getFirestore(app);\r\n  const [msg, setMsg] = useState('');\r\n  const [messages, setMessages] = useState(null);\r\n  const [pwriter_id,setPwriter_id]=useState('');\r\n\r\n  const callPwriter_id = async () => {\r\n        const result = await axios.get(`/api/pboard/read/${pcode}`)\r\n        setPwriter_id(result.data.uid);\r\n        console.log(result.data);\r\n      }\r\n\r\n  //Doc element를 최초 생성\r\n  const sendMessage = async (e) => {\r\n      if (e.keyCode === 13) {\r\n          if (msg === '') {\r\n              alert('보낼 내용을 입력하세요')\r\n              return;\r\n          }\r\n          if (e.ctrlKey) {\r\n              let val = e.target.value;\r\n              let start = e.target.selectionStart;\r\n              let end = e.target.selectionEnd;\r\n              e.target.value = val.substring(0, start) + \"\\n\" + val.substring(end);\r\n              setMsg(e.target.value);\r\n              return false; //  prevent focus\r\n          }\r\n\r\n          //rooms라는 collectino아래에 loginUser.uid라는 doc을 만듦.\r\n          //매번 로그인해서 채팅칠 때마다 다른 doc이 생김.\r\n          //그 아래 subcollection으로 room이름이 자기 loginUser.uid인 방이 생기고\r\n          //그 아래 subdoc으로 메시지가 들어감.\r\n          //pcode ㅡ> pwriter_id(판매자 uid) ㅡ> 로그인한아이디(uid) \r\n          //room ㅡ> pcode ㅡ> 로그인 아이디 \r\n          const docRef = doc(db, pcode, pcode);\r\n          const colRef = collection(docRef, `${sessionStorage.getItem('uid')}`)\r\n          await addDoc(colRef, {\r\n              uid: sessionStorage.getItem('uid'),\r\n              text: msg,\r\n              date: moment(new Date()).format('LTS'),\r\n              uprofile: loginUser.uprofile,\r\n              unickname: loginUser.unickname\r\n          });\r\n          setMsg('');\r\n      }\r\n  }\r\n\r\n  //만든 Doc element를 fetch. 새로 배열 하나 만들어서 뿌려야함.\r\n  const getMessages = () => {\r\n      const q = query(\r\n          collection(db, `${pcode}/${pcode}/${sessionStorage.getItem('uid')}`),\r\n          orderBy('date', 'asc'),\r\n          limit(100)\r\n      );\r\n\r\n      onSnapshot(q, (snapshot) => {\r\n          let rows = [];\r\n          snapshot.forEach((doc) => {\r\n              rows.push({\r\n                  id: doc.id,\r\n                  uid: doc.data().uid,\r\n                  text: doc.data().text,\r\n                  date: doc.data().date,\r\n                  uprofile: doc.data().uprofile,\r\n                  unickname: doc.data().unickname\r\n              });\r\n          });\r\n          setMessages(rows);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    callPwriter_id();\r\n    getMessages();\r\n}, []);\r\n\r\n\r\n\r\n  const onClickDelete = async (id) => {\r\n      if (!window.confirm(`메세지를 삭제하시겠습니까?`)) return;\r\n      await deleteDoc(doc(db, `rooms/${sessionStorage.getItem('uid')}/room${sessionStorage.getItem('uid')}`, id));\r\n  }\r\n  \r\n  if (!messages) return (\r\n    <Spinner animation=\"border\" variant=\"primary\"\r\n        style={{ width: '20rem', height: '20rem', marginTop: '220px' }} />\r\n)\r\n\r\n  return (\r\n    <div>MyChatRead</div>\r\n  )\r\n}\r\n\r\nexport default MyChatRead"],"mappings":"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"},"metadata":{},"sourceType":"module"}