{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/containerelement\n */\nimport Element from './element';\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly used for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * The container element should be your default choice when writing a converter, unless:\n *\n * * this element represents a model text attribute (then use {@link module:engine/view/attributeelement~AttributeElement}),\n * * this is an empty element like `<img>` (then use {@link module:engine/view/emptyelement~EmptyElement}),\n * * this is a root element,\n * * this is a nested editable element (then use  {@link module:engine/view/editableelement~EditableElement}).\n *\n * To create a new container element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `DowncastWriter#createContainerElement()`}\n * method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class ContainerElement extends Element {\n  /**\n   * Creates a container element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement\n   * @see module:engine/view/element~Element\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n   * @param {String} name Node name.\n   * @param {Object|Iterable} [attrs] Collection of attributes.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into created element.\n   */\n  constructor() {\n    super(...arguments);\n    /**\n     * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n     *\n     * @method #getFillerOffset\n     * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n     */\n    this.getFillerOffset = getFillerOffset;\n  }\n}\n/**\n * Checks whether this object is of the given.\n *\n *\t\tcontainerElement.is( 'containerElement' ); // -> true\n *\t\tcontainerElement.is( 'element' ); // -> true\n *\t\tcontainerElement.is( 'node' ); // -> true\n *\t\tcontainerElement.is( 'view:containerElement' ); // -> true\n *\t\tcontainerElement.is( 'view:element' ); // -> true\n *\t\tcontainerElement.is( 'view:node' ); // -> true\n *\n *\t\tcontainerElement.is( 'model:element' ); // -> false\n *\t\tcontainerElement.is( 'documentFragment' ); // -> false\n *\n * Assuming that the object being checked is a container element, you can also check its\n * {@link module:engine/view/containerelement~ContainerElement#name name}:\n *\n *\t\tcontainerElement.is( 'element', 'div' ); // -> true if this is a div container element\n *\t\tcontainerElement.is( 'contaienrElement', 'div' ); // -> same as above\n *\t\ttext.is( 'element', 'div' ); -> false\n *\n * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n *\n * @param {String} type Type to check.\n * @param {String} [name] Element name.\n * @returns {Boolean}\n */\nContainerElement.prototype.is = function (type, name) {\n  if (!name) {\n    return type === 'containerElement' || type === 'view:containerElement' ||\n    // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n    type === 'element' || type === 'view:element' || type === 'node' || type === 'view:node';\n  } else {\n    return name === this.name && (type === 'containerElement' || type === 'view:containerElement' ||\n    // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n    type === 'element' || type === 'view:element');\n  }\n};\n/**\n * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n *\n * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n */\nexport function getFillerOffset() {\n  const children = [...this.getChildren()];\n  const lastChild = children[this.childCount - 1];\n  // Block filler is required after a `<br>` if it's the last element in its container. See #1422.\n  if (lastChild && lastChild.is('element', 'br')) {\n    return this.childCount;\n  }\n  for (const child of children) {\n    // If there's any non-UI element – don't render the bogus.\n    if (!child.is('uiElement')) {\n      return null;\n    }\n  }\n  // If there are only UI elements – render the bogus at the end of the element.\n  return this.childCount;\n}","map":{"version":3,"names":["Element","ContainerElement","constructor","getFillerOffset","prototype","is","type","name","children","getChildren","lastChild","childCount","child"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/containerelement\n */\nimport Element from './element';\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly used for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * The container element should be your default choice when writing a converter, unless:\n *\n * * this element represents a model text attribute (then use {@link module:engine/view/attributeelement~AttributeElement}),\n * * this is an empty element like `<img>` (then use {@link module:engine/view/emptyelement~EmptyElement}),\n * * this is a root element,\n * * this is a nested editable element (then use  {@link module:engine/view/editableelement~EditableElement}).\n *\n * To create a new container element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `DowncastWriter#createContainerElement()`}\n * method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class ContainerElement extends Element {\n    /**\n     * Creates a container element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement\n     * @see module:engine/view/element~Element\n     * @protected\n     * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n     * @param {String} name Node name.\n     * @param {Object|Iterable} [attrs] Collection of attributes.\n     * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n     * A list of nodes to be inserted into created element.\n     */\n    constructor(...args) {\n        super(...args);\n        /**\n         * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n         *\n         * @method #getFillerOffset\n         * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n         */\n        this.getFillerOffset = getFillerOffset;\n    }\n}\n/**\n * Checks whether this object is of the given.\n *\n *\t\tcontainerElement.is( 'containerElement' ); // -> true\n *\t\tcontainerElement.is( 'element' ); // -> true\n *\t\tcontainerElement.is( 'node' ); // -> true\n *\t\tcontainerElement.is( 'view:containerElement' ); // -> true\n *\t\tcontainerElement.is( 'view:element' ); // -> true\n *\t\tcontainerElement.is( 'view:node' ); // -> true\n *\n *\t\tcontainerElement.is( 'model:element' ); // -> false\n *\t\tcontainerElement.is( 'documentFragment' ); // -> false\n *\n * Assuming that the object being checked is a container element, you can also check its\n * {@link module:engine/view/containerelement~ContainerElement#name name}:\n *\n *\t\tcontainerElement.is( 'element', 'div' ); // -> true if this is a div container element\n *\t\tcontainerElement.is( 'contaienrElement', 'div' ); // -> same as above\n *\t\ttext.is( 'element', 'div' ); -> false\n *\n * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n *\n * @param {String} type Type to check.\n * @param {String} [name] Element name.\n * @returns {Boolean}\n */\nContainerElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'containerElement' || type === 'view:containerElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'containerElement' || type === 'view:containerElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element');\n    }\n};\n/**\n * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n *\n * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n */\nexport function getFillerOffset() {\n    const children = [...this.getChildren()];\n    const lastChild = children[this.childCount - 1];\n    // Block filler is required after a `<br>` if it's the last element in its container. See #1422.\n    if (lastChild && lastChild.is('element', 'br')) {\n        return this.childCount;\n    }\n    for (const child of children) {\n        // If there's any non-UI element – don't render the bogus.\n        if (!child.is('uiElement')) {\n            return null;\n        }\n    }\n    // If there are only UI elements – render the bogus at the end of the element.\n    return this.childCount;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,OAAO,MAAM,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,gBAAgB,SAASD,OAAO,CAAC;EAClD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,WAAW,GAAU;IACjB,KAAK,CAAC,YAAO,CAAC;IACd;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAGA,eAAe;EAC1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,gBAAgB,CAACG,SAAS,CAACC,EAAE,GAAG,UAAUC,IAAI,EAAEC,IAAI,EAAE;EAClD,IAAI,CAACA,IAAI,EAAE;IACP,OAAOD,IAAI,KAAK,kBAAkB,IAAIA,IAAI,KAAK,uBAAuB;IAClE;IACAA,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,cAAc,IAC7CA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,WAAW;EAC/C,CAAC,MACI;IACD,OAAOC,IAAI,KAAK,IAAI,CAACA,IAAI,KAAKD,IAAI,KAAK,kBAAkB,IAAIA,IAAI,KAAK,uBAAuB;IACzF;IACAA,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,cAAc,CAAC;EACtD;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASH,eAAe,GAAG;EAC9B,MAAMK,QAAQ,GAAG,CAAC,GAAG,IAAI,CAACC,WAAW,EAAE,CAAC;EACxC,MAAMC,SAAS,GAAGF,QAAQ,CAAC,IAAI,CAACG,UAAU,GAAG,CAAC,CAAC;EAC/C;EACA,IAAID,SAAS,IAAIA,SAAS,CAACL,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE;IAC5C,OAAO,IAAI,CAACM,UAAU;EAC1B;EACA,KAAK,MAAMC,KAAK,IAAIJ,QAAQ,EAAE;IAC1B;IACA,IAAI,CAACI,KAAK,CAACP,EAAE,CAAC,WAAW,CAAC,EAAE;MACxB,OAAO,IAAI;IACf;EACJ;EACA;EACA,OAAO,IAAI,CAACM,UAAU;AAC1B"},"metadata":{},"sourceType":"module"}