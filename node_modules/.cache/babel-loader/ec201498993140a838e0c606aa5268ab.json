{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/modelconsumable\n */\nimport TextProxy from '../model/textproxy';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Manages a list of consumable values for the {@link module:engine/model/item~Item model items}.\n *\n * Consumables are various aspects of the model. A model item can be broken down into separate, single properties that might be\n * taken into consideration when converting that item.\n *\n * `ModelConsumable` is used by {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} while analyzing the changed\n * parts of {@link module:engine/model/document~Document the document}. The added / changed / removed model items are broken down\n * into singular properties (the item itself and its attributes). All those parts are saved in `ModelConsumable`. Then,\n * during conversion, when the given part of a model item is converted (i.e. the view element has been inserted into the view,\n * but without attributes), the consumable value is removed from `ModelConsumable`.\n *\n * For model items, `ModelConsumable` stores consumable values of one of following types: `insert`, `addattribute:<attributeKey>`,\n * `changeattributes:<attributeKey>`, `removeattributes:<attributeKey>`.\n *\n * In most cases, it is enough to let th {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * gather consumable values, so there is no need to use\n * the {@link module:engine/conversion/modelconsumable~ModelConsumable#add add method} directly.\n * However, it is important to understand how consumable values can be\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n * See {@link module:engine/conversion/downcasthelpers default downcast converters} for more information.\n *\n * Keep in mind that one conversion event may have multiple callbacks (converters) attached to it. Each of those is\n * able to convert one or more parts of the model. However, when one of those callbacks actually converts\n * something, the others should not, because they would duplicate the results. Using `ModelConsumable` helps to avoid\n * this situation, because callbacks should only convert these values that were not yet consumed from `ModelConsumable`.\n *\n * Consuming multiple values in a single callback:\n *\n *\t\t// Converter for custom `imageBlock` element that might have a `caption` element inside which changes\n *\t\t// how the image is displayed in the view:\n *\t\t//\n *\t\t// Model:\n *\t\t//\n *\t\t// [imageBlock]\n *\t\t//   └─ [caption]\n *\t\t//       └─ foo\n *\t\t//\n *\t\t// View:\n *\t\t//\n *\t\t// <figure>\n *\t\t//   ├─ <img />\n *\t\t//   └─ <caption>\n *\t\t//       └─ foo\n *\t\tmodelConversionDispatcher.on( 'insert:imageBlock', ( evt, data, conversionApi ) => {\n *\t\t\t// First, consume the `imageBlock` element.\n *\t\t\tconversionApi.consumable.consume( data.item, 'insert' );\n *\n *\t\t\t// Just create normal image element for the view.\n *\t\t\t// Maybe it will be \"decorated\" later.\n *\t\t\tconst viewImage = new ViewElement( 'img' );\n *\t\t\tconst insertPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\t\t\tconst viewWriter = conversionApi.writer;\n *\n *\t\t\t// Check if the `imageBlock` element has children.\n *\t\t\tif ( data.item.childCount > 0 ) {\n *\t\t\t\tconst modelCaption = data.item.getChild( 0 );\n *\n *\t\t\t\t// `modelCaption` insertion change is consumed from consumable values.\n *\t\t\t\t// It will not be converted by other converters, but it's children (probably some text) will be.\n *\t\t\t\t// Through mapping, converters for text will know where to insert contents of `modelCaption`.\n *\t\t\t\tif ( conversionApi.consumable.consume( modelCaption, 'insert' ) ) {\n *\t\t\t\t\tconst viewCaption = new ViewElement( 'figcaption' );\n *\n *\t\t\t\t\tconst viewImageHolder = new ViewElement( 'figure', null, [ viewImage, viewCaption ] );\n *\n *\t\t\t\t\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\n *\t\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImageHolder );\n *\t\t\t\t\tviewWriter.insert( insertPosition, viewImageHolder );\n *\t\t\t\t}\n *\t\t\t} else {\n *\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImage );\n *\t\t\t\tviewWriter.insert( insertPosition, viewImage );\n *\t\t\t}\n *\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class ModelConsumable {\n  /**\n   * Creates an empty consumables list.\n   */\n  constructor() {\n    /**\n     * Contains list of consumable values.\n     *\n     * @private\n     * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_consumable\n     */\n    this._consumable = new Map();\n    /**\n     * For each {@link module:engine/model/textproxy~TextProxy} added to `ModelConsumable`, this registry holds a parent\n     * of that `TextProxy` and the start and end indices of that `TextProxy`. This allows identification of the `TextProxy`\n     * instances that point to the same part of the model but are different instances. Each distinct `TextProxy`\n     * is given a unique `Symbol` which is then registered as consumable. This process is transparent for the `ModelConsumable`\n     * API user because whenever `TextProxy` is added, tested, consumed or reverted, the internal mechanisms of\n     * `ModelConsumable` translate `TextProxy` to that unique `Symbol`.\n     *\n     * @private\n     * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_textProxyRegistry\n     */\n    this._textProxyRegistry = new Map();\n  }\n  /**\n   * Adds a consumable value to the consumables list and links it with a given model item.\n   *\n   *\t\tmodelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.\n   *\t\tmodelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.\n   *\t\tmodelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.\n   *\t\tmodelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.\n   *\t\tmodelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n   * Model item, range or selection that has the consumable.\n   * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n   * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n   */\n  add(item, type) {\n    type = _normalizeConsumableType(type);\n    if (item instanceof TextProxy) {\n      item = this._getSymbolForTextProxy(item);\n    }\n    if (!this._consumable.has(item)) {\n      this._consumable.set(item, new Map());\n    }\n    this._consumable.get(item).set(type, true);\n  }\n  /**\n   * Removes a given consumable value from a given model item.\n   *\n   *\t\tmodelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.\n   *\t\tmodelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.\n   *\t\tmodelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.\n   *\t\tmodelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.\n   *\t\tmodelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n   * Model item, range or selection from which consumable will be consumed.\n   * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n   * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n   * @returns {Boolean} `true` if consumable value was available and was consumed, `false` otherwise.\n   */\n  consume(item, type) {\n    type = _normalizeConsumableType(type);\n    if (item instanceof TextProxy) {\n      item = this._getSymbolForTextProxy(item);\n    }\n    if (this.test(item, type)) {\n      this._consumable.get(item).set(type, false);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Tests whether there is a consumable value of a given type connected with a given model item.\n   *\n   *\t\tmodelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.\n   *\t\tmodelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.\n   *\t\tmodelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.\n   *\t\tmodelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.\n   *\t\tmodelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n   * Model item, range or selection to be tested.\n   * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n   * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n   * @returns {null|Boolean} `null` if such consumable was never added, `false` if the consumable values was\n   * already consumed or `true` if it was added and not consumed yet.\n   */\n  test(item, type) {\n    type = _normalizeConsumableType(type);\n    if (item instanceof TextProxy) {\n      item = this._getSymbolForTextProxy(item);\n    }\n    const itemConsumables = this._consumable.get(item);\n    if (itemConsumables === undefined) {\n      return null;\n    }\n    const value = itemConsumables.get(type);\n    if (value === undefined) {\n      return null;\n    }\n    return value;\n  }\n  /**\n   * Reverts consuming of a consumable value.\n   *\n   *\t\tmodelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.\n   *\t\tmodelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.\n   *\t\tmodelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.\n   *\t\tmodelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.\n   *\t\tmodelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n   * Model item, range or selection to be reverted.\n   * @param {String} type Consumable type.\n   * @returns {null|Boolean} `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has\n   * never been added.\n   */\n  revert(item, type) {\n    type = _normalizeConsumableType(type);\n    if (item instanceof TextProxy) {\n      item = this._getSymbolForTextProxy(item);\n    }\n    const test = this.test(item, type);\n    if (test === false) {\n      this._consumable.get(item).set(type, true);\n      return true;\n    } else if (test === true) {\n      return false;\n    }\n    return null;\n  }\n  /**\n   * Verifies if all events from the specified group were consumed.\n   *\n   * @param {String} eventGroup The events group to verify.\n   */\n  verifyAllConsumed(eventGroup) {\n    const items = [];\n    for (const [item, consumables] of this._consumable) {\n      for (const [event, canConsume] of consumables) {\n        const eventPrefix = event.split(':')[0];\n        if (canConsume && eventGroup == eventPrefix) {\n          items.push({\n            event,\n            item: item.name || item.description\n          });\n        }\n      }\n    }\n    if (items.length) {\n      /**\n       * Some of the {@link module:engine/model/item~Item model items} were not consumed while downcasting the model to view.\n       *\n       * This might be the effect of:\n       *\n       * * A missing converter for some model elements. Make sure that you registered downcast converters for all model elements.\n       * * A custom converter that does not consume converted items. Make sure that you\n       * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} all model elements that you converted\n       * from the model to the view.\n       * * A custom converter that called `event.stop()`. When providing a custom converter, keep in mind that you should not stop\n       * the event. If you stop it then the default converter at the `lowest` priority will not trigger the conversion of this node's\n       * attributes and child nodes.\n       *\n       * @error conversion-model-consumable-not-consumed\n       * @param {Array.<module:engine/model/item~Item>} items Items that were not consumed.\n       */\n      throw new CKEditorError('conversion-model-consumable-not-consumed', null, {\n        items\n      });\n    }\n  }\n  /**\n   * Gets a unique symbol for the passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that\n   * have same parent, same start index and same end index will get the same symbol.\n   *\n   * Used internally to correctly consume `TextProxy` instances.\n   *\n   * @internal\n   * @protected\n   * @param {module:engine/model/textproxy~TextProxy} textProxy `TextProxy` instance to get a symbol for.\n   * @returns {Symbol} Symbol representing all equal instances of `TextProxy`.\n   */\n  _getSymbolForTextProxy(textProxy) {\n    let symbol = null;\n    const startMap = this._textProxyRegistry.get(textProxy.startOffset);\n    if (startMap) {\n      const endMap = startMap.get(textProxy.endOffset);\n      if (endMap) {\n        symbol = endMap.get(textProxy.parent);\n      }\n    }\n    if (!symbol) {\n      symbol = this._addSymbolForTextProxy(textProxy);\n    }\n    return symbol;\n  }\n  /**\n   * Adds a symbol for the given {@link module:engine/model/textproxy~TextProxy} instance.\n   *\n   * Used internally to correctly consume `TextProxy` instances.\n   *\n   * @private\n   * @param {module:engine/model/textproxy~TextProxy} textProxy Text proxy instance.\n   * @returns {Symbol} Symbol generated for given `TextProxy`.\n   */\n  _addSymbolForTextProxy(textProxy) {\n    const start = textProxy.startOffset;\n    const end = textProxy.endOffset;\n    const parent = textProxy.parent;\n    const symbol = Symbol('$textProxy:' + textProxy.data);\n    let startMap;\n    let endMap;\n    startMap = this._textProxyRegistry.get(start);\n    if (!startMap) {\n      startMap = new Map();\n      this._textProxyRegistry.set(start, startMap);\n    }\n    endMap = startMap.get(end);\n    if (!endMap) {\n      endMap = new Map();\n      startMap.set(end, endMap);\n    }\n    endMap.set(parent, symbol);\n    return symbol;\n  }\n}\n// Returns a normalized consumable type name from the given string. A normalized consumable type name is a string that has\n// at most one colon, for example: `insert` or `addMarker:highlight`. If a string to normalize has more \"parts\" (more colons),\n// the further parts are dropped, for example: `addattribute:bold:$text` -> `addattributes:bold`.\n//\n// @param {String} type Consumable type.\n// @returns {String} Normalized consumable type.\nfunction _normalizeConsumableType(type) {\n  const parts = type.split(':');\n  // For inserts allow passing event name, it's stored in the context of a specified element so the element name is not needed.\n  if (parts[0] == 'insert') {\n    return parts[0];\n  }\n  // Markers are identified by the whole name (otherwise we would consume the whole markers group).\n  if (parts[0] == 'addMarker' || parts[0] == 'removeMarker') {\n    return type;\n  }\n  return parts.length > 1 ? parts[0] + ':' + parts[1] : parts[0];\n}","map":{"version":3,"names":["TextProxy","CKEditorError","ModelConsumable","constructor","_consumable","Map","_textProxyRegistry","add","item","type","_normalizeConsumableType","_getSymbolForTextProxy","has","set","get","consume","test","itemConsumables","undefined","value","revert","verifyAllConsumed","eventGroup","items","consumables","event","canConsume","eventPrefix","split","push","name","description","length","textProxy","symbol","startMap","startOffset","endMap","endOffset","parent","_addSymbolForTextProxy","start","end","Symbol","data","parts"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/conversion/modelconsumable.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/modelconsumable\n */\nimport TextProxy from '../model/textproxy';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Manages a list of consumable values for the {@link module:engine/model/item~Item model items}.\n *\n * Consumables are various aspects of the model. A model item can be broken down into separate, single properties that might be\n * taken into consideration when converting that item.\n *\n * `ModelConsumable` is used by {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} while analyzing the changed\n * parts of {@link module:engine/model/document~Document the document}. The added / changed / removed model items are broken down\n * into singular properties (the item itself and its attributes). All those parts are saved in `ModelConsumable`. Then,\n * during conversion, when the given part of a model item is converted (i.e. the view element has been inserted into the view,\n * but without attributes), the consumable value is removed from `ModelConsumable`.\n *\n * For model items, `ModelConsumable` stores consumable values of one of following types: `insert`, `addattribute:<attributeKey>`,\n * `changeattributes:<attributeKey>`, `removeattributes:<attributeKey>`.\n *\n * In most cases, it is enough to let th {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * gather consumable values, so there is no need to use\n * the {@link module:engine/conversion/modelconsumable~ModelConsumable#add add method} directly.\n * However, it is important to understand how consumable values can be\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n * See {@link module:engine/conversion/downcasthelpers default downcast converters} for more information.\n *\n * Keep in mind that one conversion event may have multiple callbacks (converters) attached to it. Each of those is\n * able to convert one or more parts of the model. However, when one of those callbacks actually converts\n * something, the others should not, because they would duplicate the results. Using `ModelConsumable` helps to avoid\n * this situation, because callbacks should only convert these values that were not yet consumed from `ModelConsumable`.\n *\n * Consuming multiple values in a single callback:\n *\n *\t\t// Converter for custom `imageBlock` element that might have a `caption` element inside which changes\n *\t\t// how the image is displayed in the view:\n *\t\t//\n *\t\t// Model:\n *\t\t//\n *\t\t// [imageBlock]\n *\t\t//   └─ [caption]\n *\t\t//       └─ foo\n *\t\t//\n *\t\t// View:\n *\t\t//\n *\t\t// <figure>\n *\t\t//   ├─ <img />\n *\t\t//   └─ <caption>\n *\t\t//       └─ foo\n *\t\tmodelConversionDispatcher.on( 'insert:imageBlock', ( evt, data, conversionApi ) => {\n *\t\t\t// First, consume the `imageBlock` element.\n *\t\t\tconversionApi.consumable.consume( data.item, 'insert' );\n *\n *\t\t\t// Just create normal image element for the view.\n *\t\t\t// Maybe it will be \"decorated\" later.\n *\t\t\tconst viewImage = new ViewElement( 'img' );\n *\t\t\tconst insertPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\t\t\tconst viewWriter = conversionApi.writer;\n *\n *\t\t\t// Check if the `imageBlock` element has children.\n *\t\t\tif ( data.item.childCount > 0 ) {\n *\t\t\t\tconst modelCaption = data.item.getChild( 0 );\n *\n *\t\t\t\t// `modelCaption` insertion change is consumed from consumable values.\n *\t\t\t\t// It will not be converted by other converters, but it's children (probably some text) will be.\n *\t\t\t\t// Through mapping, converters for text will know where to insert contents of `modelCaption`.\n *\t\t\t\tif ( conversionApi.consumable.consume( modelCaption, 'insert' ) ) {\n *\t\t\t\t\tconst viewCaption = new ViewElement( 'figcaption' );\n *\n *\t\t\t\t\tconst viewImageHolder = new ViewElement( 'figure', null, [ viewImage, viewCaption ] );\n *\n *\t\t\t\t\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\n *\t\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImageHolder );\n *\t\t\t\t\tviewWriter.insert( insertPosition, viewImageHolder );\n *\t\t\t\t}\n *\t\t\t} else {\n *\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImage );\n *\t\t\t\tviewWriter.insert( insertPosition, viewImage );\n *\t\t\t}\n *\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class ModelConsumable {\n    /**\n     * Creates an empty consumables list.\n     */\n    constructor() {\n        /**\n         * Contains list of consumable values.\n         *\n         * @private\n         * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_consumable\n         */\n        this._consumable = new Map();\n        /**\n         * For each {@link module:engine/model/textproxy~TextProxy} added to `ModelConsumable`, this registry holds a parent\n         * of that `TextProxy` and the start and end indices of that `TextProxy`. This allows identification of the `TextProxy`\n         * instances that point to the same part of the model but are different instances. Each distinct `TextProxy`\n         * is given a unique `Symbol` which is then registered as consumable. This process is transparent for the `ModelConsumable`\n         * API user because whenever `TextProxy` is added, tested, consumed or reverted, the internal mechanisms of\n         * `ModelConsumable` translate `TextProxy` to that unique `Symbol`.\n         *\n         * @private\n         * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_textProxyRegistry\n         */\n        this._textProxyRegistry = new Map();\n    }\n    /**\n     * Adds a consumable value to the consumables list and links it with a given model item.\n     *\n     *\t\tmodelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.\n     *\t\tmodelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.\n     *\t\tmodelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.\n     *\t\tmodelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.\n     *\t\tmodelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.\n     *\n     * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n     * Model item, range or selection that has the consumable.\n     * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n     * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n     */\n    add(item, type) {\n        type = _normalizeConsumableType(type);\n        if (item instanceof TextProxy) {\n            item = this._getSymbolForTextProxy(item);\n        }\n        if (!this._consumable.has(item)) {\n            this._consumable.set(item, new Map());\n        }\n        this._consumable.get(item).set(type, true);\n    }\n    /**\n     * Removes a given consumable value from a given model item.\n     *\n     *\t\tmodelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.\n     *\t\tmodelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.\n     *\t\tmodelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.\n     *\t\tmodelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.\n     *\t\tmodelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.\n     *\n     * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n     * Model item, range or selection from which consumable will be consumed.\n     * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n     * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n     * @returns {Boolean} `true` if consumable value was available and was consumed, `false` otherwise.\n     */\n    consume(item, type) {\n        type = _normalizeConsumableType(type);\n        if (item instanceof TextProxy) {\n            item = this._getSymbolForTextProxy(item);\n        }\n        if (this.test(item, type)) {\n            this._consumable.get(item).set(type, false);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Tests whether there is a consumable value of a given type connected with a given model item.\n     *\n     *\t\tmodelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.\n     *\t\tmodelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.\n     *\t\tmodelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.\n     *\t\tmodelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.\n     *\t\tmodelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.\n     *\n     * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n     * Model item, range or selection to be tested.\n     * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n     * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n     * @returns {null|Boolean} `null` if such consumable was never added, `false` if the consumable values was\n     * already consumed or `true` if it was added and not consumed yet.\n     */\n    test(item, type) {\n        type = _normalizeConsumableType(type);\n        if (item instanceof TextProxy) {\n            item = this._getSymbolForTextProxy(item);\n        }\n        const itemConsumables = this._consumable.get(item);\n        if (itemConsumables === undefined) {\n            return null;\n        }\n        const value = itemConsumables.get(type);\n        if (value === undefined) {\n            return null;\n        }\n        return value;\n    }\n    /**\n     * Reverts consuming of a consumable value.\n     *\n     *\t\tmodelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.\n     *\t\tmodelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.\n     *\t\tmodelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.\n     *\t\tmodelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.\n     *\t\tmodelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.\n     *\n     * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n     * Model item, range or selection to be reverted.\n     * @param {String} type Consumable type.\n     * @returns {null|Boolean} `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has\n     * never been added.\n     */\n    revert(item, type) {\n        type = _normalizeConsumableType(type);\n        if (item instanceof TextProxy) {\n            item = this._getSymbolForTextProxy(item);\n        }\n        const test = this.test(item, type);\n        if (test === false) {\n            this._consumable.get(item).set(type, true);\n            return true;\n        }\n        else if (test === true) {\n            return false;\n        }\n        return null;\n    }\n    /**\n     * Verifies if all events from the specified group were consumed.\n     *\n     * @param {String} eventGroup The events group to verify.\n     */\n    verifyAllConsumed(eventGroup) {\n        const items = [];\n        for (const [item, consumables] of this._consumable) {\n            for (const [event, canConsume] of consumables) {\n                const eventPrefix = event.split(':')[0];\n                if (canConsume && eventGroup == eventPrefix) {\n                    items.push({\n                        event,\n                        item: item.name || item.description\n                    });\n                }\n            }\n        }\n        if (items.length) {\n            /**\n             * Some of the {@link module:engine/model/item~Item model items} were not consumed while downcasting the model to view.\n             *\n             * This might be the effect of:\n             *\n             * * A missing converter for some model elements. Make sure that you registered downcast converters for all model elements.\n             * * A custom converter that does not consume converted items. Make sure that you\n             * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} all model elements that you converted\n             * from the model to the view.\n             * * A custom converter that called `event.stop()`. When providing a custom converter, keep in mind that you should not stop\n             * the event. If you stop it then the default converter at the `lowest` priority will not trigger the conversion of this node's\n             * attributes and child nodes.\n             *\n             * @error conversion-model-consumable-not-consumed\n             * @param {Array.<module:engine/model/item~Item>} items Items that were not consumed.\n             */\n            throw new CKEditorError('conversion-model-consumable-not-consumed', null, { items });\n        }\n    }\n    /**\n     * Gets a unique symbol for the passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that\n     * have same parent, same start index and same end index will get the same symbol.\n     *\n     * Used internally to correctly consume `TextProxy` instances.\n     *\n     * @internal\n     * @protected\n     * @param {module:engine/model/textproxy~TextProxy} textProxy `TextProxy` instance to get a symbol for.\n     * @returns {Symbol} Symbol representing all equal instances of `TextProxy`.\n     */\n    _getSymbolForTextProxy(textProxy) {\n        let symbol = null;\n        const startMap = this._textProxyRegistry.get(textProxy.startOffset);\n        if (startMap) {\n            const endMap = startMap.get(textProxy.endOffset);\n            if (endMap) {\n                symbol = endMap.get(textProxy.parent);\n            }\n        }\n        if (!symbol) {\n            symbol = this._addSymbolForTextProxy(textProxy);\n        }\n        return symbol;\n    }\n    /**\n     * Adds a symbol for the given {@link module:engine/model/textproxy~TextProxy} instance.\n     *\n     * Used internally to correctly consume `TextProxy` instances.\n     *\n     * @private\n     * @param {module:engine/model/textproxy~TextProxy} textProxy Text proxy instance.\n     * @returns {Symbol} Symbol generated for given `TextProxy`.\n     */\n    _addSymbolForTextProxy(textProxy) {\n        const start = textProxy.startOffset;\n        const end = textProxy.endOffset;\n        const parent = textProxy.parent;\n        const symbol = Symbol('$textProxy:' + textProxy.data);\n        let startMap;\n        let endMap;\n        startMap = this._textProxyRegistry.get(start);\n        if (!startMap) {\n            startMap = new Map();\n            this._textProxyRegistry.set(start, startMap);\n        }\n        endMap = startMap.get(end);\n        if (!endMap) {\n            endMap = new Map();\n            startMap.set(end, endMap);\n        }\n        endMap.set(parent, symbol);\n        return symbol;\n    }\n}\n// Returns a normalized consumable type name from the given string. A normalized consumable type name is a string that has\n// at most one colon, for example: `insert` or `addMarker:highlight`. If a string to normalize has more \"parts\" (more colons),\n// the further parts are dropped, for example: `addattribute:bold:$text` -> `addattributes:bold`.\n//\n// @param {String} type Consumable type.\n// @returns {String} Normalized consumable type.\nfunction _normalizeConsumableType(type) {\n    const parts = type.split(':');\n    // For inserts allow passing event name, it's stored in the context of a specified element so the element name is not needed.\n    if (parts[0] == 'insert') {\n        return parts[0];\n    }\n    // Markers are identified by the whole name (otherwise we would consume the whole markers group).\n    if (parts[0] == 'addMarker' || parts[0] == 'removeMarker') {\n        return type;\n    }\n    return parts.length > 1 ? parts[0] + ':' + parts[1] : parts[0];\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,aAAa,MAAM,6CAA6C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,eAAe,CAAC;EACjC;AACJ;AACA;EACIC,WAAW,GAAG;IACV;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,IAAIC,GAAG,EAAE;IAC5B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,kBAAkB,GAAG,IAAID,GAAG,EAAE;EACvC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,GAAG,CAACC,IAAI,EAAEC,IAAI,EAAE;IACZA,IAAI,GAAGC,wBAAwB,CAACD,IAAI,CAAC;IACrC,IAAID,IAAI,YAAYR,SAAS,EAAE;MAC3BQ,IAAI,GAAG,IAAI,CAACG,sBAAsB,CAACH,IAAI,CAAC;IAC5C;IACA,IAAI,CAAC,IAAI,CAACJ,WAAW,CAACQ,GAAG,CAACJ,IAAI,CAAC,EAAE;MAC7B,IAAI,CAACJ,WAAW,CAACS,GAAG,CAACL,IAAI,EAAE,IAAIH,GAAG,EAAE,CAAC;IACzC;IACA,IAAI,CAACD,WAAW,CAACU,GAAG,CAACN,IAAI,CAAC,CAACK,GAAG,CAACJ,IAAI,EAAE,IAAI,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,OAAO,CAACP,IAAI,EAAEC,IAAI,EAAE;IAChBA,IAAI,GAAGC,wBAAwB,CAACD,IAAI,CAAC;IACrC,IAAID,IAAI,YAAYR,SAAS,EAAE;MAC3BQ,IAAI,GAAG,IAAI,CAACG,sBAAsB,CAACH,IAAI,CAAC;IAC5C;IACA,IAAI,IAAI,CAACQ,IAAI,CAACR,IAAI,EAAEC,IAAI,CAAC,EAAE;MACvB,IAAI,CAACL,WAAW,CAACU,GAAG,CAACN,IAAI,CAAC,CAACK,GAAG,CAACJ,IAAI,EAAE,KAAK,CAAC;MAC3C,OAAO,IAAI;IACf,CAAC,MACI;MACD,OAAO,KAAK;IAChB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIO,IAAI,CAACR,IAAI,EAAEC,IAAI,EAAE;IACbA,IAAI,GAAGC,wBAAwB,CAACD,IAAI,CAAC;IACrC,IAAID,IAAI,YAAYR,SAAS,EAAE;MAC3BQ,IAAI,GAAG,IAAI,CAACG,sBAAsB,CAACH,IAAI,CAAC;IAC5C;IACA,MAAMS,eAAe,GAAG,IAAI,CAACb,WAAW,CAACU,GAAG,CAACN,IAAI,CAAC;IAClD,IAAIS,eAAe,KAAKC,SAAS,EAAE;MAC/B,OAAO,IAAI;IACf;IACA,MAAMC,KAAK,GAAGF,eAAe,CAACH,GAAG,CAACL,IAAI,CAAC;IACvC,IAAIU,KAAK,KAAKD,SAAS,EAAE;MACrB,OAAO,IAAI;IACf;IACA,OAAOC,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAM,CAACZ,IAAI,EAAEC,IAAI,EAAE;IACfA,IAAI,GAAGC,wBAAwB,CAACD,IAAI,CAAC;IACrC,IAAID,IAAI,YAAYR,SAAS,EAAE;MAC3BQ,IAAI,GAAG,IAAI,CAACG,sBAAsB,CAACH,IAAI,CAAC;IAC5C;IACA,MAAMQ,IAAI,GAAG,IAAI,CAACA,IAAI,CAACR,IAAI,EAAEC,IAAI,CAAC;IAClC,IAAIO,IAAI,KAAK,KAAK,EAAE;MAChB,IAAI,CAACZ,WAAW,CAACU,GAAG,CAACN,IAAI,CAAC,CAACK,GAAG,CAACJ,IAAI,EAAE,IAAI,CAAC;MAC1C,OAAO,IAAI;IACf,CAAC,MACI,IAAIO,IAAI,KAAK,IAAI,EAAE;MACpB,OAAO,KAAK;IAChB;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIK,iBAAiB,CAACC,UAAU,EAAE;IAC1B,MAAMC,KAAK,GAAG,EAAE;IAChB,KAAK,MAAM,CAACf,IAAI,EAAEgB,WAAW,CAAC,IAAI,IAAI,CAACpB,WAAW,EAAE;MAChD,KAAK,MAAM,CAACqB,KAAK,EAAEC,UAAU,CAAC,IAAIF,WAAW,EAAE;QAC3C,MAAMG,WAAW,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvC,IAAIF,UAAU,IAAIJ,UAAU,IAAIK,WAAW,EAAE;UACzCJ,KAAK,CAACM,IAAI,CAAC;YACPJ,KAAK;YACLjB,IAAI,EAAEA,IAAI,CAACsB,IAAI,IAAItB,IAAI,CAACuB;UAC5B,CAAC,CAAC;QACN;MACJ;IACJ;IACA,IAAIR,KAAK,CAACS,MAAM,EAAE;MACd;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY,MAAM,IAAI/B,aAAa,CAAC,0CAA0C,EAAE,IAAI,EAAE;QAAEsB;MAAM,CAAC,CAAC;IACxF;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIZ,sBAAsB,CAACsB,SAAS,EAAE;IAC9B,IAAIC,MAAM,GAAG,IAAI;IACjB,MAAMC,QAAQ,GAAG,IAAI,CAAC7B,kBAAkB,CAACQ,GAAG,CAACmB,SAAS,CAACG,WAAW,CAAC;IACnE,IAAID,QAAQ,EAAE;MACV,MAAME,MAAM,GAAGF,QAAQ,CAACrB,GAAG,CAACmB,SAAS,CAACK,SAAS,CAAC;MAChD,IAAID,MAAM,EAAE;QACRH,MAAM,GAAGG,MAAM,CAACvB,GAAG,CAACmB,SAAS,CAACM,MAAM,CAAC;MACzC;IACJ;IACA,IAAI,CAACL,MAAM,EAAE;MACTA,MAAM,GAAG,IAAI,CAACM,sBAAsB,CAACP,SAAS,CAAC;IACnD;IACA,OAAOC,MAAM;EACjB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,sBAAsB,CAACP,SAAS,EAAE;IAC9B,MAAMQ,KAAK,GAAGR,SAAS,CAACG,WAAW;IACnC,MAAMM,GAAG,GAAGT,SAAS,CAACK,SAAS;IAC/B,MAAMC,MAAM,GAAGN,SAAS,CAACM,MAAM;IAC/B,MAAML,MAAM,GAAGS,MAAM,CAAC,aAAa,GAAGV,SAAS,CAACW,IAAI,CAAC;IACrD,IAAIT,QAAQ;IACZ,IAAIE,MAAM;IACVF,QAAQ,GAAG,IAAI,CAAC7B,kBAAkB,CAACQ,GAAG,CAAC2B,KAAK,CAAC;IAC7C,IAAI,CAACN,QAAQ,EAAE;MACXA,QAAQ,GAAG,IAAI9B,GAAG,EAAE;MACpB,IAAI,CAACC,kBAAkB,CAACO,GAAG,CAAC4B,KAAK,EAAEN,QAAQ,CAAC;IAChD;IACAE,MAAM,GAAGF,QAAQ,CAACrB,GAAG,CAAC4B,GAAG,CAAC;IAC1B,IAAI,CAACL,MAAM,EAAE;MACTA,MAAM,GAAG,IAAIhC,GAAG,EAAE;MAClB8B,QAAQ,CAACtB,GAAG,CAAC6B,GAAG,EAAEL,MAAM,CAAC;IAC7B;IACAA,MAAM,CAACxB,GAAG,CAAC0B,MAAM,EAAEL,MAAM,CAAC;IAC1B,OAAOA,MAAM;EACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASxB,wBAAwB,CAACD,IAAI,EAAE;EACpC,MAAMoC,KAAK,GAAGpC,IAAI,CAACmB,KAAK,CAAC,GAAG,CAAC;EAC7B;EACA,IAAIiB,KAAK,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;IACtB,OAAOA,KAAK,CAAC,CAAC,CAAC;EACnB;EACA;EACA,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAI,WAAW,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAI,cAAc,EAAE;IACvD,OAAOpC,IAAI;EACf;EACA,OAAOoC,KAAK,CAACb,MAAM,GAAG,CAAC,GAAGa,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC;AAClE"},"metadata":{},"sourceType":"module"}