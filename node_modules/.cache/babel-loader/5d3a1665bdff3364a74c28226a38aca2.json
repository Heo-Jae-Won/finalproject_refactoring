{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable new-cap */\n/**\n * @module engine/view/documentfragment\n */\nimport TypeCheckable from './typecheckable';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n/**\n * Document fragment.\n *\n * To create a new document fragment instance use the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createDocumentFragment `UpcastWriter#createDocumentFragment()`}\n * method.\n */\nexport default class DocumentFragment extends EmitterMixin(TypeCheckable) {\n  /**\n   * Creates new DocumentFragment instance.\n   *\n   * @protected\n   * @param {module:engine/view/document~Document} document The document to which this document fragment belongs.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into the created document fragment.\n   */\n  constructor(document, children) {\n    super();\n    /**\n     * The document to which this document fragment belongs.\n     *\n     * @readonly\n     * @member {module:engine/view/document~Document}\n     */\n    this.document = document;\n    /**\n     * Array of child nodes.\n     *\n     * @protected\n     * @member {Array.<module:engine/view/node~Node>} module:engine/view/documentfragment~DocumentFragment#_children\n     */\n    this._children = [];\n    if (children) {\n      this._insertChild(0, children);\n    }\n  }\n  /**\n   * Iterable interface.\n   *\n   * Iterates over nodes added to this document fragment.\n   *\n   * @returns {Iterable.<module:engine/view/node~Node>}\n   */\n  [Symbol.iterator]() {\n    return this._children[Symbol.iterator]();\n  }\n  /**\n   * Number of child nodes in this document fragment.\n   *\n   * @readonly\n   * @type {Number}\n   */\n  get childCount() {\n    return this._children.length;\n  }\n  /**\n   * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isEmpty() {\n    return this.childCount === 0;\n  }\n  /**\n   * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n   *\n   * @readonly\n   * @type {module:engine/model/documentfragment~DocumentFragment}\n   */\n  get root() {\n    return this;\n  }\n  /**\n   * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n   *\n   * @readonly\n   * @type {null}\n   */\n  get parent() {\n    return null;\n  }\n  /**\n   * {@link module:engine/view/documentfragment~DocumentFragment#_insertChild Insert} a child node or a list of child nodes at the end\n   * and sets the parent of these nodes to this fragment.\n   *\n   * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n   * @returns {Number} Number of appended nodes.\n   */\n  _appendChild(items) {\n    return this._insertChild(this.childCount, items);\n  }\n  /**\n   * Gets child at the given index.\n   *\n   * @param {Number} index Index of child.\n   * @returns {module:engine/view/node~Node} Child node.\n   */\n  getChild(index) {\n    return this._children[index];\n  }\n  /**\n   * Gets index of the given child node. Returns `-1` if child node is not found.\n   *\n   * @param {module:engine/view/node~Node} node Child node.\n   * @returns {Number} Index of the child node.\n   */\n  getChildIndex(node) {\n    return this._children.indexOf(node);\n  }\n  /**\n   * Gets child nodes iterator.\n   *\n   * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n   */\n  getChildren() {\n    return this._children[Symbol.iterator]();\n  }\n  /**\n   * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n   * this fragment.\n   *\n   * @param {Number} index Position where nodes should be inserted.\n   * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n   * @returns {Number} Number of inserted nodes.\n   */\n  _insertChild(index, items) {\n    this._fireChange('children', this);\n    let count = 0;\n    const nodes = normalize(this.document, items);\n    for (const node of nodes) {\n      // If node that is being added to this element is already inside another element, first remove it from the old parent.\n      if (node.parent !== null) {\n        node._remove();\n      }\n      node.parent = this;\n      this._children.splice(index, 0, node);\n      index++;\n      count++;\n    }\n    return count;\n  }\n  /**\n   * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n   *\n   * @internal\n   * @param {Number} index Number of the first node to remove.\n   * @param {Number} [howMany=1] Number of nodes to remove.\n   * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n   */\n  _removeChildren(index) {\n    let howMany = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this._fireChange('children', this);\n    for (let i = index; i < index + howMany; i++) {\n      this._children[i].parent = null;\n    }\n    return this._children.splice(index, howMany);\n  }\n  /**\n   * Fires `change` event with given type of the change.\n   *\n   * @private\n   * @param {module:engine/view/document~ChangeType} type Type of the change.\n   * @param {module:engine/view/node~Node} node Changed node.\n   * @fires module:engine/view/node~Node#change\n   */\n  _fireChange(type, node) {\n    this.fire('change:' + type, node);\n  }\n}\n/**\n * Checks whether this object is of the given type.\n *\n *\t\tdocFrag.is( 'documentFragment' ); // -> true\n *\t\tdocFrag.is( 'view:documentFragment' ); // -> true\n *\n *\t\tdocFrag.is( 'model:documentFragment' ); // -> false\n *\t\tdocFrag.is( 'element' ); // -> false\n *\t\tdocFrag.is( 'node' ); // -> false\n *\n * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n *\n * @param {String} type\n * @returns {Boolean}\n */\nDocumentFragment.prototype.is = function (type) {\n  return type === 'documentFragment' || type === 'view:documentFragment';\n};\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize(document, nodes) {\n  // Separate condition because string is iterable.\n  if (typeof nodes == 'string') {\n    return [new Text(document, nodes)];\n  }\n  if (!isIterable(nodes)) {\n    nodes = [nodes];\n  }\n  // Array.from to enable .map() on non-arrays.\n  return Array.from(nodes).map(node => {\n    if (typeof node == 'string') {\n      return new Text(document, node);\n    }\n    if (node instanceof TextProxy) {\n      return new Text(document, node.data);\n    }\n    return node;\n  });\n}","map":{"version":3,"names":["TypeCheckable","Text","TextProxy","isIterable","EmitterMixin","DocumentFragment","constructor","document","children","_children","_insertChild","Symbol","iterator","childCount","length","isEmpty","root","parent","_appendChild","items","getChild","index","getChildIndex","node","indexOf","getChildren","_fireChange","count","nodes","normalize","_remove","splice","_removeChildren","howMany","i","type","fire","prototype","is","Array","from","map","data"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/documentfragment.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable new-cap */\n/**\n * @module engine/view/documentfragment\n */\nimport TypeCheckable from './typecheckable';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n/**\n * Document fragment.\n *\n * To create a new document fragment instance use the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createDocumentFragment `UpcastWriter#createDocumentFragment()`}\n * method.\n */\nexport default class DocumentFragment extends EmitterMixin(TypeCheckable) {\n    /**\n     * Creates new DocumentFragment instance.\n     *\n     * @protected\n     * @param {module:engine/view/document~Document} document The document to which this document fragment belongs.\n     * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n     * A list of nodes to be inserted into the created document fragment.\n     */\n    constructor(document, children) {\n        super();\n        /**\n         * The document to which this document fragment belongs.\n         *\n         * @readonly\n         * @member {module:engine/view/document~Document}\n         */\n        this.document = document;\n        /**\n         * Array of child nodes.\n         *\n         * @protected\n         * @member {Array.<module:engine/view/node~Node>} module:engine/view/documentfragment~DocumentFragment#_children\n         */\n        this._children = [];\n        if (children) {\n            this._insertChild(0, children);\n        }\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over nodes added to this document fragment.\n     *\n     * @returns {Iterable.<module:engine/view/node~Node>}\n     */\n    [Symbol.iterator]() {\n        return this._children[Symbol.iterator]();\n    }\n    /**\n     * Number of child nodes in this document fragment.\n     *\n     * @readonly\n     * @type {Number}\n     */\n    get childCount() {\n        return this._children.length;\n    }\n    /**\n     * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n    get isEmpty() {\n        return this.childCount === 0;\n    }\n    /**\n     * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n     *\n     * @readonly\n     * @type {module:engine/model/documentfragment~DocumentFragment}\n     */\n    get root() {\n        return this;\n    }\n    /**\n     * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n     *\n     * @readonly\n     * @type {null}\n     */\n    get parent() {\n        return null;\n    }\n    /**\n     * {@link module:engine/view/documentfragment~DocumentFragment#_insertChild Insert} a child node or a list of child nodes at the end\n     * and sets the parent of these nodes to this fragment.\n     *\n     * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n     * @returns {Number} Number of appended nodes.\n     */\n    _appendChild(items) {\n        return this._insertChild(this.childCount, items);\n    }\n    /**\n     * Gets child at the given index.\n     *\n     * @param {Number} index Index of child.\n     * @returns {module:engine/view/node~Node} Child node.\n     */\n    getChild(index) {\n        return this._children[index];\n    }\n    /**\n     * Gets index of the given child node. Returns `-1` if child node is not found.\n     *\n     * @param {module:engine/view/node~Node} node Child node.\n     * @returns {Number} Index of the child node.\n     */\n    getChildIndex(node) {\n        return this._children.indexOf(node);\n    }\n    /**\n     * Gets child nodes iterator.\n     *\n     * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n     */\n    getChildren() {\n        return this._children[Symbol.iterator]();\n    }\n    /**\n     * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n     * this fragment.\n     *\n     * @param {Number} index Position where nodes should be inserted.\n     * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n     * @returns {Number} Number of inserted nodes.\n     */\n    _insertChild(index, items) {\n        this._fireChange('children', this);\n        let count = 0;\n        const nodes = normalize(this.document, items);\n        for (const node of nodes) {\n            // If node that is being added to this element is already inside another element, first remove it from the old parent.\n            if (node.parent !== null) {\n                node._remove();\n            }\n            node.parent = this;\n            this._children.splice(index, 0, node);\n            index++;\n            count++;\n        }\n        return count;\n    }\n    /**\n     * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n     *\n     * @internal\n     * @param {Number} index Number of the first node to remove.\n     * @param {Number} [howMany=1] Number of nodes to remove.\n     * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n     */\n    _removeChildren(index, howMany = 1) {\n        this._fireChange('children', this);\n        for (let i = index; i < index + howMany; i++) {\n            this._children[i].parent = null;\n        }\n        return this._children.splice(index, howMany);\n    }\n    /**\n     * Fires `change` event with given type of the change.\n     *\n     * @private\n     * @param {module:engine/view/document~ChangeType} type Type of the change.\n     * @param {module:engine/view/node~Node} node Changed node.\n     * @fires module:engine/view/node~Node#change\n     */\n    _fireChange(type, node) {\n        this.fire('change:' + type, node);\n    }\n}\n/**\n * Checks whether this object is of the given type.\n *\n *\t\tdocFrag.is( 'documentFragment' ); // -> true\n *\t\tdocFrag.is( 'view:documentFragment' ); // -> true\n *\n *\t\tdocFrag.is( 'model:documentFragment' ); // -> false\n *\t\tdocFrag.is( 'element' ); // -> false\n *\t\tdocFrag.is( 'node' ); // -> false\n *\n * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n *\n * @param {String} type\n * @returns {Boolean}\n */\nDocumentFragment.prototype.is = function (type) {\n    return type === 'documentFragment' || type === 'view:documentFragment';\n};\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize(document, nodes) {\n    // Separate condition because string is iterable.\n    if (typeof nodes == 'string') {\n        return [new Text(document, nodes)];\n    }\n    if (!isIterable(nodes)) {\n        nodes = [nodes];\n    }\n    // Array.from to enable .map() on non-arrays.\n    return Array.from(nodes)\n        .map(node => {\n        if (typeof node == 'string') {\n            return new Text(document, node);\n        }\n        if (node instanceof TextProxy) {\n            return new Text(document, node.data);\n        }\n        return node;\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}