{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/resizeobserver\n */\nimport global from './global';\n/**\n * A helper class which instances allow performing custom actions when native DOM elements are resized.\n *\n *\t\tconst editableElement = editor.editing.view.getDomRoot();\n *\n *\t\tconst observer = new ResizeObserver( editableElement, entry => {\n *\t\t\tconsole.log( 'The editable element has been resized in DOM.' );\n *\t\t\tconsole.log( entry.target ); // -> editableElement\n *\t\t\tconsole.log( entry.contentRect.width ); // -> e.g. '423px'\n *\t\t} );\n *\n * It uses the [native DOM resize observer](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)\n * under the hood.\n */\nexport default class ResizeObserver {\n  /**\n   * Creates an instance of the `ResizeObserver` class.\n   *\n   * @param {Element} element A DOM element that is to be observed for resizing. Note that\n   * the element must be visible (i.e. not detached from DOM) for the observer to work.\n   * @param {Function} callback A function called when the observed element was resized. It passes\n   * the [`ResizeObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry)\n   * object with information about the resize event.\n   */\n  constructor(element, callback) {\n    // **Note**: For the maximum performance, this class ensures only a single instance of the native\n    // observer is used no matter how many instances of this class were created.\n    if (!ResizeObserver._observerInstance) {\n      ResizeObserver._createObserver();\n    }\n    this._element = element;\n    this._callback = callback;\n    ResizeObserver._addElementCallback(element, callback);\n    ResizeObserver._observerInstance.observe(element);\n  }\n  /**\n   * Destroys the observer which disables the `callback` passed to the {@link #constructor}.\n   */\n  destroy() {\n    ResizeObserver._deleteElementCallback(this._element, this._callback);\n  }\n  /**\n   * Registers a new resize callback for the DOM element.\n   *\n   * @private\n   * @static\n   * @param {Element} element\n   * @param {Function} callback\n   */\n  static _addElementCallback(element, callback) {\n    if (!ResizeObserver._elementCallbacks) {\n      ResizeObserver._elementCallbacks = new Map();\n    }\n    let callbacks = ResizeObserver._elementCallbacks.get(element);\n    if (!callbacks) {\n      callbacks = new Set();\n      ResizeObserver._elementCallbacks.set(element, callbacks);\n    }\n    callbacks.add(callback);\n  }\n  /**\n   * Removes a resize callback from the DOM element. If no callbacks are left\n   * for the element, it removes the element from the native observer.\n   *\n   * @private\n   * @static\n   * @param {Element} element\n   * @param {Function} callback\n   */\n  static _deleteElementCallback(element, callback) {\n    const callbacks = ResizeObserver._getElementCallbacks(element);\n    // Remove the element callback. Check if exist first in case someone\n    // called destroy() twice.\n    if (callbacks) {\n      callbacks.delete(callback);\n      // If no callbacks left for the element, also remove the element.\n      if (!callbacks.size) {\n        ResizeObserver._elementCallbacks.delete(element);\n        ResizeObserver._observerInstance.unobserve(element);\n      }\n    }\n    if (ResizeObserver._elementCallbacks && !ResizeObserver._elementCallbacks.size) {\n      ResizeObserver._observerInstance = null;\n      ResizeObserver._elementCallbacks = null;\n    }\n  }\n  /**\n   * Returns are registered resize callbacks for the DOM element.\n   *\n   * @private\n   * @static\n   * @param {Element} element\n   * @returns {Set.<Function>|null|undefined}\n   */\n  static _getElementCallbacks(element) {\n    if (!ResizeObserver._elementCallbacks) {\n      return null;\n    }\n    return ResizeObserver._elementCallbacks.get(element);\n  }\n  /**\n   * Creates the single native observer shared across all `ResizeObserver` instances.\n   *\n   * @private\n   * @static\n   */\n  static _createObserver() {\n    ResizeObserver._observerInstance = new global.window.ResizeObserver(entries => {\n      for (const entry of entries) {\n        const callbacks = ResizeObserver._getElementCallbacks(entry.target);\n        if (callbacks) {\n          for (const callback of callbacks) {\n            callback(entry);\n          }\n        }\n      }\n    });\n  }\n}\n/**\n * The single native observer instance shared across all {@link module:utils/dom/resizeobserver~ResizeObserver} instances.\n *\n * @static\n * @private\n * @readonly\n * @property {Object|null}\n */\nResizeObserver._observerInstance = null;\n/**\n * A mapping of native DOM elements and their callbacks shared across all\n * {@link module:utils/dom/resizeobserver~ResizeObserver} instances.\n *\n * @static\n * @private\n * @property {Map.<Element,Set>|null}\n */\nResizeObserver._elementCallbacks = null;","map":{"version":3,"names":["global","ResizeObserver","constructor","element","callback","_observerInstance","_createObserver","_element","_callback","_addElementCallback","observe","destroy","_deleteElementCallback","_elementCallbacks","Map","callbacks","get","Set","set","add","_getElementCallbacks","delete","size","unobserve","window","entries","entry","target"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/dom/resizeobserver.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/resizeobserver\n */\nimport global from './global';\n/**\n * A helper class which instances allow performing custom actions when native DOM elements are resized.\n *\n *\t\tconst editableElement = editor.editing.view.getDomRoot();\n *\n *\t\tconst observer = new ResizeObserver( editableElement, entry => {\n *\t\t\tconsole.log( 'The editable element has been resized in DOM.' );\n *\t\t\tconsole.log( entry.target ); // -> editableElement\n *\t\t\tconsole.log( entry.contentRect.width ); // -> e.g. '423px'\n *\t\t} );\n *\n * It uses the [native DOM resize observer](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)\n * under the hood.\n */\nexport default class ResizeObserver {\n    /**\n     * Creates an instance of the `ResizeObserver` class.\n     *\n     * @param {Element} element A DOM element that is to be observed for resizing. Note that\n     * the element must be visible (i.e. not detached from DOM) for the observer to work.\n     * @param {Function} callback A function called when the observed element was resized. It passes\n     * the [`ResizeObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry)\n     * object with information about the resize event.\n     */\n    constructor(element, callback) {\n        // **Note**: For the maximum performance, this class ensures only a single instance of the native\n        // observer is used no matter how many instances of this class were created.\n        if (!ResizeObserver._observerInstance) {\n            ResizeObserver._createObserver();\n        }\n        this._element = element;\n        this._callback = callback;\n        ResizeObserver._addElementCallback(element, callback);\n        ResizeObserver._observerInstance.observe(element);\n    }\n    /**\n     * Destroys the observer which disables the `callback` passed to the {@link #constructor}.\n     */\n    destroy() {\n        ResizeObserver._deleteElementCallback(this._element, this._callback);\n    }\n    /**\n     * Registers a new resize callback for the DOM element.\n     *\n     * @private\n     * @static\n     * @param {Element} element\n     * @param {Function} callback\n     */\n    static _addElementCallback(element, callback) {\n        if (!ResizeObserver._elementCallbacks) {\n            ResizeObserver._elementCallbacks = new Map();\n        }\n        let callbacks = ResizeObserver._elementCallbacks.get(element);\n        if (!callbacks) {\n            callbacks = new Set();\n            ResizeObserver._elementCallbacks.set(element, callbacks);\n        }\n        callbacks.add(callback);\n    }\n    /**\n     * Removes a resize callback from the DOM element. If no callbacks are left\n     * for the element, it removes the element from the native observer.\n     *\n     * @private\n     * @static\n     * @param {Element} element\n     * @param {Function} callback\n     */\n    static _deleteElementCallback(element, callback) {\n        const callbacks = ResizeObserver._getElementCallbacks(element);\n        // Remove the element callback. Check if exist first in case someone\n        // called destroy() twice.\n        if (callbacks) {\n            callbacks.delete(callback);\n            // If no callbacks left for the element, also remove the element.\n            if (!callbacks.size) {\n                ResizeObserver._elementCallbacks.delete(element);\n                ResizeObserver._observerInstance.unobserve(element);\n            }\n        }\n        if (ResizeObserver._elementCallbacks && !ResizeObserver._elementCallbacks.size) {\n            ResizeObserver._observerInstance = null;\n            ResizeObserver._elementCallbacks = null;\n        }\n    }\n    /**\n     * Returns are registered resize callbacks for the DOM element.\n     *\n     * @private\n     * @static\n     * @param {Element} element\n     * @returns {Set.<Function>|null|undefined}\n     */\n    static _getElementCallbacks(element) {\n        if (!ResizeObserver._elementCallbacks) {\n            return null;\n        }\n        return ResizeObserver._elementCallbacks.get(element);\n    }\n    /**\n     * Creates the single native observer shared across all `ResizeObserver` instances.\n     *\n     * @private\n     * @static\n     */\n    static _createObserver() {\n        ResizeObserver._observerInstance = new global.window.ResizeObserver(entries => {\n            for (const entry of entries) {\n                const callbacks = ResizeObserver._getElementCallbacks(entry.target);\n                if (callbacks) {\n                    for (const callback of callbacks) {\n                        callback(entry);\n                    }\n                }\n            }\n        });\n    }\n}\n/**\n * The single native observer instance shared across all {@link module:utils/dom/resizeobserver~ResizeObserver} instances.\n *\n * @static\n * @private\n * @readonly\n * @property {Object|null}\n */\nResizeObserver._observerInstance = null;\n/**\n * A mapping of native DOM elements and their callbacks shared across all\n * {@link module:utils/dom/resizeobserver~ResizeObserver} instances.\n *\n * @static\n * @private\n * @property {Map.<Element,Set>|null}\n */\nResizeObserver._elementCallbacks = null;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}