{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Resizer from './widgetresize/resizer';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { throttle } from 'lodash-es';\nimport '../theme/widgetresize.css';\n\n/**\n * The widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n *\n * @extends module:core/plugin~Plugin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class WidgetResize extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'WidgetResize';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    const editing = this.editor.editing;\n    const domDocument = global.window.document;\n\n    /**\n     * The currently selected resizer.\n     *\n     * @observable\n     * @member {module:widget/widgetresize/resizer~Resizer|null} #selectedResizer\n     */\n    this.set('selectedResizer', null);\n\n    /**\n     * References an active resizer.\n     *\n     * Active resizer means a resizer which handle is actively used by the end user.\n     *\n     * @protected\n     * @observable\n     * @member {module:widget/widgetresize/resizer~Resizer|null} #_activeResizer\n     */\n    this.set('_activeResizer', null);\n\n    /**\n     * A map of resizers created using this plugin instance.\n     *\n     * @protected\n     * @type {Map.<module:engine/view/containerelement~ContainerElement, module:widget/widgetresize/resizer~Resizer>}\n     */\n    this._resizers = new Map();\n    editing.view.addObserver(MouseObserver);\n    this._observer = Object.create(DomEmitterMixin);\n    this.listenTo(editing.view.document, 'mousedown', this._mouseDownListener.bind(this), {\n      priority: 'high'\n    });\n    this._observer.listenTo(domDocument, 'mousemove', this._mouseMoveListener.bind(this));\n    this._observer.listenTo(domDocument, 'mouseup', this._mouseUpListener.bind(this));\n    const redrawSelectedResizer = () => {\n      if (this.selectedResizer && this.selectedResizer.isVisible) {\n        this.selectedResizer.redraw();\n      }\n    };\n    this._redrawSelectedResizerThrottled = throttle(redrawSelectedResizer, 200);\n\n    // Redrawing on any change of the UI of the editor (including content changes).\n    this.editor.ui.on('update', this._redrawSelectedResizerThrottled);\n\n    // Remove view widget-resizer mappings for widgets that have been removed from the document.\n    // https://github.com/ckeditor/ckeditor5/issues/10156\n    // https://github.com/ckeditor/ckeditor5/issues/10266\n    this.editor.model.document.on('change', () => {\n      for (const [viewElement, resizer] of this._resizers) {\n        if (!viewElement.isAttached()) {\n          this._resizers.delete(viewElement);\n          resizer.destroy();\n        }\n      }\n    }, {\n      priority: 'lowest'\n    });\n\n    // Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n    this._observer.listenTo(global.window, 'resize', this._redrawSelectedResizerThrottled);\n    const viewSelection = this.editor.editing.view.document.selection;\n    viewSelection.on('change', () => {\n      const selectedElement = viewSelection.getSelectedElement();\n      const resizer = this.getResizerByViewElement(selectedElement) || null;\n      if (resizer) {\n        this.select(resizer);\n      } else {\n        this.deselect();\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  destroy() {\n    this._observer.stopListening();\n    for (const resizer of this._resizers.values()) {\n      resizer.destroy();\n    }\n    this._redrawSelectedResizerThrottled.cancel();\n  }\n\n  /**\n   * Marks resizer as selected.\n   *\n   * @param {module:widget/widgetresize/resizer~Resizer} resizer\n   */\n  select(resizer) {\n    this.deselect();\n    this.selectedResizer = resizer;\n    this.selectedResizer.isSelected = true;\n  }\n\n  /**\n   * Deselects currently set resizer.\n   */\n  deselect() {\n    if (this.selectedResizer) {\n      this.selectedResizer.isSelected = false;\n    }\n    this.selectedResizer = null;\n  }\n\n  /**\n   * @param {module:widget/widgetresize~ResizerOptions} [options] Resizer options.\n   * @returns {module:widget/widgetresize/resizer~Resizer}\n   */\n  attachTo(options) {\n    const resizer = new Resizer(options);\n    const plugins = this.editor.plugins;\n    resizer.attach();\n    if (plugins.has('WidgetToolbarRepository')) {\n      // Hiding widget toolbar to improve the performance\n      // (https://github.com/ckeditor/ckeditor5-widget/pull/112#issuecomment-564528765).\n      const widgetToolbarRepository = plugins.get('WidgetToolbarRepository');\n      resizer.on('begin', () => {\n        widgetToolbarRepository.forceDisabled('resize');\n      }, {\n        priority: 'lowest'\n      });\n      resizer.on('cancel', () => {\n        widgetToolbarRepository.clearForceDisabled('resize');\n      }, {\n        priority: 'highest'\n      });\n      resizer.on('commit', () => {\n        widgetToolbarRepository.clearForceDisabled('resize');\n      }, {\n        priority: 'highest'\n      });\n    }\n    this._resizers.set(options.viewElement, resizer);\n    const viewSelection = this.editor.editing.view.document.selection;\n    const selectedElement = viewSelection.getSelectedElement();\n\n    // If the element the resizer is created for is currently focused, it should become visible.\n    if (this.getResizerByViewElement(selectedElement) == resizer) {\n      this.select(resizer);\n    }\n    return resizer;\n  }\n\n  /**\n   * Returns a resizer created for a given view element (widget element).\n   *\n   * @param {module:engine/view/containerelement~ContainerElement} viewElement View element associated with the resizer.\n   * @returns {module:widget/widgetresize/resizer~Resizer|undefined}\n   */\n  getResizerByViewElement(viewElement) {\n    return this._resizers.get(viewElement);\n  }\n\n  /**\n   * Returns a resizer that contains a given resize handle.\n   *\n   * @protected\n   * @param {HTMLElement} domResizeHandle\n   * @returns {module:widget/widgetresize/resizer~Resizer}\n   */\n  _getResizerByHandle(domResizeHandle) {\n    for (const resizer of this._resizers.values()) {\n      if (resizer.containsHandle(domResizeHandle)) {\n        return resizer;\n      }\n    }\n  }\n\n  /**\n   * @protected\n   * @param {module:utils/eventinfo~EventInfo} event\n   * @param {Event} domEventData Native DOM event.\n   */\n  _mouseDownListener(event, domEventData) {\n    const resizeHandle = domEventData.domTarget;\n    if (!Resizer.isResizeHandle(resizeHandle)) {\n      return;\n    }\n    this._activeResizer = this._getResizerByHandle(resizeHandle);\n    if (this._activeResizer) {\n      this._activeResizer.begin(resizeHandle);\n\n      // Do not call other events when resizing. See: #6755.\n      event.stop();\n      domEventData.preventDefault();\n    }\n  }\n\n  /**\n   * @protected\n   * @param {module:utils/eventinfo~EventInfo} event\n   * @param {Event} domEventData Native DOM event.\n   */\n  _mouseMoveListener(event, domEventData) {\n    if (this._activeResizer) {\n      this._activeResizer.updateSize(domEventData);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  _mouseUpListener() {\n    if (this._activeResizer) {\n      this._activeResizer.commit();\n      this._activeResizer = null;\n    }\n  }\n}\nmix(WidgetResize, ObservableMixin);\n\n/**\n * Interface describing a resizer. It allows to specify the resizing host, custom logic for calculating aspect ratio, etc.\n *\n * @interface ResizerOptions\n */\n\n/**\n * Editor instance associated with the resizer.\n *\n * @member {module:core/editor/editor~Editor} module:widget/widgetresize~ResizerOptions#editor\n */\n\n/**\n * @member {module:engine/model/element~Element} module:widget/widgetresize~ResizerOptions#modelElement\n */\n\n/**\n * A view of an element to be resized. Typically it's the main widget's view instance.\n *\n * @member {module:engine/view/containerelement~ContainerElement} module:widget/widgetresize~ResizerOptions#viewElement\n */\n\n/**\n * A callback to be executed once the resizing process is done.\n *\n * It receives a `Number` (`newValue`) as a parameter.\n *\n * For example, {@link module:image/imageresize~ImageResize} uses it to execute the resize image command\n * which puts the new value into the model.\n *\n * ```js\n * {\n *\teditor,\n *\tmodelElement: data.item,\n *\tviewElement: widget,\n *\n *\tonCommit( newValue ) {\n *\t\teditor.execute( 'resizeImage', { width: newValue } );\n *\t}\n * };\n * ```\n *\n *\n * @member {Function} module:widget/widgetresize~ResizerOptions#onCommit\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#getResizeHost\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#isCentered\n */","map":{"version":3,"names":["Plugin","Resizer","DomEmitterMixin","global","ObservableMixin","MouseObserver","mix","throttle","WidgetResize","pluginName","init","editing","editor","domDocument","window","document","set","_resizers","Map","view","addObserver","_observer","Object","create","listenTo","_mouseDownListener","bind","priority","_mouseMoveListener","_mouseUpListener","redrawSelectedResizer","selectedResizer","isVisible","redraw","_redrawSelectedResizerThrottled","ui","on","model","viewElement","resizer","isAttached","delete","destroy","viewSelection","selection","selectedElement","getSelectedElement","getResizerByViewElement","select","deselect","stopListening","values","cancel","isSelected","attachTo","options","plugins","attach","has","widgetToolbarRepository","get","forceDisabled","clearForceDisabled","_getResizerByHandle","domResizeHandle","containsHandle","event","domEventData","resizeHandle","domTarget","isResizeHandle","_activeResizer","begin","stop","preventDefault","updateSize","commit"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-widget/src/widgetresize.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Resizer from './widgetresize/resizer';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { throttle } from 'lodash-es';\n\nimport '../theme/widgetresize.css';\n\n/**\n * The widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n *\n * @extends module:core/plugin~Plugin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class WidgetResize extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'WidgetResize';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editing = this.editor.editing;\n\t\tconst domDocument = global.window.document;\n\n\t\t/**\n\t\t * The currently selected resizer.\n\t\t *\n\t\t * @observable\n\t\t * @member {module:widget/widgetresize/resizer~Resizer|null} #selectedResizer\n\t\t */\n\t\tthis.set( 'selectedResizer', null );\n\n\t\t/**\n\t\t * References an active resizer.\n\t\t *\n\t\t * Active resizer means a resizer which handle is actively used by the end user.\n\t\t *\n\t\t * @protected\n\t\t * @observable\n\t\t * @member {module:widget/widgetresize/resizer~Resizer|null} #_activeResizer\n\t\t */\n\t\tthis.set( '_activeResizer', null );\n\n\t\t/**\n\t\t * A map of resizers created using this plugin instance.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map.<module:engine/view/containerelement~ContainerElement, module:widget/widgetresize/resizer~Resizer>}\n\t\t */\n\t\tthis._resizers = new Map();\n\n\t\tediting.view.addObserver( MouseObserver );\n\n\t\tthis._observer = Object.create( DomEmitterMixin );\n\n\t\tthis.listenTo( editing.view.document, 'mousedown', this._mouseDownListener.bind( this ), { priority: 'high' } );\n\n\t\tthis._observer.listenTo( domDocument, 'mousemove', this._mouseMoveListener.bind( this ) );\n\t\tthis._observer.listenTo( domDocument, 'mouseup', this._mouseUpListener.bind( this ) );\n\n\t\tconst redrawSelectedResizer = () => {\n\t\t\tif ( this.selectedResizer && this.selectedResizer.isVisible ) {\n\t\t\t\tthis.selectedResizer.redraw();\n\t\t\t}\n\t\t};\n\n\t\tthis._redrawSelectedResizerThrottled = throttle( redrawSelectedResizer, 200 );\n\n\t\t// Redrawing on any change of the UI of the editor (including content changes).\n\t\tthis.editor.ui.on( 'update', this._redrawSelectedResizerThrottled );\n\n\t\t// Remove view widget-resizer mappings for widgets that have been removed from the document.\n\t\t// https://github.com/ckeditor/ckeditor5/issues/10156\n\t\t// https://github.com/ckeditor/ckeditor5/issues/10266\n\t\tthis.editor.model.document.on( 'change', () => {\n\t\t\tfor ( const [ viewElement, resizer ] of this._resizers ) {\n\t\t\t\tif ( !viewElement.isAttached() ) {\n\t\t\t\t\tthis._resizers.delete( viewElement );\n\t\t\t\t\tresizer.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n\t\tthis._observer.listenTo( global.window, 'resize', this._redrawSelectedResizerThrottled );\n\n\t\tconst viewSelection = this.editor.editing.view.document.selection;\n\n\t\tviewSelection.on( 'change', () => {\n\t\t\tconst selectedElement = viewSelection.getSelectedElement();\n\n\t\t\tconst resizer = this.getResizerByViewElement( selectedElement ) || null;\n\t\t\tif ( resizer ) {\n\t\t\t\tthis.select( resizer );\n\t\t\t} else {\n\t\t\t\tthis.deselect();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._observer.stopListening();\n\n\t\tfor ( const resizer of this._resizers.values() ) {\n\t\t\tresizer.destroy();\n\t\t}\n\n\t\tthis._redrawSelectedResizerThrottled.cancel();\n\t}\n\n\t/**\n\t * Marks resizer as selected.\n\t *\n\t * @param {module:widget/widgetresize/resizer~Resizer} resizer\n\t */\n\tselect( resizer ) {\n\t\tthis.deselect();\n\t\tthis.selectedResizer = resizer;\n\t\tthis.selectedResizer.isSelected = true;\n\t}\n\n\t/**\n\t * Deselects currently set resizer.\n\t */\n\tdeselect() {\n\t\tif ( this.selectedResizer ) {\n\t\t\tthis.selectedResizer.isSelected = false;\n\t\t}\n\n\t\tthis.selectedResizer = null;\n\t}\n\n\t/**\n\t * @param {module:widget/widgetresize~ResizerOptions} [options] Resizer options.\n\t * @returns {module:widget/widgetresize/resizer~Resizer}\n\t */\n\tattachTo( options ) {\n\t\tconst resizer = new Resizer( options );\n\t\tconst plugins = this.editor.plugins;\n\n\t\tresizer.attach();\n\n\t\tif ( plugins.has( 'WidgetToolbarRepository' ) ) {\n\t\t\t// Hiding widget toolbar to improve the performance\n\t\t\t// (https://github.com/ckeditor/ckeditor5-widget/pull/112#issuecomment-564528765).\n\t\t\tconst widgetToolbarRepository = plugins.get( 'WidgetToolbarRepository' );\n\n\t\t\tresizer.on( 'begin', () => {\n\t\t\t\twidgetToolbarRepository.forceDisabled( 'resize' );\n\t\t\t}, { priority: 'lowest' } );\n\n\t\t\tresizer.on( 'cancel', () => {\n\t\t\t\twidgetToolbarRepository.clearForceDisabled( 'resize' );\n\t\t\t}, { priority: 'highest' } );\n\n\t\t\tresizer.on( 'commit', () => {\n\t\t\t\twidgetToolbarRepository.clearForceDisabled( 'resize' );\n\t\t\t}, { priority: 'highest' } );\n\t\t}\n\n\t\tthis._resizers.set( options.viewElement, resizer );\n\n\t\tconst viewSelection = this.editor.editing.view.document.selection;\n\t\tconst selectedElement = viewSelection.getSelectedElement();\n\n\t\t// If the element the resizer is created for is currently focused, it should become visible.\n\t\tif ( this.getResizerByViewElement( selectedElement ) == resizer ) {\n\t\t\tthis.select( resizer );\n\t\t}\n\n\t\treturn resizer;\n\t}\n\n\t/**\n\t * Returns a resizer created for a given view element (widget element).\n\t *\n\t * @param {module:engine/view/containerelement~ContainerElement} viewElement View element associated with the resizer.\n\t * @returns {module:widget/widgetresize/resizer~Resizer|undefined}\n\t */\n\tgetResizerByViewElement( viewElement ) {\n\t\treturn this._resizers.get( viewElement );\n\t}\n\n\t/**\n\t * Returns a resizer that contains a given resize handle.\n\t *\n\t * @protected\n\t * @param {HTMLElement} domResizeHandle\n\t * @returns {module:widget/widgetresize/resizer~Resizer}\n\t */\n\t_getResizerByHandle( domResizeHandle ) {\n\t\tfor ( const resizer of this._resizers.values() ) {\n\t\t\tif ( resizer.containsHandle( domResizeHandle ) ) {\n\t\t\t\treturn resizer;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @protected\n\t * @param {module:utils/eventinfo~EventInfo} event\n\t * @param {Event} domEventData Native DOM event.\n\t */\n\t_mouseDownListener( event, domEventData ) {\n\t\tconst resizeHandle = domEventData.domTarget;\n\n\t\tif ( !Resizer.isResizeHandle( resizeHandle ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._activeResizer = this._getResizerByHandle( resizeHandle );\n\n\t\tif ( this._activeResizer ) {\n\t\t\tthis._activeResizer.begin( resizeHandle );\n\n\t\t\t// Do not call other events when resizing. See: #6755.\n\t\t\tevent.stop();\n\t\t\tdomEventData.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * @protected\n\t * @param {module:utils/eventinfo~EventInfo} event\n\t * @param {Event} domEventData Native DOM event.\n\t */\n\t_mouseMoveListener( event, domEventData ) {\n\t\tif ( this._activeResizer ) {\n\t\t\tthis._activeResizer.updateSize( domEventData );\n\t\t}\n\t}\n\n\t/**\n\t * @protected\n\t */\n\t_mouseUpListener() {\n\t\tif ( this._activeResizer ) {\n\t\t\tthis._activeResizer.commit();\n\t\t\tthis._activeResizer = null;\n\t\t}\n\t}\n}\n\nmix( WidgetResize, ObservableMixin );\n\n/**\n * Interface describing a resizer. It allows to specify the resizing host, custom logic for calculating aspect ratio, etc.\n *\n * @interface ResizerOptions\n */\n\n/**\n * Editor instance associated with the resizer.\n *\n * @member {module:core/editor/editor~Editor} module:widget/widgetresize~ResizerOptions#editor\n */\n\n/**\n * @member {module:engine/model/element~Element} module:widget/widgetresize~ResizerOptions#modelElement\n */\n\n/**\n * A view of an element to be resized. Typically it's the main widget's view instance.\n *\n * @member {module:engine/view/containerelement~ContainerElement} module:widget/widgetresize~ResizerOptions#viewElement\n */\n\n/**\n * A callback to be executed once the resizing process is done.\n *\n * It receives a `Number` (`newValue`) as a parameter.\n *\n * For example, {@link module:image/imageresize~ImageResize} uses it to execute the resize image command\n * which puts the new value into the model.\n *\n * ```js\n * {\n *\teditor,\n *\tmodelElement: data.item,\n *\tviewElement: widget,\n *\n *\tonCommit( newValue ) {\n *\t\teditor.execute( 'resizeImage', { width: newValue } );\n *\t}\n * };\n * ```\n *\n *\n * @member {Function} module:widget/widgetresize~ResizerOptions#onCommit\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#getResizeHost\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#isCentered\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}