{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/attributeoperation\n */\nimport Operation from './operation';\nimport { _setAttribute } from './utils';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { isEqual } from 'lodash-es';\n/**\n * Operation to change nodes' attribute.\n *\n * Using this class you can add, remove or change value of the attribute.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class AttributeOperation extends Operation {\n  /**\n   * Creates an operation that changes, removes or adds attributes.\n   *\n   * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\n   * have an attribute with the same key as the added attribute.\n   *\n   * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\n   * must have an attribute with that key added.\n   *\n   * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\n   * operation's ranges must already have an attribute with given key and `oldValue` as value\n   *\n   * @param {module:engine/model/range~Range} range Range on which the operation should be applied. Must be a flat range.\n   * @param {String} key Key of an attribute to change or remove.\n   * @param {*} oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n   * @param {*} newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(range, key, oldValue, newValue, baseVersion) {\n    super(baseVersion);\n    /**\n     * Range on which operation should be applied.\n     *\n     * @readonly\n     * @member {module:engine/model/range~Range}\n     */\n    this.range = range.clone();\n    /**\n     * Key of an attribute to change or remove.\n     *\n     * @readonly\n     * @member {String}\n     */\n    this.key = key;\n    /**\n     * Old value of the attribute with given key or `null`, if attribute was not set before.\n     *\n     * @readonly\n     * @member {*}\n     */\n    this.oldValue = oldValue === undefined ? null : oldValue;\n    /**\n     * New value of the attribute with given key or `null`, if operation should remove attribute.\n     *\n     * @readonly\n     * @member {*}\n     */\n    this.newValue = newValue === undefined ? null : newValue;\n  }\n  /**\n   * @inheritDoc\n   */\n  get type() {\n    if (this.oldValue === null) {\n      return 'addAttribute';\n    } else if (this.newValue === null) {\n      return 'removeAttribute';\n    } else {\n      return 'changeAttribute';\n    }\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/attributeoperation~AttributeOperation} Clone of this operation.\n   */\n  clone() {\n    return new AttributeOperation(this.range, this.key, this.oldValue, this.newValue, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n   */\n  getReversed() {\n    return new AttributeOperation(this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n  toJSON() {\n    const json = super.toJSON();\n    json.range = this.range.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   * @internal\n   */\n  _validate() {\n    if (!this.range.isFlat) {\n      /**\n       * The range to change is not flat.\n       *\n       * @error attribute-operation-range-not-flat\n       */\n      throw new CKEditorError('attribute-operation-range-not-flat', this);\n    }\n    for (const item of this.range.getItems({\n      shallow: true\n    })) {\n      if (this.oldValue !== null && !isEqual(item.getAttribute(this.key), this.oldValue)) {\n        /**\n         * Changed node has different attribute value than operation's old attribute value.\n         *\n         * @error attribute-operation-wrong-old-value\n         * @param {module:engine/model/item~Item} item\n         * @param {String} key\n         * @param {*} value\n         */\n        throw new CKEditorError('attribute-operation-wrong-old-value', this, {\n          item,\n          key: this.key,\n          value: this.oldValue\n        });\n      }\n      if (this.oldValue === null && this.newValue !== null && item.hasAttribute(this.key)) {\n        /**\n         * The attribute with given key already exists for the given node.\n         *\n         * @error attribute-operation-attribute-exists\n         * @param {module:engine/model/node~Node} node\n         * @param {String} key\n         */\n        throw new CKEditorError('attribute-operation-attribute-exists', this, {\n          node: item,\n          key: this.key\n        });\n      }\n    }\n  }\n  /**\n   * @inheritDoc\n   * @internal\n   */\n  _execute() {\n    // If value to set is same as old value, don't do anything.\n    if (!isEqual(this.oldValue, this.newValue)) {\n      // Execution.\n      _setAttribute(this.range, this.key, this.newValue);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  static get className() {\n    return 'AttributeOperation';\n  }\n  /**\n   * Creates `AttributeOperation` object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n   */\n  static fromJSON(json, document) {\n    return new AttributeOperation(Range.fromJSON(json.range, document), json.key, json.oldValue, json.newValue, json.baseVersion);\n  }\n}","map":{"version":3,"names":["Operation","_setAttribute","Range","CKEditorError","isEqual","AttributeOperation","constructor","range","key","oldValue","newValue","baseVersion","clone","undefined","type","getReversed","toJSON","json","_validate","isFlat","item","getItems","shallow","getAttribute","value","hasAttribute","node","_execute","className","fromJSON","document"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/attributeoperation.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/attributeoperation\n */\nimport Operation from './operation';\nimport { _setAttribute } from './utils';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { isEqual } from 'lodash-es';\n/**\n * Operation to change nodes' attribute.\n *\n * Using this class you can add, remove or change value of the attribute.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class AttributeOperation extends Operation {\n    /**\n     * Creates an operation that changes, removes or adds attributes.\n     *\n     * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\n     * have an attribute with the same key as the added attribute.\n     *\n     * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\n     * must have an attribute with that key added.\n     *\n     * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\n     * operation's ranges must already have an attribute with given key and `oldValue` as value\n     *\n     * @param {module:engine/model/range~Range} range Range on which the operation should be applied. Must be a flat range.\n     * @param {String} key Key of an attribute to change or remove.\n     * @param {*} oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n     * @param {*} newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n     * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(range, key, oldValue, newValue, baseVersion) {\n        super(baseVersion);\n        /**\n         * Range on which operation should be applied.\n         *\n         * @readonly\n         * @member {module:engine/model/range~Range}\n         */\n        this.range = range.clone();\n        /**\n         * Key of an attribute to change or remove.\n         *\n         * @readonly\n         * @member {String}\n         */\n        this.key = key;\n        /**\n         * Old value of the attribute with given key or `null`, if attribute was not set before.\n         *\n         * @readonly\n         * @member {*}\n         */\n        this.oldValue = oldValue === undefined ? null : oldValue;\n        /**\n         * New value of the attribute with given key or `null`, if operation should remove attribute.\n         *\n         * @readonly\n         * @member {*}\n         */\n        this.newValue = newValue === undefined ? null : newValue;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        if (this.oldValue === null) {\n            return 'addAttribute';\n        }\n        else if (this.newValue === null) {\n            return 'removeAttribute';\n        }\n        else {\n            return 'changeAttribute';\n        }\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @returns {module:engine/model/operation/attributeoperation~AttributeOperation} Clone of this operation.\n     */\n    clone() {\n        return new AttributeOperation(this.range, this.key, this.oldValue, this.newValue, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     *\n     * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n     */\n    getReversed() {\n        return new AttributeOperation(this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.range = this.range.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        if (!this.range.isFlat) {\n            /**\n             * The range to change is not flat.\n             *\n             * @error attribute-operation-range-not-flat\n             */\n            throw new CKEditorError('attribute-operation-range-not-flat', this);\n        }\n        for (const item of this.range.getItems({ shallow: true })) {\n            if (this.oldValue !== null && !isEqual(item.getAttribute(this.key), this.oldValue)) {\n                /**\n                 * Changed node has different attribute value than operation's old attribute value.\n                 *\n                 * @error attribute-operation-wrong-old-value\n                 * @param {module:engine/model/item~Item} item\n                 * @param {String} key\n                 * @param {*} value\n                 */\n                throw new CKEditorError('attribute-operation-wrong-old-value', this, { item, key: this.key, value: this.oldValue });\n            }\n            if (this.oldValue === null && this.newValue !== null && item.hasAttribute(this.key)) {\n                /**\n                 * The attribute with given key already exists for the given node.\n                 *\n                 * @error attribute-operation-attribute-exists\n                 * @param {module:engine/model/node~Node} node\n                 * @param {String} key\n                 */\n                throw new CKEditorError('attribute-operation-attribute-exists', this, { node: item, key: this.key });\n            }\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        // If value to set is same as old value, don't do anything.\n        if (!isEqual(this.oldValue, this.newValue)) {\n            // Execution.\n            _setAttribute(this.range, this.key, this.newValue);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'AttributeOperation';\n    }\n    /**\n     * Creates `AttributeOperation` object from deserilized object, i.e. from parsed JSON string.\n     *\n     * @param {Object} json Deserialized JSON object.\n     * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n     * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n     */\n    static fromJSON(json, document) {\n        return new AttributeOperation(Range.fromJSON(json.range, document), json.key, json.oldValue, json.newValue, json.baseVersion);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}