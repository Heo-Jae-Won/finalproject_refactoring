{"ast":null,"code":"var _jsxFileName = \"C:\\\\data\\\\project\\\\chatting_progress\\\\src\\\\my\\\\MyChatList.jsx\",\n  _s = $RefreshSig$();\nimport { addDoc, collection, deleteDoc, doc, getFirestore, limit, onSnapshot, orderBy, query, where } from 'firebase/firestore';\nimport qs from 'qs';\nimport { default as React, useContext, useEffect, useRef, useState } from 'react';\nimport { Button, Form, Row } from 'react-bootstrap';\nimport { UserContext } from '../context/UserContext';\nimport { app } from '../fireStore';\nimport MyChatItem from './MyChatItem';\nimport './MyChatList.css';\nimport { getStorage, ref as sRef, uploadBytesResumable, getDownloadURL, deleteObject } from \"firebase/storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyChatList = _ref => {\n  _s();\n  let {\n    location,\n    history\n  } = _ref;\n  const db = getFirestore(app);\n  const storage = getStorage();\n  const search = qs.parse(location.search, {\n    ignoreQueryPrefix: true\n  });\n  const pwriter_id = search.pwriter_id;\n  const pcode = search.pcode;\n  const [Message, setMessage] = useState('');\n  const [messageList, setMessageList] = useState([]);\n  const [chatId, setChatId] = useState('unde');\n  const {\n    loginUser\n  } = useContext(UserContext);\n  const imageRef = useRef();\n  const [files, setFileList] = useState([]); // 파일 리스트\n  const [isUploading, setUploading] = useState(false); // 업로드 상태\n  const [photoURL, setPhotosURL] = useState([]); // 업로드 완료된 사진 링크들\n  const [progress, setProgress] = useState(0); // 업로드 진행상태\n\n  const handleImageChange = e => {\n    for (const image of e.target.files) {\n      setFileList(prevState => [...prevState, image]);\n    }\n  };\n\n  // 업로드시 호출될 함수\n  const handleImageUpload = async (e, fileList) => {\n    e.preventDefault();\n    try {\n      setUploading(true);\n      // 업로드의 순서는 상관없으니 Promise.all로 이미지 업로드후 저장된 url 받아오기\n      const urls = await Promise.all(fileList === null || fileList === void 0 ? void 0 : fileList.map(file => {\n        // 스토리지 어디에 저장되게 할껀지 참조 위치를 지정. 아래와 같이 지정해줄시 images 폴더에 파일이름으로 저장\n        const storageRef = ref(Storage, `images/${file.name}`);\n\n        // File 또는 Blob 타입일 경우 uploadBytes 또는 uploadBytesResumable 메소드를 사용\n        // 만약 base64 또는 data_url 문자열로 업로드를 진행할 경우는 uploadString 사용\n        // 자세한 내용은 https://firebase.google.com/docs/storage/web/upload-files 공식문서 참고\n        const task = uploadBytesResumable(storageRef, file);\n\n        // 업로드 진행률을 모니터링, 업로드 진행률 퍼센트로 상태 지정\n        task.on(\"state_changed\", snapshot => {\n          setProgress(Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100));\n        });\n        return getDownloadURL(storageRef);\n      }));\n      // 업로드된 이미지 링크 상태로 지정 (보통은 해당 링크를 데이터베이스(파이어스토어)에 저장)\n      setPhotosURL(urls);\n      alert(\"성공적으로 업로드 되었습니다\");\n    } catch (err) {\n      console.error(err);\n    }\n    // 초기화\n    setProgress(0);\n    setUploading(false);\n  };\n  const getRoomList = () => {\n    const q = query(collection(db, `chatroom`), where('who', 'array-contains', sessionStorage.getItem('uid')), limit(100));\n\n    //chatroom fetch\n    onSnapshot(q, snapshot => {\n      snapshot.forEach(doc => {\n        const li = document.createElement('li');\n        li.className = 'list-group-item';\n        li.innerHTML = `\n                <h6>${sessionStorage.getItem('uid') === doc.data().who[0] ? doc.data().who[1] : doc.data().who[0]}</h6>\n                        <p class='text-small'>${doc.id}</p>\n                `;\n\n        //same chatId onclick ㅡ> duplicate x\n        if (doc.id !== chatId && chatId.includes('unde')) {\n          document.getElementsByClassName('list-group chat-list')[0].append(li);\n        }\n      });\n      for (let i = 0; i < document.getElementsByClassName('list-group-item').length; ++i) {\n        document.getElementsByClassName('list-group-item')[i].addEventListener(\"click\", function (e) {\n          setChatId(document.getElementsByClassName(\"text-small\")[i].innerHTML);\n        });\n      }\n      //if no chatroom\n      const li = document.createElement('div');\n      li.innerHTML = `\n            <h1 class='no-chatroom'>개설된 채팅방이 없습니다</h1>`;\n\n      //no chatId ㅡ>  guidance\n      if (!document.querySelector(\".list-group-item\")) document.getElementsByClassName('row')[0].append(li);\n    });\n  };\n  const onClickref = () => {\n    imageRef.current.onClick();\n  };\n\n  //Doc element를 최초 생성\n  const sendMessage = async e => {\n    if (e.keyCode === 13) {\n      if (Message === '') {\n        alert('보낼 내용을 입력하세요');\n        return;\n      }\n      if (e.ctrlKey) {\n        let val = e.target.value;\n        let start = e.target.selectionStart;\n        let end = e.target.selectionEnd;\n        e.target.value = val.substring(0, start) + \"\\n\" + val.substring(end);\n        setMessage(e.target.value);\n        return false; //  prevent focus\n      }\n\n      const docRef = doc(db, 'chatroom', `${chatId}`);\n      const colRef = collection(docRef, 'messagelist');\n      await addDoc(colRef, {\n        text: Message,\n        date: new Date().getTime(),\n        uid: sessionStorage.getItem('uid'),\n        unickname: loginUser.unickname,\n        uprofile: loginUser.uprofile\n      });\n      setMessage('');\n    }\n  };\n  const getMessageList = () => {\n    const q = query(collection(db, `chatroom/${chatId}/messagelist`), orderBy('date', 'asc'), limit(100));\n    onSnapshot(q, snapshot => {\n      let rows = [];\n      snapshot.forEach(doc => {\n        rows.push({\n          id: doc.id,\n          uid: doc.data().uid,\n          text: doc.data().text,\n          date: doc.data().date,\n          unickname: doc.data().unickname,\n          uprofile: doc.data().uprofile\n        });\n      });\n      setMessageList(rows);\n    });\n  };\n  const onDelete = async id => {\n    if (!window.confirm(`메세지를 삭제하시겠습니까?`)) return;\n    await deleteDoc(doc(db, `chatroom/${chatId}/messagelist`, id));\n  };\n  useEffect(() => {\n    getRoomList();\n    getMessageList();\n  }, [chatId]);\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"container\",\n    style: {\n      marginTop: 100\n    },\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"row\",\n      style: {\n        margin: '150px 0px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"col-3 p-0\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group chat-list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"col-9 p-0\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"chat-room\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wrap\",\n            children: messageList.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: message.uid === sessionStorage.uid ? 'chat ch2' : 'chat ch1',\n              children: /*#__PURE__*/_jsxDEV(MyChatItem, {\n                message: message,\n                onDelete: onDelete\n              }, message.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            className: \"mt-5 justify-content-center\",\n            children: [/*#__PURE__*/_jsxDEV(Form, {\n              className: \"d-flex my-3\",\n              style: {\n                width: '52rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"textarea\",\n                value: Message,\n                onChange: e => setMessage(e.target.value),\n                onKeyDown: sendMessage,\n                placeholder: \"enter\\uB97C \\uB204\\uB974\\uC138\\uC694\",\n                className: \"mx-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"file\",\n                name: \"firebaseImage\",\n                style: {\n                  display: 'none'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"../image/attach.png\",\n                ref: imageRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [sessionStorage.getItem('uid') !== pwriter_id && /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => history.push(`/my/pay/${pcode}`),\n                children: \"\\uACB0\\uC81C\\uCC3D \\uC774\\uB3D9\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                style: {\n                  marginLeft: 80\n                },\n                onClick: () => history.go(-1),\n                children: \"\\uB4A4\\uB85C\\uAC00\\uAE30\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, this);\n};\n_s(MyChatList, \"1z3OBCfcAmLDeklR0gB+3xBNznE=\");\n_c = MyChatList;\nexport default MyChatList;\nvar _c;\n$RefreshReg$(_c, \"MyChatList\");","map":{"version":3,"names":["addDoc","collection","deleteDoc","doc","getFirestore","limit","onSnapshot","orderBy","query","where","qs","default","React","useContext","useEffect","useRef","useState","Button","Form","Row","UserContext","app","MyChatItem","getStorage","ref","sRef","uploadBytesResumable","getDownloadURL","deleteObject","MyChatList","location","history","db","storage","search","parse","ignoreQueryPrefix","pwriter_id","pcode","Message","setMessage","messageList","setMessageList","chatId","setChatId","loginUser","imageRef","files","setFileList","isUploading","setUploading","photoURL","setPhotosURL","progress","setProgress","handleImageChange","e","image","target","prevState","handleImageUpload","fileList","preventDefault","urls","Promise","all","map","file","storageRef","Storage","name","task","on","snapshot","Math","round","bytesTransferred","totalBytes","alert","err","console","error","getRoomList","q","sessionStorage","getItem","forEach","li","document","createElement","className","innerHTML","data","who","id","includes","getElementsByClassName","append","i","length","addEventListener","querySelector","onClickref","current","onClick","sendMessage","keyCode","ctrlKey","val","value","start","selectionStart","end","selectionEnd","substring","docRef","colRef","text","date","Date","getTime","uid","unickname","uprofile","getMessageList","rows","push","onDelete","window","confirm","marginTop","margin","message","width","display","marginLeft","go"],"sources":["C:/data/project/chatting_progress/src/my/MyChatList.jsx"],"sourcesContent":["import { addDoc, collection, deleteDoc, doc, getFirestore, limit, onSnapshot, orderBy, query, where } from 'firebase/firestore';\r\nimport qs from 'qs';\r\nimport { default as React, useContext, useEffect, useRef, useState } from 'react';\r\nimport { Button, Form, Row } from 'react-bootstrap';\r\nimport { UserContext } from '../context/UserContext';\r\nimport { app } from '../fireStore';\r\nimport MyChatItem from './MyChatItem';\r\nimport './MyChatList.css';\r\nimport {\r\n    getStorage,\r\n    ref as sRef,\r\n    uploadBytesResumable,\r\n    getDownloadURL,\r\n    deleteObject\r\n  } from \"firebase/storage\";\r\nconst MyChatList = ({ location, history }) => {\r\n    const db = getFirestore(app);\r\n    const storage = getStorage();\r\n    const search = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n    const pwriter_id = search.pwriter_id;\r\n    const pcode = search.pcode;\r\n    const [Message, setMessage] = useState('');\r\n    const [messageList, setMessageList] = useState([]);\r\n    const [chatId, setChatId] = useState('unde');\r\n    const { loginUser } = useContext(UserContext);\r\n    const imageRef = useRef();\r\n\r\n    const [files, setFileList] = useState([]); // 파일 리스트\r\n    const [isUploading, setUploading] = useState(false); // 업로드 상태\r\n    const [photoURL, setPhotosURL] = useState([]); // 업로드 완료된 사진 링크들\r\n    const [progress, setProgress] = useState(0); // 업로드 진행상태\r\n\r\n\r\n    const handleImageChange = (e) => {\r\n        for (const image of e.target.files) {\r\n          setFileList((prevState) => [...prevState, image]);\r\n        }\r\n      };\r\n    \r\n      // 업로드시 호출될 함수\r\n      const handleImageUpload = async (e, fileList) => {\r\n        e.preventDefault();\r\n        try {\r\n          setUploading(true);\r\n          // 업로드의 순서는 상관없으니 Promise.all로 이미지 업로드후 저장된 url 받아오기\r\n          const urls = await Promise.all(\r\n            fileList?.map((file) => {\r\n             // 스토리지 어디에 저장되게 할껀지 참조 위치를 지정. 아래와 같이 지정해줄시 images 폴더에 파일이름으로 저장\r\n              const storageRef = ref(Storage, `images/${file.name}`);\r\n              \r\n              // File 또는 Blob 타입일 경우 uploadBytes 또는 uploadBytesResumable 메소드를 사용\r\n              // 만약 base64 또는 data_url 문자열로 업로드를 진행할 경우는 uploadString 사용\r\n              // 자세한 내용은 https://firebase.google.com/docs/storage/web/upload-files 공식문서 참고\r\n              const task = uploadBytesResumable(storageRef, file);\r\n              \r\n              // 업로드 진행률을 모니터링, 업로드 진행률 퍼센트로 상태 지정\r\n              task.on(\"state_changed\", (snapshot) => {\r\n                setProgress(\r\n                  Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                  )\r\n                );\r\n              });\r\n              return getDownloadURL(storageRef);\r\n            })\r\n          );\r\n          // 업로드된 이미지 링크 상태로 지정 (보통은 해당 링크를 데이터베이스(파이어스토어)에 저장)\r\n          setPhotosURL(urls);\r\n          alert(\"성공적으로 업로드 되었습니다\");\r\n        } catch (err) {\r\n          console.error(err);\r\n        }\r\n        // 초기화\r\n        setProgress(0);\r\n        setUploading(false);\r\n      };\r\n\r\n    const getRoomList = () => {\r\n        const q = query(\r\n            collection(db, `chatroom`),\r\n            where('who', 'array-contains', sessionStorage.getItem('uid')),\r\n            limit(100)\r\n        );\r\n\r\n        //chatroom fetch\r\n        onSnapshot(q, (snapshot) => {\r\n\r\n            snapshot.forEach((doc) => {\r\n                const li = document.createElement('li');\r\n\r\n                li.className = 'list-group-item';\r\n\r\n                li.innerHTML = `\r\n                <h6>${sessionStorage.getItem('uid') === doc.data().who[0] ?\r\n                        doc.data().who[1]\r\n                        :\r\n                        doc.data().who[0]}</h6>\r\n                        <p class='text-small'>${doc.id}</p>\r\n                `;\r\n\r\n                //same chatId onclick ㅡ> duplicate x\r\n                if ((doc.id !== chatId) && (chatId.includes('unde'))) {\r\n                    document.getElementsByClassName('list-group chat-list')[0].append(li);\r\n                }\r\n            });\r\n\r\n\r\n            for (let i = 0; i < document.getElementsByClassName('list-group-item').length; ++i) {\r\n                document.getElementsByClassName('list-group-item')[i].addEventListener(\"click\", function (e) {\r\n                    setChatId(document.getElementsByClassName(\"text-small\")[i].innerHTML)\r\n                })\r\n            }\r\n            //if no chatroom\r\n            const li = document.createElement('div');\r\n\r\n            li.innerHTML = `\r\n            <h1 class='no-chatroom'>개설된 채팅방이 없습니다</h1>`\r\n                ;\r\n\r\n            //no chatId ㅡ>  guidance\r\n            if (!document.querySelector(\".list-group-item\"))\r\n                document.getElementsByClassName('row')[0].append(li);\r\n\r\n\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n    const onClickref = () => {\r\n        imageRef.current.onClick()\r\n    }\r\n\r\n    //Doc element를 최초 생성\r\n    const sendMessage = async (e) => {\r\n        if (e.keyCode === 13) {\r\n            if (Message === '') {\r\n                alert('보낼 내용을 입력하세요')\r\n                return;\r\n            }\r\n            if (e.ctrlKey) {\r\n                let val = e.target.value;\r\n                let start = e.target.selectionStart;\r\n                let end = e.target.selectionEnd;\r\n                e.target.value = val.substring(0, start) + \"\\n\" + val.substring(end);\r\n                setMessage(e.target.value);\r\n                return false; //  prevent focus\r\n            }\r\n\r\n            const docRef = doc(db, 'chatroom', `${chatId}`);\r\n            const colRef = collection(docRef, 'messagelist')\r\n            await addDoc(colRef, {\r\n                text: Message,\r\n                date: new Date().getTime(),\r\n                uid: sessionStorage.getItem('uid'),\r\n                unickname: loginUser.unickname,\r\n                uprofile: loginUser.uprofile\r\n            });\r\n            setMessage('');\r\n        }\r\n    }\r\n\r\n    const getMessageList = () => {\r\n        const q = query(\r\n            collection(db, `chatroom/${chatId}/messagelist`),\r\n            orderBy('date', 'asc'),\r\n            limit(100)\r\n        );\r\n\r\n        onSnapshot(q, (snapshot) => {\r\n            let rows = [];\r\n            snapshot.forEach((doc) => {\r\n                rows.push({\r\n                    id: doc.id,\r\n                    uid: doc.data().uid,\r\n                    text: doc.data().text,\r\n                    date: doc.data().date,\r\n                    unickname: doc.data().unickname,\r\n                    uprofile: doc.data().uprofile\r\n                });\r\n            });\r\n            setMessageList(rows);\r\n        });\r\n    }\r\n\r\n    const onDelete = async (id) => {\r\n        if (!window.confirm(`메세지를 삭제하시겠습니까?`)) return;\r\n        await deleteDoc(doc(db, `chatroom/${chatId}/messagelist`, id));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRoomList();\r\n        getMessageList();\r\n    }, [chatId]);\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <li className=\"container\" style={{ marginTop: 100 }}>\r\n            <li className=\"row\" style={{ margin: '150px 0px' }}>\r\n\r\n                <li className=\"col-3 p-0\">\r\n\r\n                    <ul className=\"list-group chat-list\">\r\n                    </ul>\r\n\r\n                </li>\r\n                <li className=\"col-9 p-0\">\r\n\r\n                    <li className=\"chat-room\">\r\n                        <div className=\"wrap\">\r\n                            {messageList.map(message =>\r\n                                <div className={message.uid === sessionStorage.uid ? 'chat ch2' : 'chat ch1'}>\r\n                                    <MyChatItem key={message.id}\r\n                                        message={message}\r\n                                        onDelete={onDelete} />\r\n                                </div>\r\n                            )}\r\n\r\n                        </div>\r\n\r\n                        <Row className=\"mt-5 justify-content-center\">\r\n                            <Form className=\"d-flex my-3\" style={{ width: '52rem' }}>\r\n                                <Form.Control\r\n                                    as=\"textarea\"\r\n                                    value={Message}\r\n                                    onChange={(e) => setMessage(e.target.value)}\r\n                                    onKeyDown={sendMessage}\r\n                                    placeholder='enter를 누르세요' className=\"mx-2\" />\r\n                                <Form.Control type=\"file\" name='firebaseImage' style={{ display: 'none' }} />\r\n                                <img src=\"../image/attach.png\" ref={imageRef} />\r\n                            </Form>\r\n                            <div>\r\n                                {sessionStorage.getItem('uid') !== pwriter_id &&\r\n                                    <Button onClick={() => history.push(`/my/pay/${pcode}`)}>결제창 이동</Button>}\r\n                                <Button style={{ marginLeft: 80 }} onClick={() => history.go(-1)}>뒤로가기</Button>\r\n                            </div>\r\n                        </Row>\r\n                    </li>\r\n                </li>\r\n            </li>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default MyChatList"],"mappings":"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"},"metadata":{},"sourceType":"module"}