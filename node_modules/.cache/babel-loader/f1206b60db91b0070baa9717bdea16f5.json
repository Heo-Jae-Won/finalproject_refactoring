{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizerstate\n */\n\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Stores the internal state of a single resizable object.\n *\n */\nexport default class ResizeState {\n  /**\n   * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n   */\n  constructor(options) {\n    /**\n     * The original width (pixels) of the resized object when the resize process was started.\n     *\n     * @readonly\n     * @member {Number} #originalWidth\n     */\n\n    /**\n     * The original height (pixels) of the resized object when the resize process was started.\n     *\n     * @readonly\n     * @member {Number} #originalHeight\n     */\n\n    /**\n     * The original width (percents) of the resized object when the resize process was started.\n     *\n     * @readonly\n     * @member {Number} #originalWidthPercents\n     */\n\n    /**\n     * The position of the handle that initiated the resizing. E.g. `\"top-left\"`, `\"bottom-right\"` etc. or `null`\n     * if unknown.\n     *\n     * @readonly\n     * @observable\n     * @member {String|null} #activeHandlePosition\n     */\n    this.set('activeHandlePosition', null);\n\n    /**\n     * The width (percents) proposed, but not committed yet, in the current resize process.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #proposedWidthPercents\n     */\n    this.set('proposedWidthPercents', null);\n\n    /**\n     * The width (pixels) proposed, but not committed yet, in the current resize process.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #proposedWidthPixels\n     */\n    this.set('proposedWidth', null);\n\n    /**\n     * The height (pixels) proposed, but not committed yet, in the current resize process.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #proposedHeightPixels\n     */\n    this.set('proposedHeight', null);\n    this.set('proposedHandleHostWidth', null);\n    this.set('proposedHandleHostHeight', null);\n\n    /**\n     * A width to height ratio of the resized image.\n     *\n     * @readonly\n     * @member {Number} #aspectRatio\n     */\n\n    /**\n     * @private\n     * @type {module:widget/widgetresize~ResizerOptions}\n     */\n    this._options = options;\n\n    /**\n     * The reference point of the resizer where the dragging started. It is used to measure the distance the user cursor\n     * traveled, so how much the image should be enlarged.\n     * This information is only known after the DOM was rendered, so it will be updated later.\n     *\n     * @private\n     * @type {Object}\n     */\n    this._referenceCoordinates = null;\n  }\n\n  /**\n   *\n   * @param {HTMLElement} domResizeHandle The handle used to calculate the reference point.\n   * @param {HTMLElement} domHandleHost\n   * @param {HTMLElement} domResizeHost\n   */\n  begin(domResizeHandle, domHandleHost, domResizeHost) {\n    const clientRect = new Rect(domHandleHost);\n    this.activeHandlePosition = getHandlePosition(domResizeHandle);\n    this._referenceCoordinates = getAbsoluteBoundaryPoint(domHandleHost, getOppositePosition(this.activeHandlePosition));\n    this.originalWidth = clientRect.width;\n    this.originalHeight = clientRect.height;\n    this.aspectRatio = clientRect.width / clientRect.height;\n    const widthStyle = domResizeHost.style.width;\n    if (widthStyle && widthStyle.match(/^\\d+(\\.\\d*)?%$/)) {\n      this.originalWidthPercents = parseFloat(widthStyle);\n    } else {\n      this.originalWidthPercents = calculateHostPercentageWidth(domResizeHost, clientRect);\n    }\n  }\n  update(newSize) {\n    this.proposedWidth = newSize.width;\n    this.proposedHeight = newSize.height;\n    this.proposedWidthPercents = newSize.widthPercents;\n    this.proposedHandleHostWidth = newSize.handleHostWidth;\n    this.proposedHandleHostHeight = newSize.handleHostHeight;\n  }\n}\nmix(ResizeState, ObservableMixin);\n\n// Calculates a relative width of a `domResizeHost` compared to it's parent in percents.\n//\n// @private\n// @param {HTMLElement} domResizeHost\n// @param {module:utils/dom/rect~Rect} resizeHostRect\n// @returns {Number}\nfunction calculateHostPercentageWidth(domResizeHost, resizeHostRect) {\n  const domResizeHostParent = domResizeHost.parentElement;\n  // Need to use computed style as it properly excludes parent's paddings from the returned value.\n  const parentWidth = parseFloat(domResizeHostParent.ownerDocument.defaultView.getComputedStyle(domResizeHostParent).width);\n  return resizeHostRect.width / parentWidth * 100;\n}\n\n// Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n//\n// @private\n// @param {HTMLElement} element\n// @param {String} resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n// @returns {Object} return\n// @returns {Number} return.x\n// @returns {Number} return.y\nfunction getAbsoluteBoundaryPoint(element, resizerPosition) {\n  const elementRect = new Rect(element);\n  const positionParts = resizerPosition.split('-');\n  const ret = {\n    x: positionParts[1] == 'right' ? elementRect.right : elementRect.left,\n    y: positionParts[0] == 'bottom' ? elementRect.bottom : elementRect.top\n  };\n  ret.x += element.ownerDocument.defaultView.scrollX;\n  ret.y += element.ownerDocument.defaultView.scrollY;\n  return ret;\n}\n\n// @private\n// @param {String} resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n// @returns {String} A prefixed HTML class name for the resizer element.\nfunction getResizerHandleClass(resizerPosition) {\n  return `ck-widget__resizer__handle-${resizerPosition}`;\n}\n\n// Determines the position of a given resize handle.\n//\n// @private\n// @param {HTMLElement} domHandle Handle used to calculate the reference point.\n// @returns {String|undefined} Returns a string like `\"top-left\"` or `undefined` if not matched.\nfunction getHandlePosition(domHandle) {\n  const resizerPositions = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];\n  for (const position of resizerPositions) {\n    if (domHandle.classList.contains(getResizerHandleClass(position))) {\n      return position;\n    }\n  }\n}\n\n// @private\n// @param {String} position Like `\"top-left\"`.\n// @returns {String} Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\nfunction getOppositePosition(position) {\n  const parts = position.split('-');\n  const replacements = {\n    top: 'bottom',\n    bottom: 'top',\n    left: 'right',\n    right: 'left'\n  };\n  return `${replacements[parts[0]]}-${replacements[parts[1]]}`;\n}","map":{"version":3,"names":["Rect","ObservableMixin","mix","ResizeState","constructor","options","set","_options","_referenceCoordinates","begin","domResizeHandle","domHandleHost","domResizeHost","clientRect","activeHandlePosition","getHandlePosition","getAbsoluteBoundaryPoint","getOppositePosition","originalWidth","width","originalHeight","height","aspectRatio","widthStyle","style","match","originalWidthPercents","parseFloat","calculateHostPercentageWidth","update","newSize","proposedWidth","proposedHeight","proposedWidthPercents","widthPercents","proposedHandleHostWidth","handleHostWidth","proposedHandleHostHeight","handleHostHeight","resizeHostRect","domResizeHostParent","parentElement","parentWidth","ownerDocument","defaultView","getComputedStyle","element","resizerPosition","elementRect","positionParts","split","ret","x","right","left","y","bottom","top","scrollX","scrollY","getResizerHandleClass","domHandle","resizerPositions","position","classList","contains","parts","replacements"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-widget/src/widgetresize/resizerstate.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizerstate\n */\n\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Stores the internal state of a single resizable object.\n *\n */\nexport default class ResizeState {\n\t/**\n\t * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n\t */\n\tconstructor( options ) {\n\t\t/**\n\t\t * The original width (pixels) of the resized object when the resize process was started.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #originalWidth\n\t\t */\n\n\t\t/**\n\t\t * The original height (pixels) of the resized object when the resize process was started.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #originalHeight\n\t\t */\n\n\t\t/**\n\t\t * The original width (percents) of the resized object when the resize process was started.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #originalWidthPercents\n\t\t */\n\n\t\t/**\n\t\t * The position of the handle that initiated the resizing. E.g. `\"top-left\"`, `\"bottom-right\"` etc. or `null`\n\t\t * if unknown.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String|null} #activeHandlePosition\n\t\t */\n\t\tthis.set( 'activeHandlePosition', null );\n\n\t\t/**\n\t\t * The width (percents) proposed, but not committed yet, in the current resize process.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #proposedWidthPercents\n\t\t */\n\t\tthis.set( 'proposedWidthPercents', null );\n\n\t\t/**\n\t\t * The width (pixels) proposed, but not committed yet, in the current resize process.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #proposedWidthPixels\n\t\t */\n\t\tthis.set( 'proposedWidth', null );\n\n\t\t/**\n\t\t * The height (pixels) proposed, but not committed yet, in the current resize process.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #proposedHeightPixels\n\t\t */\n\t\tthis.set( 'proposedHeight', null );\n\n\t\tthis.set( 'proposedHandleHostWidth', null );\n\t\tthis.set( 'proposedHandleHostHeight', null );\n\n\t\t/**\n\t\t * A width to height ratio of the resized image.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #aspectRatio\n\t\t */\n\n\t\t/**\n\t\t * @private\n\t\t * @type {module:widget/widgetresize~ResizerOptions}\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * The reference point of the resizer where the dragging started. It is used to measure the distance the user cursor\n\t\t * traveled, so how much the image should be enlarged.\n\t\t * This information is only known after the DOM was rendered, so it will be updated later.\n\t\t *\n\t\t * @private\n\t\t * @type {Object}\n\t\t */\n\t\tthis._referenceCoordinates = null;\n\t}\n\n\t/**\n\t *\n\t * @param {HTMLElement} domResizeHandle The handle used to calculate the reference point.\n\t * @param {HTMLElement} domHandleHost\n\t * @param {HTMLElement} domResizeHost\n\t */\n\tbegin( domResizeHandle, domHandleHost, domResizeHost ) {\n\t\tconst clientRect = new Rect( domHandleHost );\n\n\t\tthis.activeHandlePosition = getHandlePosition( domResizeHandle );\n\n\t\tthis._referenceCoordinates = getAbsoluteBoundaryPoint( domHandleHost, getOppositePosition( this.activeHandlePosition ) );\n\n\t\tthis.originalWidth = clientRect.width;\n\t\tthis.originalHeight = clientRect.height;\n\n\t\tthis.aspectRatio = clientRect.width / clientRect.height;\n\n\t\tconst widthStyle = domResizeHost.style.width;\n\n\t\tif ( widthStyle && widthStyle.match( /^\\d+(\\.\\d*)?%$/ ) ) {\n\t\t\tthis.originalWidthPercents = parseFloat( widthStyle );\n\t\t} else {\n\t\t\tthis.originalWidthPercents = calculateHostPercentageWidth( domResizeHost, clientRect );\n\t\t}\n\t}\n\n\tupdate( newSize ) {\n\t\tthis.proposedWidth = newSize.width;\n\t\tthis.proposedHeight = newSize.height;\n\t\tthis.proposedWidthPercents = newSize.widthPercents;\n\n\t\tthis.proposedHandleHostWidth = newSize.handleHostWidth;\n\t\tthis.proposedHandleHostHeight = newSize.handleHostHeight;\n\t}\n}\n\nmix( ResizeState, ObservableMixin );\n\n// Calculates a relative width of a `domResizeHost` compared to it's parent in percents.\n//\n// @private\n// @param {HTMLElement} domResizeHost\n// @param {module:utils/dom/rect~Rect} resizeHostRect\n// @returns {Number}\nfunction calculateHostPercentageWidth( domResizeHost, resizeHostRect ) {\n\tconst domResizeHostParent = domResizeHost.parentElement;\n\t// Need to use computed style as it properly excludes parent's paddings from the returned value.\n\tconst parentWidth = parseFloat( domResizeHostParent.ownerDocument.defaultView.getComputedStyle( domResizeHostParent ).width );\n\n\treturn resizeHostRect.width / parentWidth * 100;\n}\n\n// Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n//\n// @private\n// @param {HTMLElement} element\n// @param {String} resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n// @returns {Object} return\n// @returns {Number} return.x\n// @returns {Number} return.y\nfunction getAbsoluteBoundaryPoint( element, resizerPosition ) {\n\tconst elementRect = new Rect( element );\n\tconst positionParts = resizerPosition.split( '-' );\n\tconst ret = {\n\t\tx: positionParts[ 1 ] == 'right' ? elementRect.right : elementRect.left,\n\t\ty: positionParts[ 0 ] == 'bottom' ? elementRect.bottom : elementRect.top\n\t};\n\n\tret.x += element.ownerDocument.defaultView.scrollX;\n\tret.y += element.ownerDocument.defaultView.scrollY;\n\n\treturn ret;\n}\n\n// @private\n// @param {String} resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n// @returns {String} A prefixed HTML class name for the resizer element.\nfunction getResizerHandleClass( resizerPosition ) {\n\treturn `ck-widget__resizer__handle-${ resizerPosition }`;\n}\n\n// Determines the position of a given resize handle.\n//\n// @private\n// @param {HTMLElement} domHandle Handle used to calculate the reference point.\n// @returns {String|undefined} Returns a string like `\"top-left\"` or `undefined` if not matched.\nfunction getHandlePosition( domHandle ) {\n\tconst resizerPositions = [ 'top-left', 'top-right', 'bottom-right', 'bottom-left' ];\n\n\tfor ( const position of resizerPositions ) {\n\t\tif ( domHandle.classList.contains( getResizerHandleClass( position ) ) ) {\n\t\t\treturn position;\n\t\t}\n\t}\n}\n\n// @private\n// @param {String} position Like `\"top-left\"`.\n// @returns {String} Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\nfunction getOppositePosition( position ) {\n\tconst parts = position.split( '-' );\n\tconst replacements = {\n\t\ttop: 'bottom',\n\t\tbottom: 'top',\n\t\tleft: 'right',\n\t\tright: 'left'\n\t};\n\n\treturn `${ replacements[ parts[ 0 ] ] }-${ replacements[ parts[ 1 ] ] }`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}