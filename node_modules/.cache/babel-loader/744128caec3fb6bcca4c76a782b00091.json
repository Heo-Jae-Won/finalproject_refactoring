{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/conversionhelpers\n */\n/**\n * Base class for conversion helpers.\n */\nexport default class ConversionHelpers {\n  /**\n   * Creates a conversion helpers instance.\n   *\n   * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n   * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} dispatchers\n   */\n  constructor(dispatchers) {\n    this._dispatchers = dispatchers;\n  }\n  /**\n   * Registers a conversion helper.\n   *\n   * **Note**: See full usage example in the `{@link module:engine/conversion/conversion~Conversion#for conversion.for()}`\n   * method description.\n   *\n   * @param {Function} conversionHelper The function to be called on event.\n   * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers|module:engine/conversion/upcasthelpers~UpcastHelpers}\n   */\n  add(conversionHelper) {\n    for (const dispatcher of this._dispatchers) {\n      conversionHelper(dispatcher);\n    }\n    return this;\n  }\n}","map":{"version":3,"names":["ConversionHelpers","constructor","dispatchers","_dispatchers","add","conversionHelper","dispatcher"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversionhelpers.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/conversionhelpers\n */\n/**\n * Base class for conversion helpers.\n */\nexport default class ConversionHelpers {\n    /**\n     * Creates a conversion helpers instance.\n     *\n     * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n     * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} dispatchers\n     */\n    constructor(dispatchers) {\n        this._dispatchers = dispatchers;\n    }\n    /**\n     * Registers a conversion helper.\n     *\n     * **Note**: See full usage example in the `{@link module:engine/conversion/conversion~Conversion#for conversion.for()}`\n     * method description.\n     *\n     * @param {Function} conversionHelper The function to be called on event.\n     * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers|module:engine/conversion/upcasthelpers~UpcastHelpers}\n     */\n    add(conversionHelper) {\n        for (const dispatcher of this._dispatchers) {\n            conversionHelper(dispatcher);\n        }\n        return this;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMA,iBAAiB,CAAC;EACnC;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,WAAW,EAAE;IACrB,IAAI,CAACC,YAAY,GAAGD,WAAW;EACnC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,GAAG,CAACC,gBAAgB,EAAE;IAClB,KAAK,MAAMC,UAAU,IAAI,IAAI,CAACH,YAAY,EAAE;MACxCE,gBAAgB,CAACC,UAAU,CAAC;IAChC;IACA,OAAO,IAAI;EACf;AACJ"},"metadata":{},"sourceType":"module"}