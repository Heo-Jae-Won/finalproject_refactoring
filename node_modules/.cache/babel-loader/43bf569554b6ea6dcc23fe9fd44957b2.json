{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable no-var */\n/**\n * @module utils/translation-service\n */\nimport CKEditorError from './ckeditorerror';\nimport global from './dom/global';\n/* istanbul ignore else */\nif (!global.window.CKEDITOR_TRANSLATIONS) {\n  global.window.CKEDITOR_TRANSLATIONS = {};\n}\n/**\n * Adds translations to existing ones or overrides the existing translations. These translations will later\n * be available for the {@link module:utils/locale~Locale#t `t()`} function.\n *\n * The `translations` is an object which consists of `messageId: translation` pairs. Note that the message ID can be\n * either constructed from the message string or from the message ID if it was passed\n * (this happens rarely and mostly for short messages or messages with placeholders).\n * Since the editor displays only the message string, the message ID can be found either in the source code or in the\n * built translations for another language.\n *\n *\t\tadd( 'pl', {\n *\t\t\t'Cancel': 'Anuluj',\n *\t\t\t'IMAGE': 'obraz', // Note that the `IMAGE` comes from the message ID, while the string can be `image`.\n *\t\t} );\n *\n * If the message is supposed to support various plural forms, make sure to provide an array with the singular form and all plural forms:\n *\n *\t\tadd( 'pl', {\n *\t \t\t'Add space': [ 'Dodaj spację', 'Dodaj %0 spacje', 'Dodaj %0 spacji' ]\n * \t\t} );\n *\n * You should also specify the third argument (the `getPluralForm()` function) that will be used to determine the plural form if no\n * language file was loaded for that language. All language files coming from CKEditor 5 sources will have this option set, so\n * these plural form rules will be reused by other translations added to the registered languages. The `getPluralForm()` function\n * can return either a Boolean or a number.\n *\n * \t\tadd( 'en', {\n *\t \t\t// ... Translations.\n * \t\t}, n => n !== 1 );\n * \t\tadd( 'pl', {\n *\t \t\t// ... Translations.\n * \t\t}, n => n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && ( n % 100 < 10 || n % 100 >= 20 ) ? 1 : 2 );\n *\n * All translations extend the global `window.CKEDITOR_TRANSLATIONS` object. An example of this object can be found below:\n *\n * \t\t{\n * \t\t\tpl: {\n *\t\t\t\tdictionary: {\n *\t\t\t\t\t'Cancel': 'Anuluj',\n *\t\t\t\t\t'Add space': [ 'Dodaj spację', 'Dodaj %0 spacje', 'Dodaj %0 spacji' ]\n *\t\t\t\t},\n *\t\t\t\t// A function that returns the plural form index.\n *\t\t\t\tgetPluralForm: n => n !==1\n *\t\t\t}\n *\t\t\t// Other languages.\n *\t\t}\n *\n * If you cannot import this function from this module (e.g. because you use a CKEditor 5 build), you can\n * still add translations by extending the global `window.CKEDITOR_TRANSLATIONS` object by using a function like\n * the one below:\n *\n *\t\tfunction addTranslations( language, translations, getPluralForm ) {\n *\t\t\tif ( !global.window.CKEDITOR_TRANSLATIONS ) {\n *\t\t\t\tglobal.window.CKEDITOR_TRANSLATIONS = {};\n *\t\t\t}\n\n *\t\t\tif ( !global.window.CKEDITOR_TRANSLATIONS[ language ] ) {\n *\t\t\t\tglobal.window.CKEDITOR_TRANSLATIONS[ language ] = {};\n *\t\t\t}\n *\n *\t\t\tconst languageTranslations = global.window.CKEDITOR_TRANSLATIONS[ language ];\n *\n * \t\t\tlanguageTranslations.dictionary = languageTranslations.dictionary || {};\n * \t\t\tlanguageTranslations.getPluralForm = getPluralForm || languageTranslations.getPluralForm;\n *\n *\t\t\t// Extend the dictionary for the given language.\n *\t\t\tObject.assign( languageTranslations.dictionary, translations );\n *\t\t}\n *\n * @param {String} language Target language.\n * @param {Object.<String,*>} translations An object with translations which will be added to the dictionary.\n * For each message ID the value should be either a translation or an array of translations if the message\n * should support plural forms.\n * @param {Function} [getPluralForm] A function that returns the plural form index (a number).\n */\nexport function add(language, translations, getPluralForm) {\n  if (!global.window.CKEDITOR_TRANSLATIONS[language]) {\n    global.window.CKEDITOR_TRANSLATIONS[language] = {};\n  }\n  const languageTranslations = global.window.CKEDITOR_TRANSLATIONS[language];\n  languageTranslations.dictionary = languageTranslations.dictionary || {};\n  languageTranslations.getPluralForm = getPluralForm || languageTranslations.getPluralForm;\n  Object.assign(languageTranslations.dictionary, translations);\n}\n/**\n * **Note:** This method is internal, use {@link module:utils/locale~Locale#t the `t()` function} instead to translate\n * the editor UI parts.\n *\n * This function is responsible for translating messages to the specified language. It uses translations added perviously\n * by {@link module:utils/translation-service~add} (a translations dictionary and the `getPluralForm()` function\n * to provide accurate translations of plural forms).\n *\n * When no translation is defined in the dictionary or the dictionary does not exist, this function returns\n * the original message string or the message plural depending on the number of elements.\n *\n *\t\ttranslate( 'pl', { string: 'Cancel' } ); // 'Cancel'\n *\n * The third optional argument is the number of elements, based on which the single form or one of the plural forms\n * should be picked when the message is supposed to support various plural forms.\n *\n * \t\ttranslate( 'en', { string: 'Add a space', plural: 'Add %0 spaces' }, 1 ); // 'Add a space'\n * \t\ttranslate( 'en', { string: 'Add a space', plural: 'Add %0 spaces' }, 3 ); // 'Add %0 spaces'\n *\n * The message should provide an ID using the `id` property when the message strings are not unique and their\n * translations should be different.\n *\n *\t\ttranslate( 'en', { string: 'image', id: 'ADD_IMAGE' } );\n *\t\ttranslate( 'en', { string: 'image', id: 'AN_IMAGE' } );\n *\n * @protected\n * @param {String} language Target language.\n * @param {module:utils/translation-service~Message} message A message that will be translated.\n * @param {Number} [quantity] The number of elements for which a plural form should be picked from the target language dictionary.\n * @returns {String} Translated sentence.\n */\nexport function _translate(language, message) {\n  let quantity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (typeof quantity !== 'number') {\n    /**\n     * An incorrect value was passed to the translation function. This was probably caused\n     * by an incorrect message interpolation of a plural form. Note that for messages supporting plural forms\n     * the second argument of the `t()` function should always be a number or an array with a number as the first element.\n     *\n     * @error translation-service-quantity-not-a-number\n     */\n    throw new CKEditorError('translation-service-quantity-not-a-number', null, {\n      quantity\n    });\n  }\n  const numberOfLanguages = getNumberOfLanguages();\n  if (numberOfLanguages === 1) {\n    // Override the language to the only supported one.\n    // This can't be done in the `Locale` class, because the translations comes after the `Locale` class initialization.\n    language = Object.keys(global.window.CKEDITOR_TRANSLATIONS)[0];\n  }\n  const messageId = message.id || message.string;\n  if (numberOfLanguages === 0 || !hasTranslation(language, messageId)) {\n    if (quantity !== 1) {\n      // Return the default plural form that was passed in the `message.plural` parameter.\n      return message.plural;\n    }\n    return message.string;\n  }\n  const dictionary = global.window.CKEDITOR_TRANSLATIONS[language].dictionary;\n  const getPluralForm = global.window.CKEDITOR_TRANSLATIONS[language].getPluralForm || (n => n === 1 ? 0 : 1);\n  const translation = dictionary[messageId];\n  if (typeof translation === 'string') {\n    return translation;\n  }\n  const pluralFormIndex = Number(getPluralForm(quantity));\n  // Note: The `translate` function is not responsible for replacing `%0, %1, ...` with values.\n  return translation[pluralFormIndex];\n}\n/**\n * Clears dictionaries for test purposes.\n *\n * @protected\n */\nexport function _clear() {\n  global.window.CKEDITOR_TRANSLATIONS = {};\n}\n// Checks whether the dictionary exists and translation in that dictionary exists.\nfunction hasTranslation(language, messageId) {\n  return !!global.window.CKEDITOR_TRANSLATIONS[language] && !!global.window.CKEDITOR_TRANSLATIONS[language].dictionary[messageId];\n}\nfunction getNumberOfLanguages() {\n  return Object.keys(global.window.CKEDITOR_TRANSLATIONS).length;\n}","map":{"version":3,"names":["CKEditorError","global","window","CKEDITOR_TRANSLATIONS","add","language","translations","getPluralForm","languageTranslations","dictionary","Object","assign","_translate","message","quantity","numberOfLanguages","getNumberOfLanguages","keys","messageId","id","string","hasTranslation","plural","n","translation","pluralFormIndex","Number","_clear","length"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/translation-service.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable no-var */\n/**\n * @module utils/translation-service\n */\nimport CKEditorError from './ckeditorerror';\nimport global from './dom/global';\n/* istanbul ignore else */\nif (!global.window.CKEDITOR_TRANSLATIONS) {\n    global.window.CKEDITOR_TRANSLATIONS = {};\n}\n/**\n * Adds translations to existing ones or overrides the existing translations. These translations will later\n * be available for the {@link module:utils/locale~Locale#t `t()`} function.\n *\n * The `translations` is an object which consists of `messageId: translation` pairs. Note that the message ID can be\n * either constructed from the message string or from the message ID if it was passed\n * (this happens rarely and mostly for short messages or messages with placeholders).\n * Since the editor displays only the message string, the message ID can be found either in the source code or in the\n * built translations for another language.\n *\n *\t\tadd( 'pl', {\n *\t\t\t'Cancel': 'Anuluj',\n *\t\t\t'IMAGE': 'obraz', // Note that the `IMAGE` comes from the message ID, while the string can be `image`.\n *\t\t} );\n *\n * If the message is supposed to support various plural forms, make sure to provide an array with the singular form and all plural forms:\n *\n *\t\tadd( 'pl', {\n *\t \t\t'Add space': [ 'Dodaj spację', 'Dodaj %0 spacje', 'Dodaj %0 spacji' ]\n * \t\t} );\n *\n * You should also specify the third argument (the `getPluralForm()` function) that will be used to determine the plural form if no\n * language file was loaded for that language. All language files coming from CKEditor 5 sources will have this option set, so\n * these plural form rules will be reused by other translations added to the registered languages. The `getPluralForm()` function\n * can return either a Boolean or a number.\n *\n * \t\tadd( 'en', {\n *\t \t\t// ... Translations.\n * \t\t}, n => n !== 1 );\n * \t\tadd( 'pl', {\n *\t \t\t// ... Translations.\n * \t\t}, n => n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && ( n % 100 < 10 || n % 100 >= 20 ) ? 1 : 2 );\n *\n * All translations extend the global `window.CKEDITOR_TRANSLATIONS` object. An example of this object can be found below:\n *\n * \t\t{\n * \t\t\tpl: {\n *\t\t\t\tdictionary: {\n *\t\t\t\t\t'Cancel': 'Anuluj',\n *\t\t\t\t\t'Add space': [ 'Dodaj spację', 'Dodaj %0 spacje', 'Dodaj %0 spacji' ]\n *\t\t\t\t},\n *\t\t\t\t// A function that returns the plural form index.\n *\t\t\t\tgetPluralForm: n => n !==1\n *\t\t\t}\n *\t\t\t// Other languages.\n *\t\t}\n *\n * If you cannot import this function from this module (e.g. because you use a CKEditor 5 build), you can\n * still add translations by extending the global `window.CKEDITOR_TRANSLATIONS` object by using a function like\n * the one below:\n *\n *\t\tfunction addTranslations( language, translations, getPluralForm ) {\n *\t\t\tif ( !global.window.CKEDITOR_TRANSLATIONS ) {\n *\t\t\t\tglobal.window.CKEDITOR_TRANSLATIONS = {};\n *\t\t\t}\n\n *\t\t\tif ( !global.window.CKEDITOR_TRANSLATIONS[ language ] ) {\n *\t\t\t\tglobal.window.CKEDITOR_TRANSLATIONS[ language ] = {};\n *\t\t\t}\n *\n *\t\t\tconst languageTranslations = global.window.CKEDITOR_TRANSLATIONS[ language ];\n *\n * \t\t\tlanguageTranslations.dictionary = languageTranslations.dictionary || {};\n * \t\t\tlanguageTranslations.getPluralForm = getPluralForm || languageTranslations.getPluralForm;\n *\n *\t\t\t// Extend the dictionary for the given language.\n *\t\t\tObject.assign( languageTranslations.dictionary, translations );\n *\t\t}\n *\n * @param {String} language Target language.\n * @param {Object.<String,*>} translations An object with translations which will be added to the dictionary.\n * For each message ID the value should be either a translation or an array of translations if the message\n * should support plural forms.\n * @param {Function} [getPluralForm] A function that returns the plural form index (a number).\n */\nexport function add(language, translations, getPluralForm) {\n    if (!global.window.CKEDITOR_TRANSLATIONS[language]) {\n        global.window.CKEDITOR_TRANSLATIONS[language] = {};\n    }\n    const languageTranslations = global.window.CKEDITOR_TRANSLATIONS[language];\n    languageTranslations.dictionary = languageTranslations.dictionary || {};\n    languageTranslations.getPluralForm = getPluralForm || languageTranslations.getPluralForm;\n    Object.assign(languageTranslations.dictionary, translations);\n}\n/**\n * **Note:** This method is internal, use {@link module:utils/locale~Locale#t the `t()` function} instead to translate\n * the editor UI parts.\n *\n * This function is responsible for translating messages to the specified language. It uses translations added perviously\n * by {@link module:utils/translation-service~add} (a translations dictionary and the `getPluralForm()` function\n * to provide accurate translations of plural forms).\n *\n * When no translation is defined in the dictionary or the dictionary does not exist, this function returns\n * the original message string or the message plural depending on the number of elements.\n *\n *\t\ttranslate( 'pl', { string: 'Cancel' } ); // 'Cancel'\n *\n * The third optional argument is the number of elements, based on which the single form or one of the plural forms\n * should be picked when the message is supposed to support various plural forms.\n *\n * \t\ttranslate( 'en', { string: 'Add a space', plural: 'Add %0 spaces' }, 1 ); // 'Add a space'\n * \t\ttranslate( 'en', { string: 'Add a space', plural: 'Add %0 spaces' }, 3 ); // 'Add %0 spaces'\n *\n * The message should provide an ID using the `id` property when the message strings are not unique and their\n * translations should be different.\n *\n *\t\ttranslate( 'en', { string: 'image', id: 'ADD_IMAGE' } );\n *\t\ttranslate( 'en', { string: 'image', id: 'AN_IMAGE' } );\n *\n * @protected\n * @param {String} language Target language.\n * @param {module:utils/translation-service~Message} message A message that will be translated.\n * @param {Number} [quantity] The number of elements for which a plural form should be picked from the target language dictionary.\n * @returns {String} Translated sentence.\n */\nexport function _translate(language, message, quantity = 1) {\n    if (typeof quantity !== 'number') {\n        /**\n         * An incorrect value was passed to the translation function. This was probably caused\n         * by an incorrect message interpolation of a plural form. Note that for messages supporting plural forms\n         * the second argument of the `t()` function should always be a number or an array with a number as the first element.\n         *\n         * @error translation-service-quantity-not-a-number\n         */\n        throw new CKEditorError('translation-service-quantity-not-a-number', null, { quantity });\n    }\n    const numberOfLanguages = getNumberOfLanguages();\n    if (numberOfLanguages === 1) {\n        // Override the language to the only supported one.\n        // This can't be done in the `Locale` class, because the translations comes after the `Locale` class initialization.\n        language = Object.keys(global.window.CKEDITOR_TRANSLATIONS)[0];\n    }\n    const messageId = message.id || message.string;\n    if (numberOfLanguages === 0 || !hasTranslation(language, messageId)) {\n        if (quantity !== 1) {\n            // Return the default plural form that was passed in the `message.plural` parameter.\n            return message.plural;\n        }\n        return message.string;\n    }\n    const dictionary = global.window.CKEDITOR_TRANSLATIONS[language].dictionary;\n    const getPluralForm = global.window.CKEDITOR_TRANSLATIONS[language].getPluralForm || (n => n === 1 ? 0 : 1);\n    const translation = dictionary[messageId];\n    if (typeof translation === 'string') {\n        return translation;\n    }\n    const pluralFormIndex = Number(getPluralForm(quantity));\n    // Note: The `translate` function is not responsible for replacing `%0, %1, ...` with values.\n    return translation[pluralFormIndex];\n}\n/**\n * Clears dictionaries for test purposes.\n *\n * @protected\n */\nexport function _clear() {\n    global.window.CKEDITOR_TRANSLATIONS = {};\n}\n// Checks whether the dictionary exists and translation in that dictionary exists.\nfunction hasTranslation(language, messageId) {\n    return (!!global.window.CKEDITOR_TRANSLATIONS[language] &&\n        !!global.window.CKEDITOR_TRANSLATIONS[language].dictionary[messageId]);\n}\nfunction getNumberOfLanguages() {\n    return Object.keys(global.window.CKEDITOR_TRANSLATIONS).length;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,MAAM,MAAM,cAAc;AACjC;AACA,IAAI,CAACA,MAAM,CAACC,MAAM,CAACC,qBAAqB,EAAE;EACtCF,MAAM,CAACC,MAAM,CAACC,qBAAqB,GAAG,CAAC,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAG,CAACC,QAAQ,EAAEC,YAAY,EAAEC,aAAa,EAAE;EACvD,IAAI,CAACN,MAAM,CAACC,MAAM,CAACC,qBAAqB,CAACE,QAAQ,CAAC,EAAE;IAChDJ,MAAM,CAACC,MAAM,CAACC,qBAAqB,CAACE,QAAQ,CAAC,GAAG,CAAC,CAAC;EACtD;EACA,MAAMG,oBAAoB,GAAGP,MAAM,CAACC,MAAM,CAACC,qBAAqB,CAACE,QAAQ,CAAC;EAC1EG,oBAAoB,CAACC,UAAU,GAAGD,oBAAoB,CAACC,UAAU,IAAI,CAAC,CAAC;EACvED,oBAAoB,CAACD,aAAa,GAAGA,aAAa,IAAIC,oBAAoB,CAACD,aAAa;EACxFG,MAAM,CAACC,MAAM,CAACH,oBAAoB,CAACC,UAAU,EAAEH,YAAY,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,UAAU,CAACP,QAAQ,EAAEQ,OAAO,EAAgB;EAAA,IAAdC,QAAQ,uEAAG,CAAC;EACtD,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;IAC9B;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,MAAM,IAAId,aAAa,CAAC,2CAA2C,EAAE,IAAI,EAAE;MAAEc;IAAS,CAAC,CAAC;EAC5F;EACA,MAAMC,iBAAiB,GAAGC,oBAAoB,EAAE;EAChD,IAAID,iBAAiB,KAAK,CAAC,EAAE;IACzB;IACA;IACAV,QAAQ,GAAGK,MAAM,CAACO,IAAI,CAAChB,MAAM,CAACC,MAAM,CAACC,qBAAqB,CAAC,CAAC,CAAC,CAAC;EAClE;EACA,MAAMe,SAAS,GAAGL,OAAO,CAACM,EAAE,IAAIN,OAAO,CAACO,MAAM;EAC9C,IAAIL,iBAAiB,KAAK,CAAC,IAAI,CAACM,cAAc,CAAChB,QAAQ,EAAEa,SAAS,CAAC,EAAE;IACjE,IAAIJ,QAAQ,KAAK,CAAC,EAAE;MAChB;MACA,OAAOD,OAAO,CAACS,MAAM;IACzB;IACA,OAAOT,OAAO,CAACO,MAAM;EACzB;EACA,MAAMX,UAAU,GAAGR,MAAM,CAACC,MAAM,CAACC,qBAAqB,CAACE,QAAQ,CAAC,CAACI,UAAU;EAC3E,MAAMF,aAAa,GAAGN,MAAM,CAACC,MAAM,CAACC,qBAAqB,CAACE,QAAQ,CAAC,CAACE,aAAa,KAAKgB,CAAC,IAAIA,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAC3G,MAAMC,WAAW,GAAGf,UAAU,CAACS,SAAS,CAAC;EACzC,IAAI,OAAOM,WAAW,KAAK,QAAQ,EAAE;IACjC,OAAOA,WAAW;EACtB;EACA,MAAMC,eAAe,GAAGC,MAAM,CAACnB,aAAa,CAACO,QAAQ,CAAC,CAAC;EACvD;EACA,OAAOU,WAAW,CAACC,eAAe,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,MAAM,GAAG;EACrB1B,MAAM,CAACC,MAAM,CAACC,qBAAqB,GAAG,CAAC,CAAC;AAC5C;AACA;AACA,SAASkB,cAAc,CAAChB,QAAQ,EAAEa,SAAS,EAAE;EACzC,OAAQ,CAAC,CAACjB,MAAM,CAACC,MAAM,CAACC,qBAAqB,CAACE,QAAQ,CAAC,IACnD,CAAC,CAACJ,MAAM,CAACC,MAAM,CAACC,qBAAqB,CAACE,QAAQ,CAAC,CAACI,UAAU,CAACS,SAAS,CAAC;AAC7E;AACA,SAASF,oBAAoB,GAAG;EAC5B,OAAON,MAAM,CAACO,IAAI,CAAChB,MAAM,CAACC,MAAM,CAACC,qBAAqB,CAAC,CAACyB,MAAM;AAClE"},"metadata":{},"sourceType":"module"}