{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/tooltipmanager\n */\n\nimport View from './view';\nimport BalloonPanelView, { generatePositions } from './panel/balloon/balloonpanelview';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport { global, isVisible, mix, first } from '@ckeditor/ckeditor5-utils';\nimport { isElement, debounce } from 'lodash-es';\nimport '../theme/components/tooltip/tooltip.css';\nconst BALLOON_CLASS = 'ck-tooltip';\n\n/**\n * A tooltip manager class for the UI of the editor.\n *\n * **Note**: Most likely you do not have to use the `TooltipManager` API listed below in order to display tooltips. Popular\n * {@glink framework/guides/architecture/ui-library UI components} support tooltips out-of-the-box via observable properties\n * (see {@link module:ui/button/buttonview~ButtonView#tooltip} and {@link module:ui/button/buttonview~ButtonView#tooltipPosition}).\n *\n * # Displaying tooltips\n *\n * To display a tooltip, set `data-cke-tooltip-text` attribute on any DOM element:\n *\n *\t\tdomElement.dataset.ckeTooltipText = 'My tooltip';\n *\n * The tooltip will show up whenever the user moves the mouse over the element or the element gets focus in DOM.\n *\n * # Positioning tooltips\n *\n * To change the position of the tooltip, use the `data-cke-tooltip-position` attribute (`s`, `se`, `sw`, `n`, `e`, or `w`):\n *\n *\t\tdomElement.dataset.ckeTooltipText = 'Tooltip to the north';\n *\t\tdomElement.dataset.ckeTooltipPosition = 'n';\n *\n * # Disabling tooltips\n *\n * In order to disable the tooltip  temporarily, use the `data-cke-tooltip-disabled` attribute:\n *\n *\t\tdomElement.dataset.ckeTooltipText = 'Disabled. For now.';\n *\t\tdomElement.dataset.ckeTooltipDisabled = 'true';\n *\n *\n * # Styling tooltips\n *\n * By default, the tooltip has `.ck-tooltip` class and its text inner `.ck-tooltip__text`.\n *\n * If your tooltip requires custom styling, using `data-cke-tooltip-class` attribute will add additional class to the balloon\n * displaying the tooltip:\n *\n *\t\tdomElement.dataset.ckeTooltipText = 'Tooltip with a red text';\n *\t\tdomElement.dataset.ckeTooltipClass = 'my-class';\n *\n *\t\t.ck.ck-tooltip.my-class { color: red }\n *\n * **Note**: This class is a singleton. All editor instances re-use the same instance loaded by\n * {@link module:core/editor/editorui~EditorUI} of the first editor.\n *\n * @mixes module:utils/domemittermixin~DomEmitterMixin\n */\nexport default class TooltipManager {\n  /**\n   * Creates an instance of the tooltip manager.\n   *\n   * @param {module:core/editor/editor~Editor} editor\n   */\n  constructor(editor) {\n    TooltipManager._editors.add(editor);\n\n    // TooltipManager must be a singleton. Multiple instances would mean multiple tooltips attached\n    // to the same DOM element with data-cke-tooltip-* attributes.\n    if (TooltipManager._instance) {\n      return TooltipManager._instance;\n    }\n    TooltipManager._instance = this;\n\n    /**\n     * The view rendering text of the tooltip.\n     *\n     * @readonly\n     * @member {module:ui/view~View} #tooltipTextView\n     */\n    this.tooltipTextView = new View(editor.locale);\n    this.tooltipTextView.set('text', '');\n    this.tooltipTextView.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: ['ck', 'ck-tooltip__text']\n      },\n      children: [{\n        text: this.tooltipTextView.bindTemplate.to('text')\n      }]\n    });\n\n    /**\n     * The instance of the balloon panel that renders and positions the tooltip.\n     *\n     * @readonly\n     * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} #balloonPanelView\n     */\n    this.balloonPanelView = new BalloonPanelView(editor.locale);\n    this.balloonPanelView.class = BALLOON_CLASS;\n    this.balloonPanelView.content.add(this.tooltipTextView);\n\n    /**\n     * Stores the reference to the DOM element the tooltip is attached to. `null` when there's no tooltip\n     * in the UI.\n     *\n     * @private\n     * @readonly\n     * @member {HTMLElement|null} #_currentElementWithTooltip\n     */\n    this._currentElementWithTooltip = null;\n\n    /**\n     * Stores the current tooltip position. `null` when there's no tooltip in the UI.\n     *\n     * @private\n     * @readonly\n     * @member {String|null} #_currentTooltipPosition\n     */\n    this._currentTooltipPosition = null;\n\n    /**\n     * A debounced version of {@link #_pinTooltip}. Tooltips show with a delay to avoid flashing and\n     * to improve the UX.\n     *\n     * @private\n     * @readonly\n     * @member {Function} #_pinTooltipDebounced\n     */\n    this._pinTooltipDebounced = debounce(this._pinTooltip, 600);\n    this.listenTo(global.document, 'mouseenter', this._onEnterOrFocus.bind(this), {\n      useCapture: true\n    });\n    this.listenTo(global.document, 'mouseleave', this._onLeaveOrBlur.bind(this), {\n      useCapture: true\n    });\n    this.listenTo(global.document, 'focus', this._onEnterOrFocus.bind(this), {\n      useCapture: true\n    });\n    this.listenTo(global.document, 'blur', this._onLeaveOrBlur.bind(this), {\n      useCapture: true\n    });\n    this.listenTo(global.document, 'scroll', this._onScroll.bind(this), {\n      useCapture: true\n    });\n\n    // Because this class is a singleton, its only instance is shared across all editors and connects them through the reference.\n    // This causes issues with the ContextWatchdog. When an error is thrown in one editor, the watchdog traverses the references\n    // and (because of shared tooltip manager) figures that the error affects all editors and restarts them all.\n    // This flag, excludes tooltip manager instance from the traversal and brings ContextWatchdog back to normal.\n    // More in https://github.com/ckeditor/ckeditor5/issues/12292.\n    this._watchdogExcluded = true;\n  }\n\n  /**\n   * Destroys the tooltip manager.\n   *\n   * **Note**: The manager singleton cannot be destroyed until all editors that use it are destroyed.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor the manager was created for.\n   */\n  destroy(editor) {\n    TooltipManager._editors.delete(editor);\n    this.stopListening(editor.ui);\n    if (!TooltipManager._editors.size) {\n      this._unpinTooltip();\n      this.balloonPanelView.destroy();\n      this.stopListening();\n      TooltipManager._instance = null;\n    }\n  }\n\n  /**\n   * Handles displaying tooltips on `mouseenter` and `focus` in DOM.\n   *\n   * @private\n   * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n   * @param {Event} domEvent The DOM event.\n   */\n  _onEnterOrFocus(evt, _ref) {\n    let {\n      target\n    } = _ref;\n    const elementWithTooltipAttribute = getDescendantWithTooltip(target);\n\n    // Abort when there's no descendant needing tooltip.\n    if (!elementWithTooltipAttribute) {\n      return;\n    }\n\n    // Abort to avoid flashing when, for instance:\n    // * a tooltip is displayed for a focused element, then the same element gets mouseentered,\n    // * a tooltip is displayed for an element via mouseenter, then the focus moves to the same element.\n    if (elementWithTooltipAttribute === this._currentElementWithTooltip) {\n      return;\n    }\n    this._unpinTooltip();\n    this._pinTooltipDebounced(elementWithTooltipAttribute, getTooltipData(elementWithTooltipAttribute));\n  }\n\n  /**\n   * Handles hiding tooltips on `mouseleave` and `blur` in DOM.\n   *\n   * @private\n   * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n   * @param {Event} domEvent The DOM event.\n   */\n  _onLeaveOrBlur(evt, _ref2) {\n    let {\n      target,\n      relatedTarget\n    } = _ref2;\n    if (evt.name === 'mouseleave') {\n      // Don't act when the event does not concern a DOM element (e.g. a mouseleave out of an entire document),\n      if (!isElement(target)) {\n        return;\n      }\n\n      // If a tooltip is currently visible, don't act for a targets other than the one it is attached to.\n      // For instance, a random mouseleave far away in the page should not unpin the tooltip that was pinned because\n      // of a previous focus. Only leaving the same element should hide the tooltip.\n      if (this._currentElementWithTooltip && target !== this._currentElementWithTooltip) {\n        return;\n      }\n      const descendantWithTooltip = getDescendantWithTooltip(target);\n      const relatedDescendantWithTooltip = getDescendantWithTooltip(relatedTarget);\n\n      // Unpin when the mouse was leaving element with a tooltip to a place which does not have or has a different tooltip.\n      // Note that this should happen whether the tooltip is already visible or not, for instance, it could be invisible but queued\n      // (debounced): it should get canceled.\n      if (descendantWithTooltip && descendantWithTooltip !== relatedDescendantWithTooltip) {\n        this._unpinTooltip();\n      }\n    } else {\n      // If a tooltip is currently visible, don't act for a targets other than the one it is attached to.\n      // For instance, a random blur in the web page should not unpin the tooltip that was pinned because of a previous mouseenter.\n      if (this._currentElementWithTooltip && target !== this._currentElementWithTooltip) {\n        return;\n      }\n\n      // Note that unpinning should happen whether the tooltip is already visible or not, for instance, it could be invisible but\n      // queued (debounced): it should get canceled (e.g. quick focus then quick blur using the keyboard).\n      this._unpinTooltip();\n    }\n  }\n\n  /**\n   * Handles hiding tooltips on `scroll` in DOM.\n   *\n   * @private\n   * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n   * @param {Event} domEvent The DOM event.\n   */\n  _onScroll(evt, _ref3) {\n    let {\n      target\n    } = _ref3;\n    // No tooltip, no reason to react on scroll.\n    if (!this._currentElementWithTooltip) {\n      return;\n    }\n\n    // When scrolling a container that has both the balloon and the current element (common ancestor), the balloon can remain\n    // visible (e.g. scrolling ≤body>). Otherwise, to avoid glitches (clipping, lagging) better just hide the tooltip.\n    // Also, don't do anything when scrolling an unrelated DOM element that has nothing to do with the current element and the balloon.\n    if (target.contains(this.balloonPanelView.element) && target.contains(this._currentElementWithTooltip)) {\n      return;\n    }\n    this._unpinTooltip();\n  }\n\n  /**\n   * Pins the tooltip to a specific DOM element.\n   *\n   * @private\n   * @param {Element} targetDomElement\n   * @param {Object} options\n   * @param {String} options.text Text of the tooltip to display.\n   * @param {String} options.position The position of the tooltip.\n   * @param {String} options.cssClass Additional CSS class of the balloon with the tooltip.\n   */\n  _pinTooltip(targetDomElement, _ref4) {\n    let {\n      text,\n      position,\n      cssClass\n    } = _ref4;\n    // Use the body collection of the first editor.\n    const bodyViewCollection = first(TooltipManager._editors.values()).ui.view.body;\n    if (!bodyViewCollection.has(this.balloonPanelView)) {\n      bodyViewCollection.add(this.balloonPanelView);\n    }\n    this.tooltipTextView.text = text;\n    this.balloonPanelView.pin({\n      target: targetDomElement,\n      positions: TooltipManager.getPositioningFunctions(position)\n    });\n    this.balloonPanelView.class = [BALLOON_CLASS, cssClass].filter(className => className).join(' ');\n\n    // Start responding to changes in editor UI or content layout. For instance, when collaborators change content\n    // and a contextual toolbar attached to a content starts to move (and so should move the tooltip).\n    // Note: Using low priority to let other listeners that position contextual toolbars etc. to react first.\n    for (const editor of TooltipManager._editors) {\n      this.listenTo(editor.ui, 'update', this._updateTooltipPosition.bind(this), {\n        priority: 'low'\n      });\n    }\n    this._currentElementWithTooltip = targetDomElement;\n    this._currentTooltipPosition = position;\n  }\n\n  /**\n   * Unpins the tooltip and cancels all queued pinning.\n   *\n   * @private\n   */\n  _unpinTooltip() {\n    this._pinTooltipDebounced.cancel();\n    this.balloonPanelView.unpin();\n    for (const editor of TooltipManager._editors) {\n      this.stopListening(editor.ui, 'update');\n    }\n    this._currentElementWithTooltip = null;\n    this._currentTooltipPosition = null;\n  }\n\n  /**\n   * Updates the position of the tooltip so it stays in sync with the element it is pinned to.\n   *\n   * Hides the tooltip when the element is no longer visible in DOM.\n   *\n   * @private\n   */\n  _updateTooltipPosition() {\n    // This could happen if the tooltip was attached somewhere in a contextual content toolbar and the toolbar\n    // disappeared (e.g. removed an image).\n    if (!isVisible(this._currentElementWithTooltip)) {\n      this._unpinTooltip();\n      return;\n    }\n    this.balloonPanelView.pin({\n      target: this._currentElementWithTooltip,\n      positions: TooltipManager.getPositioningFunctions(this._currentTooltipPosition)\n    });\n  }\n\n  /**\n   * Returns {@link #balloonPanelView} {@link module:utils/dom/position~PositioningFunction positioning functions} for a given position\n   * name.\n   *\n   * @static\n   * @param {String} position Name of the position (`s`, `se`, `sw`, `n`, `e`, or `w`).\n   * @returns {Array.<module:utils/dom/position~PositioningFunction>} Positioning functions to be used by the {@link #balloonPanelView}.\n   */\n  static getPositioningFunctions(position) {\n    const defaultPositions = TooltipManager.defaultBalloonPositions;\n    return {\n      // South is most popular. We can use positioning heuristics to avoid clipping by the viewport with the sane fallback.\n      s: [defaultPositions.southArrowNorth, defaultPositions.southArrowNorthEast, defaultPositions.southArrowNorthWest],\n      n: [defaultPositions.northArrowSouth],\n      e: [defaultPositions.eastArrowWest],\n      w: [defaultPositions.westArrowEast],\n      sw: [defaultPositions.southArrowNorthEast],\n      se: [defaultPositions.southArrowNorthWest]\n    }[position];\n  }\n}\nmix(TooltipManager, DomEmitterMixin);\n\n/**\n * A set of default {@link module:utils/dom/position~PositioningFunction positioning functions} used by the `TooltipManager`\n * to pin tooltips in different positions.\n *\n * @member {Object.<String,module:utils/dom/position~PositioningFunction>}\n * module:ui/tooltipmanager~TooltipManager.defaultBalloonPositions\n */\nTooltipManager.defaultBalloonPositions = generatePositions({\n  heightOffset: 5,\n  sideOffset: 13\n});\n\n/**\n * A reference to the `TooltipManager` instance. The class is a singleton and as such,\n * successive attempts at creating instances should return this instance.\n *\n * @private\n * @member {module:ui/tooltipmanager~TooltipManager} module:ui/tooltipmanager~TooltipManager._instance\n */\nTooltipManager._instance = null;\n\n/**\n * An array of editors the single tooltip manager instance must listen to.\n * This is mostly to handle `EditorUI#update` listeners from individual editors.\n *\n * @private\n * @member {Set.<module:core/editor/editor~Editor>} module:ui/tooltipmanager~TooltipManager._editors\n */\nTooltipManager._editors = new Set();\nfunction getDescendantWithTooltip(element) {\n  if (!isElement(element)) {\n    return null;\n  }\n  return element.closest('[data-cke-tooltip-text]:not([data-cke-tooltip-disabled])');\n}\nfunction getTooltipData(element) {\n  return {\n    text: element.dataset.ckeTooltipText,\n    position: element.dataset.ckeTooltipPosition || 's',\n    cssClass: element.dataset.ckeTooltipClass || ''\n  };\n}","map":{"version":3,"names":["View","BalloonPanelView","generatePositions","DomEmitterMixin","global","isVisible","mix","first","isElement","debounce","BALLOON_CLASS","TooltipManager","constructor","editor","_editors","add","_instance","tooltipTextView","locale","set","setTemplate","tag","attributes","class","children","text","bindTemplate","to","balloonPanelView","content","_currentElementWithTooltip","_currentTooltipPosition","_pinTooltipDebounced","_pinTooltip","listenTo","document","_onEnterOrFocus","bind","useCapture","_onLeaveOrBlur","_onScroll","_watchdogExcluded","destroy","delete","stopListening","ui","size","_unpinTooltip","evt","target","elementWithTooltipAttribute","getDescendantWithTooltip","getTooltipData","relatedTarget","name","descendantWithTooltip","relatedDescendantWithTooltip","contains","element","targetDomElement","position","cssClass","bodyViewCollection","values","view","body","has","pin","positions","getPositioningFunctions","filter","className","join","_updateTooltipPosition","priority","cancel","unpin","defaultPositions","defaultBalloonPositions","s","southArrowNorth","southArrowNorthEast","southArrowNorthWest","n","northArrowSouth","e","eastArrowWest","w","westArrowEast","sw","se","heightOffset","sideOffset","Set","closest","dataset","ckeTooltipText","ckeTooltipPosition","ckeTooltipClass"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-ui/src/tooltipmanager.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/tooltipmanager\n */\n\nimport View from './view';\nimport BalloonPanelView, { generatePositions } from './panel/balloon/balloonpanelview';\n\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport { global, isVisible, mix, first } from '@ckeditor/ckeditor5-utils';\nimport { isElement, debounce } from 'lodash-es';\n\nimport '../theme/components/tooltip/tooltip.css';\n\nconst BALLOON_CLASS = 'ck-tooltip';\n\n/**\n * A tooltip manager class for the UI of the editor.\n *\n * **Note**: Most likely you do not have to use the `TooltipManager` API listed below in order to display tooltips. Popular\n * {@glink framework/guides/architecture/ui-library UI components} support tooltips out-of-the-box via observable properties\n * (see {@link module:ui/button/buttonview~ButtonView#tooltip} and {@link module:ui/button/buttonview~ButtonView#tooltipPosition}).\n *\n * # Displaying tooltips\n *\n * To display a tooltip, set `data-cke-tooltip-text` attribute on any DOM element:\n *\n *\t\tdomElement.dataset.ckeTooltipText = 'My tooltip';\n *\n * The tooltip will show up whenever the user moves the mouse over the element or the element gets focus in DOM.\n *\n * # Positioning tooltips\n *\n * To change the position of the tooltip, use the `data-cke-tooltip-position` attribute (`s`, `se`, `sw`, `n`, `e`, or `w`):\n *\n *\t\tdomElement.dataset.ckeTooltipText = 'Tooltip to the north';\n *\t\tdomElement.dataset.ckeTooltipPosition = 'n';\n *\n * # Disabling tooltips\n *\n * In order to disable the tooltip  temporarily, use the `data-cke-tooltip-disabled` attribute:\n *\n *\t\tdomElement.dataset.ckeTooltipText = 'Disabled. For now.';\n *\t\tdomElement.dataset.ckeTooltipDisabled = 'true';\n *\n *\n * # Styling tooltips\n *\n * By default, the tooltip has `.ck-tooltip` class and its text inner `.ck-tooltip__text`.\n *\n * If your tooltip requires custom styling, using `data-cke-tooltip-class` attribute will add additional class to the balloon\n * displaying the tooltip:\n *\n *\t\tdomElement.dataset.ckeTooltipText = 'Tooltip with a red text';\n *\t\tdomElement.dataset.ckeTooltipClass = 'my-class';\n *\n *\t\t.ck.ck-tooltip.my-class { color: red }\n *\n * **Note**: This class is a singleton. All editor instances re-use the same instance loaded by\n * {@link module:core/editor/editorui~EditorUI} of the first editor.\n *\n * @mixes module:utils/domemittermixin~DomEmitterMixin\n */\nexport default class TooltipManager {\n\t/**\n\t * Creates an instance of the tooltip manager.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\tTooltipManager._editors.add( editor );\n\n\t\t// TooltipManager must be a singleton. Multiple instances would mean multiple tooltips attached\n\t\t// to the same DOM element with data-cke-tooltip-* attributes.\n\t\tif ( TooltipManager._instance ) {\n\t\t\treturn TooltipManager._instance;\n\t\t}\n\n\t\tTooltipManager._instance = this;\n\n\t\t/**\n\t\t * The view rendering text of the tooltip.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #tooltipTextView\n\t\t */\n\t\tthis.tooltipTextView = new View( editor.locale );\n\t\tthis.tooltipTextView.set( 'text', '' );\n\t\tthis.tooltipTextView.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-tooltip__text'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: this.tooltipTextView.bindTemplate.to( 'text' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\t/**\n\t\t * The instance of the balloon panel that renders and positions the tooltip.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} #balloonPanelView\n\t\t */\n\t\tthis.balloonPanelView = new BalloonPanelView( editor.locale );\n\t\tthis.balloonPanelView.class = BALLOON_CLASS;\n\t\tthis.balloonPanelView.content.add( this.tooltipTextView );\n\n\t\t/**\n\t\t * Stores the reference to the DOM element the tooltip is attached to. `null` when there's no tooltip\n\t\t * in the UI.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @member {HTMLElement|null} #_currentElementWithTooltip\n\t\t */\n\t\tthis._currentElementWithTooltip = null;\n\n\t\t/**\n\t\t * Stores the current tooltip position. `null` when there's no tooltip in the UI.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @member {String|null} #_currentTooltipPosition\n\t\t */\n\t\tthis._currentTooltipPosition = null;\n\n\t\t/**\n\t\t * A debounced version of {@link #_pinTooltip}. Tooltips show with a delay to avoid flashing and\n\t\t * to improve the UX.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @member {Function} #_pinTooltipDebounced\n\t\t */\n\t\tthis._pinTooltipDebounced = debounce( this._pinTooltip, 600 );\n\n\t\tthis.listenTo( global.document, 'mouseenter', this._onEnterOrFocus.bind( this ), { useCapture: true } );\n\t\tthis.listenTo( global.document, 'mouseleave', this._onLeaveOrBlur.bind( this ), { useCapture: true } );\n\n\t\tthis.listenTo( global.document, 'focus', this._onEnterOrFocus.bind( this ), { useCapture: true } );\n\t\tthis.listenTo( global.document, 'blur', this._onLeaveOrBlur.bind( this ), { useCapture: true } );\n\n\t\tthis.listenTo( global.document, 'scroll', this._onScroll.bind( this ), { useCapture: true } );\n\n\t\t// Because this class is a singleton, its only instance is shared across all editors and connects them through the reference.\n\t\t// This causes issues with the ContextWatchdog. When an error is thrown in one editor, the watchdog traverses the references\n\t\t// and (because of shared tooltip manager) figures that the error affects all editors and restarts them all.\n\t\t// This flag, excludes tooltip manager instance from the traversal and brings ContextWatchdog back to normal.\n\t\t// More in https://github.com/ckeditor/ckeditor5/issues/12292.\n\t\tthis._watchdogExcluded = true;\n\t}\n\n\t/**\n\t * Destroys the tooltip manager.\n\t *\n\t * **Note**: The manager singleton cannot be destroyed until all editors that use it are destroyed.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor the manager was created for.\n\t */\n\tdestroy( editor ) {\n\t\tTooltipManager._editors.delete( editor );\n\t\tthis.stopListening( editor.ui );\n\n\t\tif ( !TooltipManager._editors.size ) {\n\t\t\tthis._unpinTooltip();\n\t\t\tthis.balloonPanelView.destroy();\n\t\t\tthis.stopListening();\n\n\t\t\tTooltipManager._instance = null;\n\t\t}\n\t}\n\n\t/**\n\t * Handles displaying tooltips on `mouseenter` and `focus` in DOM.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n\t * @param {Event} domEvent The DOM event.\n\t */\n\t_onEnterOrFocus( evt, { target } ) {\n\t\tconst elementWithTooltipAttribute = getDescendantWithTooltip( target );\n\n\t\t// Abort when there's no descendant needing tooltip.\n\t\tif ( !elementWithTooltipAttribute ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Abort to avoid flashing when, for instance:\n\t\t// * a tooltip is displayed for a focused element, then the same element gets mouseentered,\n\t\t// * a tooltip is displayed for an element via mouseenter, then the focus moves to the same element.\n\t\tif ( elementWithTooltipAttribute === this._currentElementWithTooltip ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._unpinTooltip();\n\n\t\tthis._pinTooltipDebounced( elementWithTooltipAttribute, getTooltipData( elementWithTooltipAttribute ) );\n\t}\n\n\t/**\n\t * Handles hiding tooltips on `mouseleave` and `blur` in DOM.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n\t * @param {Event} domEvent The DOM event.\n\t */\n\t_onLeaveOrBlur( evt, { target, relatedTarget } ) {\n\t\tif ( evt.name === 'mouseleave' ) {\n\t\t\t// Don't act when the event does not concern a DOM element (e.g. a mouseleave out of an entire document),\n\t\t\tif ( !isElement( target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a tooltip is currently visible, don't act for a targets other than the one it is attached to.\n\t\t\t// For instance, a random mouseleave far away in the page should not unpin the tooltip that was pinned because\n\t\t\t// of a previous focus. Only leaving the same element should hide the tooltip.\n\t\t\tif ( this._currentElementWithTooltip && target !== this._currentElementWithTooltip ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst descendantWithTooltip = getDescendantWithTooltip( target );\n\t\t\tconst relatedDescendantWithTooltip = getDescendantWithTooltip( relatedTarget );\n\n\t\t\t// Unpin when the mouse was leaving element with a tooltip to a place which does not have or has a different tooltip.\n\t\t\t// Note that this should happen whether the tooltip is already visible or not, for instance, it could be invisible but queued\n\t\t\t// (debounced): it should get canceled.\n\t\t\tif ( descendantWithTooltip && descendantWithTooltip !== relatedDescendantWithTooltip ) {\n\t\t\t\tthis._unpinTooltip();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// If a tooltip is currently visible, don't act for a targets other than the one it is attached to.\n\t\t\t// For instance, a random blur in the web page should not unpin the tooltip that was pinned because of a previous mouseenter.\n\t\t\tif ( this._currentElementWithTooltip && target !== this._currentElementWithTooltip ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Note that unpinning should happen whether the tooltip is already visible or not, for instance, it could be invisible but\n\t\t\t// queued (debounced): it should get canceled (e.g. quick focus then quick blur using the keyboard).\n\t\t\tthis._unpinTooltip();\n\t\t}\n\t}\n\n\t/**\n\t * Handles hiding tooltips on `scroll` in DOM.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n\t * @param {Event} domEvent The DOM event.\n\t */\n\t_onScroll( evt, { target } ) {\n\t\t// No tooltip, no reason to react on scroll.\n\t\tif ( !this._currentElementWithTooltip ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When scrolling a container that has both the balloon and the current element (common ancestor), the balloon can remain\n\t\t// visible (e.g. scrolling ≤body>). Otherwise, to avoid glitches (clipping, lagging) better just hide the tooltip.\n\t\t// Also, don't do anything when scrolling an unrelated DOM element that has nothing to do with the current element and the balloon.\n\t\tif ( target.contains( this.balloonPanelView.element ) && target.contains( this._currentElementWithTooltip ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._unpinTooltip();\n\t}\n\n\t/**\n\t * Pins the tooltip to a specific DOM element.\n\t *\n\t * @private\n\t * @param {Element} targetDomElement\n\t * @param {Object} options\n\t * @param {String} options.text Text of the tooltip to display.\n\t * @param {String} options.position The position of the tooltip.\n\t * @param {String} options.cssClass Additional CSS class of the balloon with the tooltip.\n\t */\n\t_pinTooltip( targetDomElement, { text, position, cssClass } ) {\n\t\t// Use the body collection of the first editor.\n\t\tconst bodyViewCollection = first( TooltipManager._editors.values() ).ui.view.body;\n\n\t\tif ( !bodyViewCollection.has( this.balloonPanelView ) ) {\n\t\t\tbodyViewCollection.add( this.balloonPanelView );\n\t\t}\n\n\t\tthis.tooltipTextView.text = text;\n\n\t\tthis.balloonPanelView.pin( {\n\t\t\ttarget: targetDomElement,\n\t\t\tpositions: TooltipManager.getPositioningFunctions( position )\n\t\t} );\n\n\t\tthis.balloonPanelView.class = [ BALLOON_CLASS, cssClass ]\n\t\t\t.filter( className => className )\n\t\t\t.join( ' ' );\n\n\t\t// Start responding to changes in editor UI or content layout. For instance, when collaborators change content\n\t\t// and a contextual toolbar attached to a content starts to move (and so should move the tooltip).\n\t\t// Note: Using low priority to let other listeners that position contextual toolbars etc. to react first.\n\t\tfor ( const editor of TooltipManager._editors ) {\n\t\t\tthis.listenTo( editor.ui, 'update', this._updateTooltipPosition.bind( this ), { priority: 'low' } );\n\t\t}\n\n\t\tthis._currentElementWithTooltip = targetDomElement;\n\t\tthis._currentTooltipPosition = position;\n\t}\n\n\t/**\n\t * Unpins the tooltip and cancels all queued pinning.\n\t *\n\t * @private\n\t */\n\t_unpinTooltip() {\n\t\tthis._pinTooltipDebounced.cancel();\n\n\t\tthis.balloonPanelView.unpin();\n\n\t\tfor ( const editor of TooltipManager._editors ) {\n\t\t\tthis.stopListening( editor.ui, 'update' );\n\t\t}\n\n\t\tthis._currentElementWithTooltip = null;\n\t\tthis._currentTooltipPosition = null;\n\t}\n\n\t/**\n\t * Updates the position of the tooltip so it stays in sync with the element it is pinned to.\n\t *\n\t * Hides the tooltip when the element is no longer visible in DOM.\n\t *\n\t * @private\n\t */\n\t_updateTooltipPosition() {\n\t\t// This could happen if the tooltip was attached somewhere in a contextual content toolbar and the toolbar\n\t\t// disappeared (e.g. removed an image).\n\t\tif ( !isVisible( this._currentElementWithTooltip ) ) {\n\t\t\tthis._unpinTooltip();\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.balloonPanelView.pin( {\n\t\t\ttarget: this._currentElementWithTooltip,\n\t\t\tpositions: TooltipManager.getPositioningFunctions( this._currentTooltipPosition )\n\t\t} );\n\t}\n\n\t/**\n\t * Returns {@link #balloonPanelView} {@link module:utils/dom/position~PositioningFunction positioning functions} for a given position\n\t * name.\n\t *\n\t * @static\n\t * @param {String} position Name of the position (`s`, `se`, `sw`, `n`, `e`, or `w`).\n\t * @returns {Array.<module:utils/dom/position~PositioningFunction>} Positioning functions to be used by the {@link #balloonPanelView}.\n\t */\n\tstatic getPositioningFunctions( position ) {\n\t\tconst defaultPositions = TooltipManager.defaultBalloonPositions;\n\n\t\treturn {\n\t\t\t// South is most popular. We can use positioning heuristics to avoid clipping by the viewport with the sane fallback.\n\t\t\ts: [\n\t\t\t\tdefaultPositions.southArrowNorth,\n\t\t\t\tdefaultPositions.southArrowNorthEast,\n\t\t\t\tdefaultPositions.southArrowNorthWest\n\t\t\t],\n\t\t\tn: [ defaultPositions.northArrowSouth ],\n\t\t\te: [ defaultPositions.eastArrowWest ],\n\t\t\tw: [ defaultPositions.westArrowEast ],\n\t\t\tsw: [ defaultPositions.southArrowNorthEast ],\n\t\t\tse: [ defaultPositions.southArrowNorthWest ]\n\t\t}[ position ];\n\t}\n}\n\nmix( TooltipManager, DomEmitterMixin );\n\n/**\n * A set of default {@link module:utils/dom/position~PositioningFunction positioning functions} used by the `TooltipManager`\n * to pin tooltips in different positions.\n *\n * @member {Object.<String,module:utils/dom/position~PositioningFunction>}\n * module:ui/tooltipmanager~TooltipManager.defaultBalloonPositions\n */\nTooltipManager.defaultBalloonPositions = generatePositions( {\n\theightOffset: 5,\n\tsideOffset: 13\n} );\n\n/**\n * A reference to the `TooltipManager` instance. The class is a singleton and as such,\n * successive attempts at creating instances should return this instance.\n *\n * @private\n * @member {module:ui/tooltipmanager~TooltipManager} module:ui/tooltipmanager~TooltipManager._instance\n */\nTooltipManager._instance = null;\n\n/**\n * An array of editors the single tooltip manager instance must listen to.\n * This is mostly to handle `EditorUI#update` listeners from individual editors.\n *\n * @private\n * @member {Set.<module:core/editor/editor~Editor>} module:ui/tooltipmanager~TooltipManager._editors\n */\nTooltipManager._editors = new Set();\n\nfunction getDescendantWithTooltip( element ) {\n\tif ( !isElement( element ) ) {\n\t\treturn null;\n\t}\n\n\treturn element.closest( '[data-cke-tooltip-text]:not([data-cke-tooltip-disabled])' );\n}\n\nfunction getTooltipData( element ) {\n\treturn {\n\t\ttext: element.dataset.ckeTooltipText,\n\t\tposition: element.dataset.ckeTooltipPosition || 's',\n\t\tcssClass: element.dataset.ckeTooltipClass || ''\n\t};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}