{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/panel/balloon/contextualballoon\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BalloonPanelView from './balloonpanelview';\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport prevIcon from '../../../theme/icons/previous-arrow.svg';\nimport nextIcon from '../../../theme/icons/next-arrow.svg';\nimport '../../../theme/components/panel/balloonrotator.css';\nimport '../../../theme/components/panel/fakepanel.css';\nconst toPx = toUnit('px');\n\n/**\n * Provides the common contextual balloon for the editor.\n *\n * The role of this plugin is to unify the contextual balloons logic, simplify views management and help\n * avoid the unnecessary complexity of handling multiple {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * instances in the editor.\n *\n * This plugin allows for creating single or multiple panel stacks.\n *\n * Each stack may have multiple views, with the one on the top being visible. When the visible view is removed from the stack,\n * the previous view becomes visible.\n *\n * It might be useful to implement nested navigation in a balloon. For instance, a toolbar view may contain a link button.\n * When you click it, a link view (which lets you set the URL) is created and put on top of the toolbar view, so the link panel\n * is displayed. When you finish editing the link and close (remove) the link view, the toolbar view is visible again.\n *\n * However, there are cases when there are multiple independent balloons to be displayed, for instance, if the selection\n * is inside two inline comments at the same time. For such cases, you can create two independent panel stacks.\n * The contextual balloon plugin will create a navigation bar to let the users switch between these panel stacks using the \"Next\"\n * and \"Previous\" buttons.\n *\n * If there are no views in the current stack, the balloon panel will try to switch to the next stack. If there are no\n * panels in any stack, the balloon panel will be hidden.\n *\n * **Note**: To force the balloon panel to show only one view, even if there are other stacks, use the `singleViewMode=true` option\n * when {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#add adding} a view to a panel.\n *\n * From the implementation point of view, the contextual ballon plugin is reusing a single\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance to display multiple contextual balloon\n * panels in the editor. It also creates a special {@link module:ui/panel/balloon/contextualballoon~RotatorView rotator view},\n * used to manage multiple panel stacks. Rotator view is a child of the balloon panel view and the parent of the specific\n * view you want to display. If there is more than one panel stack to be displayed, the rotator view will add a\n * navigation bar. If there is only one stack, the rotator view is transparent (it does not add any UI elements).\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ContextualBalloon extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ContextualBalloon';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n\n    /**\n     * The {@link module:utils/dom/position~Options#limiter position limiter}\n     * for the {@link #view balloon}, used when no `limiter` has been passed into {@link #add}\n     * or {@link #updatePosition}.\n     *\n     * By default, a function that obtains the farthest DOM\n     * {@link module:engine/view/rooteditableelement~RootEditableElement}\n     * of the {@link module:engine/view/document~Document#selection}.\n     *\n     * @member {module:utils/dom/position~Options#limiter} #positionLimiter\n     */\n    this.positionLimiter = () => {\n      const view = this.editor.editing.view;\n      const viewDocument = view.document;\n      const editableElement = viewDocument.selection.editableElement;\n      if (editableElement) {\n        return view.domConverter.mapViewToDom(editableElement.root);\n      }\n      return null;\n    };\n\n    /**\n     * The currently visible view or `null` when there are no views in any stack.\n     *\n     * @readonly\n     * @observable\n     * @member {module:ui/view~View|null} #visibleView\n     */\n    this.set('visibleView', null);\n\n    /**\n     * The common balloon panel view.\n     *\n     * @readonly\n     * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} #view\n     */\n    this.view = new BalloonPanelView(editor.locale);\n    editor.ui.view.body.add(this.view);\n    editor.ui.focusTracker.add(this.view.element);\n\n    /**\n     * The map of views and their stacks.\n     *\n     * @private\n     * @type {Map.<module:ui/view~View,Set>}\n     */\n    this._viewToStack = new Map();\n\n    /**\n     * The map of IDs and stacks.\n     *\n     * @private\n     * @type {Map.<String,Set>}\n     */\n    this._idToStack = new Map();\n\n    /**\n     * A total number of all stacks in the balloon.\n     *\n     * @private\n     * @readonly\n     * @observable\n     * @member {Number} #_numberOfStacks\n     */\n    this.set('_numberOfStacks', 0);\n\n    /**\n     * A flag that controls the single view mode.\n     *\n     * @private\n     * @readonly\n     * @observable\n     * @member {Boolean} #_singleViewMode\n     */\n    this.set('_singleViewMode', false);\n\n    /**\n     * Rotator view embedded in the contextual balloon.\n     * Displays the currently visible view in the balloon and provides navigation for switching stacks.\n     *\n     * @private\n     * @type {module:ui/panel/balloon/contextualballoon~RotatorView}\n     */\n    this._rotatorView = this._createRotatorView();\n\n    /**\n     * Displays fake panels under the balloon panel view when multiple stacks are added to the balloon.\n     *\n     * @private\n     * @type {module:ui/view~View}\n     */\n    this._fakePanelsView = this._createFakePanelsView();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  destroy() {\n    super.destroy();\n    this.view.destroy();\n    this._rotatorView.destroy();\n    this._fakePanelsView.destroy();\n  }\n\n  /**\n   * Returns `true` when the given view is in one of the stacks. Otherwise returns `false`.\n   *\n   * @param {module:ui/view~View} view\n   * @returns {Boolean}\n   */\n  hasView(view) {\n    return Array.from(this._viewToStack.keys()).includes(view);\n  }\n\n  /**\n   * Adds a new view to the stack and makes it visible if the current stack is visible\n   * or it is the first view in the balloon.\n   *\n   * @param {Object} data The configuration of the view.\n   * @param {String} [data.stackId='main'] The ID of the stack that the view is added to.\n   * @param {module:ui/view~View} [data.view] The content of the balloon.\n   * @param {module:utils/dom/position~Options} [data.position] Positioning options.\n   * @param {String} [data.balloonClassName] An additional CSS class added to the {@link #view balloon} when visible.\n   * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n   * @param {Boolean} [data.singleViewMode=false] Whether the view should be the only visible view even if other stacks were added.\n   */\n  add(data) {\n    if (this.hasView(data.view)) {\n      /**\n       * Trying to add configuration of the same view more than once.\n       *\n       * @error contextualballoon-add-view-exist\n       */\n      throw new CKEditorError('contextualballoon-add-view-exist', [this, data]);\n    }\n    const stackId = data.stackId || 'main';\n\n    // If new stack is added, creates it and show view from this stack.\n    if (!this._idToStack.has(stackId)) {\n      this._idToStack.set(stackId, new Map([[data.view, data]]));\n      this._viewToStack.set(data.view, this._idToStack.get(stackId));\n      this._numberOfStacks = this._idToStack.size;\n      if (!this._visibleStack || data.singleViewMode) {\n        this.showStack(stackId);\n      }\n      return;\n    }\n    const stack = this._idToStack.get(stackId);\n    if (data.singleViewMode) {\n      this.showStack(stackId);\n    }\n\n    // Add new view to the stack.\n    stack.set(data.view, data);\n    this._viewToStack.set(data.view, stack);\n\n    // And display it if is added to the currently visible stack.\n    if (stack === this._visibleStack) {\n      this._showView(data);\n    }\n  }\n\n  /**\n   * Removes the given view from the stack. If the removed view was visible,\n   * the view preceding it in the stack will become visible instead.\n   * When there is no view in the stack, the next stack will be displayed.\n   * When there are no more stacks, the balloon will hide.\n   *\n   * @param {module:ui/view~View} view A view to be removed from the balloon.\n   */\n  remove(view) {\n    if (!this.hasView(view)) {\n      /**\n       * Trying to remove the configuration of the view not defined in the stack.\n       *\n       * @error contextualballoon-remove-view-not-exist\n       */\n      throw new CKEditorError('contextualballoon-remove-view-not-exist', [this, view]);\n    }\n    const stack = this._viewToStack.get(view);\n    if (this._singleViewMode && this.visibleView === view) {\n      this._singleViewMode = false;\n    }\n\n    // When visible view will be removed we need to show a preceding view or next stack\n    // if a view is the only view in the stack.\n    if (this.visibleView === view) {\n      if (stack.size === 1) {\n        if (this._idToStack.size > 1) {\n          this._showNextStack();\n        } else {\n          this.view.hide();\n          this.visibleView = null;\n          this._rotatorView.hideView();\n        }\n      } else {\n        this._showView(Array.from(stack.values())[stack.size - 2]);\n      }\n    }\n    if (stack.size === 1) {\n      this._idToStack.delete(this._getStackId(stack));\n      this._numberOfStacks = this._idToStack.size;\n    } else {\n      stack.delete(view);\n    }\n    this._viewToStack.delete(view);\n  }\n\n  /**\n   * Updates the position of the balloon using the position data of the first visible view in the stack.\n   * When new position data is given, the position data of the currently visible view will be updated.\n   *\n   * @param {module:utils/dom/position~Options} [position] position options.\n   */\n  updatePosition(position) {\n    if (position) {\n      this._visibleStack.get(this.visibleView).position = position;\n    }\n    this.view.pin(this._getBalloonPosition());\n    this._fakePanelsView.updatePosition();\n  }\n\n  /**\n   * Shows the last view from the stack of a given ID.\n   *\n   * @param {String} id\n   */\n  showStack(id) {\n    this.visibleStack = id;\n    const stack = this._idToStack.get(id);\n    if (!stack) {\n      /**\n       * Trying to show a stack that does not exist.\n       *\n       * @error contextualballoon-showstack-stack-not-exist\n       */\n      throw new CKEditorError('contextualballoon-showstack-stack-not-exist', this);\n    }\n    if (this._visibleStack === stack) {\n      return;\n    }\n    this._showView(Array.from(stack.values()).pop());\n  }\n\n  /**\n   * Returns the stack of the currently visible view.\n   *\n   * @private\n   * @type {Set}\n   */\n  get _visibleStack() {\n    return this._viewToStack.get(this.visibleView);\n  }\n\n  /**\n   * Returns the ID of the given stack.\n   *\n   * @private\n   * @param {Set} stack\n   * @returns {String}\n   */\n  _getStackId(stack) {\n    const entry = Array.from(this._idToStack.entries()).find(entry => entry[1] === stack);\n    return entry[0];\n  }\n\n  /**\n   * Shows the last view from the next stack.\n   *\n   * @private\n   */\n  _showNextStack() {\n    const stacks = Array.from(this._idToStack.values());\n    let nextIndex = stacks.indexOf(this._visibleStack) + 1;\n    if (!stacks[nextIndex]) {\n      nextIndex = 0;\n    }\n    this.showStack(this._getStackId(stacks[nextIndex]));\n  }\n\n  /**\n   * Shows the last view from the previous stack.\n   *\n   * @private\n   */\n  _showPrevStack() {\n    const stacks = Array.from(this._idToStack.values());\n    let nextIndex = stacks.indexOf(this._visibleStack) - 1;\n    if (!stacks[nextIndex]) {\n      nextIndex = stacks.length - 1;\n    }\n    this.showStack(this._getStackId(stacks[nextIndex]));\n  }\n\n  /**\n   * Creates a rotator view.\n   *\n   * @private\n   * @returns {module:ui/panel/balloon/contextualballoon~RotatorView}\n   */\n  _createRotatorView() {\n    const view = new RotatorView(this.editor.locale);\n    const t = this.editor.locale.t;\n    this.view.content.add(view);\n\n    // Hide navigation when there is only a one stack & not in single view mode.\n    view.bind('isNavigationVisible').to(this, '_numberOfStacks', this, '_singleViewMode', (value, isSingleViewMode) => {\n      return !isSingleViewMode && value > 1;\n    });\n\n    // Update balloon position after toggling navigation.\n    view.on('change:isNavigationVisible', () => this.updatePosition(), {\n      priority: 'low'\n    });\n\n    // Update stacks counter value.\n    view.bind('counter').to(this, 'visibleView', this, '_numberOfStacks', (visibleView, numberOfStacks) => {\n      if (numberOfStacks < 2) {\n        return '';\n      }\n      const current = Array.from(this._idToStack.values()).indexOf(this._visibleStack) + 1;\n      return t('%0 of %1', [current, numberOfStacks]);\n    });\n    view.buttonNextView.on('execute', () => {\n      // When current view has a focus then move focus to the editable before removing it,\n      // otherwise editor will lost focus.\n      if (view.focusTracker.isFocused) {\n        this.editor.editing.view.focus();\n      }\n      this._showNextStack();\n    });\n    view.buttonPrevView.on('execute', () => {\n      // When current view has a focus then move focus to the editable before removing it,\n      // otherwise editor will lost focus.\n      if (view.focusTracker.isFocused) {\n        this.editor.editing.view.focus();\n      }\n      this._showPrevStack();\n    });\n    return view;\n  }\n\n  /**\n   * @private\n   * @returns {module:ui/view~View}\n   */\n  _createFakePanelsView() {\n    const view = new FakePanelsView(this.editor.locale, this.view);\n    view.bind('numberOfPanels').to(this, '_numberOfStacks', this, '_singleViewMode', (number, isSingleViewMode) => {\n      const showPanels = !isSingleViewMode && number >= 2;\n      return showPanels ? Math.min(number - 1, 2) : 0;\n    });\n    view.listenTo(this.view, 'change:top', () => view.updatePosition());\n    view.listenTo(this.view, 'change:left', () => view.updatePosition());\n    this.editor.ui.view.body.add(view);\n    return view;\n  }\n\n  /**\n   * Sets the view as the content of the balloon and attaches the balloon using position\n   * options of the first view.\n   *\n   * @private\n   * @param {Object} data Configuration.\n   * @param {module:ui/view~View} [data.view] The view to show in the balloon.\n   * @param {String} [data.balloonClassName=''] Additional class name which will be added to the {@link #view balloon}.\n   * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n   */\n  _showView(_ref) {\n    let {\n      view,\n      balloonClassName = '',\n      withArrow = true,\n      singleViewMode = false\n    } = _ref;\n    this.view.class = balloonClassName;\n    this.view.withArrow = withArrow;\n    this._rotatorView.showView(view);\n    this.visibleView = view;\n    this.view.pin(this._getBalloonPosition());\n    this._fakePanelsView.updatePosition();\n    if (singleViewMode) {\n      this._singleViewMode = true;\n    }\n  }\n\n  /**\n   * Returns position options of the last view in the stack.\n   * This keeps the balloon in the same position when the view is changed.\n   *\n   * @private\n   * @returns {module:utils/dom/position~Options}\n   */\n  _getBalloonPosition() {\n    let position = Array.from(this._visibleStack.values()).pop().position;\n    if (position) {\n      // Use the default limiter if none has been specified.\n      if (!position.limiter) {\n        // Don't modify the original options object.\n        position = Object.assign({}, position, {\n          limiter: this.positionLimiter\n        });\n      }\n\n      // Don't modify the original options object.\n      position = Object.assign({}, position, {\n        viewportOffsetConfig: this.editor.ui.viewportOffset\n      });\n    }\n    return position;\n  }\n}\n\n/**\n * Rotator view is a helper class for the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon}.\n * It is used for displaying the last view from the current stack and providing navigation buttons for switching stacks.\n * See the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon} documentation to learn more.\n *\n * @extends module:ui/view~View\n */\nclass RotatorView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const t = locale.t;\n    const bind = this.bindTemplate;\n\n    /**\n     * Defines whether navigation is visible or not.\n     *\n     * @member {Boolean} #isNavigationVisible\n     */\n    this.set('isNavigationVisible', true);\n\n    /**\n     * Used for checking if a view is focused or not.\n     *\n     * @type {module:utils/focustracker~FocusTracker}\n     */\n    this.focusTracker = new FocusTracker();\n\n    /**\n     * Navigation button for switching the stack to the previous one.\n     *\n     * @type {module:ui/button/buttonview~ButtonView}\n     */\n    this.buttonPrevView = this._createButtonView(t('Previous'), prevIcon);\n\n    /**\n     * Navigation button for switching the stack to the next one.\n     *\n     * @type {module:ui/button/buttonview~ButtonView}\n     */\n    this.buttonNextView = this._createButtonView(t('Next'), nextIcon);\n\n    /**\n     * A collection of the child views that creates the rotator content.\n     *\n     * @readonly\n     * @type {module:ui/viewcollection~ViewCollection}\n     */\n    this.content = this.createCollection();\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-balloon-rotator'],\n        'z-index': '-1'\n      },\n      children: [{\n        tag: 'div',\n        attributes: {\n          class: ['ck-balloon-rotator__navigation', bind.to('isNavigationVisible', value => value ? '' : 'ck-hidden')]\n        },\n        children: [this.buttonPrevView, {\n          tag: 'span',\n          attributes: {\n            class: ['ck-balloon-rotator__counter']\n          },\n          children: [{\n            text: bind.to('counter')\n          }]\n        }, this.buttonNextView]\n      }, {\n        tag: 'div',\n        attributes: {\n          class: 'ck-balloon-rotator__content'\n        },\n        children: this.content\n      }]\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  render() {\n    super.render();\n    this.focusTracker.add(this.element);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  destroy() {\n    super.destroy();\n    this.focusTracker.destroy();\n  }\n\n  /**\n   * Shows a given view.\n   *\n   * @param {module:ui/view~View} view The view to show.\n   */\n  showView(view) {\n    this.hideView();\n    this.content.add(view);\n  }\n\n  /**\n   * Hides the currently displayed view.\n   */\n  hideView() {\n    this.content.clear();\n  }\n\n  /**\n   * Creates a navigation button view.\n   *\n   * @private\n   * @param {String} label The button label.\n   * @param {String} icon The button icon.\n   * @returns {module:ui/button/buttonview~ButtonView}\n   */\n  _createButtonView(label, icon) {\n    const view = new ButtonView(this.locale);\n    view.set({\n      label,\n      icon,\n      tooltip: true\n    });\n    return view;\n  }\n}\n\n// Displays additional layers under the balloon when multiple stacks are added to the balloon.\n//\n// @private\n// @extends module:ui/view~View\nclass FakePanelsView extends View {\n  // @inheritDoc\n  constructor(locale, balloonPanelView) {\n    super(locale);\n    const bind = this.bindTemplate;\n\n    // Fake panels top offset.\n    //\n    // @observable\n    // @member {Number} #top\n    this.set('top', 0);\n\n    // Fake panels left offset.\n    //\n    // @observable\n    // @member {Number} #left\n    this.set('left', 0);\n\n    // Fake panels height.\n    //\n    // @observable\n    // @member {Number} #height\n    this.set('height', 0);\n\n    // Fake panels width.\n    //\n    // @observable\n    // @member {Number} #width\n    this.set('width', 0);\n\n    // Number of rendered fake panels.\n    //\n    // @observable\n    // @member {Number} #numberOfPanels\n    this.set('numberOfPanels', 0);\n\n    // Collection of the child views which creates fake panel content.\n    //\n    // @readonly\n    // @type {module:ui/viewcollection~ViewCollection}\n    this.content = this.createCollection();\n\n    // Context.\n    //\n    // @private\n    // @type {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n    this._balloonPanelView = balloonPanelView;\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck-fake-panel', bind.to('numberOfPanels', number => number ? '' : 'ck-hidden')],\n        style: {\n          top: bind.to('top', toPx),\n          left: bind.to('left', toPx),\n          width: bind.to('width', toPx),\n          height: bind.to('height', toPx)\n        }\n      },\n      children: this.content\n    });\n    this.on('change:numberOfPanels', (evt, name, next, prev) => {\n      if (next > prev) {\n        this._addPanels(next - prev);\n      } else {\n        this._removePanels(prev - next);\n      }\n      this.updatePosition();\n    });\n  }\n\n  // @private\n  // @param {Number} number\n  _addPanels(number) {\n    while (number--) {\n      const view = new View();\n      view.setTemplate({\n        tag: 'div'\n      });\n      this.content.add(view);\n      this.registerChild(view);\n    }\n  }\n\n  // @private\n  // @param {Number} number\n  _removePanels(number) {\n    while (number--) {\n      const view = this.content.last;\n      this.content.remove(view);\n      this.deregisterChild(view);\n      view.destroy();\n    }\n  }\n\n  // Updates coordinates of fake panels.\n  updatePosition() {\n    if (this.numberOfPanels) {\n      const {\n        top,\n        left\n      } = this._balloonPanelView;\n      const {\n        width,\n        height\n      } = new Rect(this._balloonPanelView.element);\n      Object.assign(this, {\n        top,\n        left,\n        width,\n        height\n      });\n    }\n  }\n}","map":{"version":3,"names":["Plugin","BalloonPanelView","View","ButtonView","CKEditorError","FocusTracker","toUnit","Rect","prevIcon","nextIcon","toPx","ContextualBalloon","pluginName","constructor","editor","positionLimiter","view","editing","viewDocument","document","editableElement","selection","domConverter","mapViewToDom","root","set","locale","ui","body","add","focusTracker","element","_viewToStack","Map","_idToStack","_rotatorView","_createRotatorView","_fakePanelsView","_createFakePanelsView","destroy","hasView","Array","from","keys","includes","data","stackId","has","get","_numberOfStacks","size","_visibleStack","singleViewMode","showStack","stack","_showView","remove","_singleViewMode","visibleView","_showNextStack","hide","hideView","values","delete","_getStackId","updatePosition","position","pin","_getBalloonPosition","id","visibleStack","pop","entry","entries","find","stacks","nextIndex","indexOf","_showPrevStack","length","RotatorView","t","content","bind","to","value","isSingleViewMode","on","priority","numberOfStacks","current","buttonNextView","isFocused","focus","buttonPrevView","FakePanelsView","number","showPanels","Math","min","listenTo","balloonClassName","withArrow","class","showView","limiter","Object","assign","viewportOffsetConfig","viewportOffset","bindTemplate","_createButtonView","createCollection","setTemplate","tag","attributes","children","text","render","clear","label","icon","tooltip","balloonPanelView","_balloonPanelView","style","top","left","width","height","evt","name","next","prev","_addPanels","_removePanels","registerChild","last","deregisterChild","numberOfPanels"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/panel/balloon/contextualballoon\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BalloonPanelView from './balloonpanelview';\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\n\nimport prevIcon from '../../../theme/icons/previous-arrow.svg';\nimport nextIcon from '../../../theme/icons/next-arrow.svg';\n\nimport '../../../theme/components/panel/balloonrotator.css';\nimport '../../../theme/components/panel/fakepanel.css';\n\nconst toPx = toUnit( 'px' );\n\n/**\n * Provides the common contextual balloon for the editor.\n *\n * The role of this plugin is to unify the contextual balloons logic, simplify views management and help\n * avoid the unnecessary complexity of handling multiple {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * instances in the editor.\n *\n * This plugin allows for creating single or multiple panel stacks.\n *\n * Each stack may have multiple views, with the one on the top being visible. When the visible view is removed from the stack,\n * the previous view becomes visible.\n *\n * It might be useful to implement nested navigation in a balloon. For instance, a toolbar view may contain a link button.\n * When you click it, a link view (which lets you set the URL) is created and put on top of the toolbar view, so the link panel\n * is displayed. When you finish editing the link and close (remove) the link view, the toolbar view is visible again.\n *\n * However, there are cases when there are multiple independent balloons to be displayed, for instance, if the selection\n * is inside two inline comments at the same time. For such cases, you can create two independent panel stacks.\n * The contextual balloon plugin will create a navigation bar to let the users switch between these panel stacks using the \"Next\"\n * and \"Previous\" buttons.\n *\n * If there are no views in the current stack, the balloon panel will try to switch to the next stack. If there are no\n * panels in any stack, the balloon panel will be hidden.\n *\n * **Note**: To force the balloon panel to show only one view, even if there are other stacks, use the `singleViewMode=true` option\n * when {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#add adding} a view to a panel.\n *\n * From the implementation point of view, the contextual ballon plugin is reusing a single\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance to display multiple contextual balloon\n * panels in the editor. It also creates a special {@link module:ui/panel/balloon/contextualballoon~RotatorView rotator view},\n * used to manage multiple panel stacks. Rotator view is a child of the balloon panel view and the parent of the specific\n * view you want to display. If there is more than one panel stack to be displayed, the rotator view will add a\n * navigation bar. If there is only one stack, the rotator view is transparent (it does not add any UI elements).\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ContextualBalloon extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ContextualBalloon';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The {@link module:utils/dom/position~Options#limiter position limiter}\n\t\t * for the {@link #view balloon}, used when no `limiter` has been passed into {@link #add}\n\t\t * or {@link #updatePosition}.\n\t\t *\n\t\t * By default, a function that obtains the farthest DOM\n\t\t * {@link module:engine/view/rooteditableelement~RootEditableElement}\n\t\t * of the {@link module:engine/view/document~Document#selection}.\n\t\t *\n\t\t * @member {module:utils/dom/position~Options#limiter} #positionLimiter\n\t\t */\n\t\tthis.positionLimiter = () => {\n\t\t\tconst view = this.editor.editing.view;\n\t\t\tconst viewDocument = view.document;\n\t\t\tconst editableElement = viewDocument.selection.editableElement;\n\n\t\t\tif ( editableElement ) {\n\t\t\t\treturn view.domConverter.mapViewToDom( editableElement.root );\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\t/**\n\t\t * The currently visible view or `null` when there are no views in any stack.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {module:ui/view~View|null} #visibleView\n\t\t */\n\t\tthis.set( 'visibleView', null );\n\n\t\t/**\n\t\t * The common balloon panel view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} #view\n\t\t */\n\t\tthis.view = new BalloonPanelView( editor.locale );\n\t\teditor.ui.view.body.add( this.view );\n\t\teditor.ui.focusTracker.add( this.view.element );\n\n\t\t/**\n\t\t * The map of views and their stacks.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<module:ui/view~View,Set>}\n\t\t */\n\t\tthis._viewToStack = new Map();\n\n\t\t/**\n\t\t * The map of IDs and stacks.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<String,Set>}\n\t\t */\n\t\tthis._idToStack = new Map();\n\n\t\t/**\n\t\t * A total number of all stacks in the balloon.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #_numberOfStacks\n\t\t */\n\t\tthis.set( '_numberOfStacks', 0 );\n\n\t\t/**\n\t\t * A flag that controls the single view mode.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_singleViewMode\n\t\t */\n\t\tthis.set( '_singleViewMode', false );\n\n\t\t/**\n\t\t * Rotator view embedded in the contextual balloon.\n\t\t * Displays the currently visible view in the balloon and provides navigation for switching stacks.\n\t\t *\n\t\t * @private\n\t\t * @type {module:ui/panel/balloon/contextualballoon~RotatorView}\n\t\t */\n\t\tthis._rotatorView = this._createRotatorView();\n\n\t\t/**\n\t\t * Displays fake panels under the balloon panel view when multiple stacks are added to the balloon.\n\t\t *\n\t\t * @private\n\t\t * @type {module:ui/view~View}\n\t\t */\n\t\tthis._fakePanelsView = this._createFakePanelsView();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis.view.destroy();\n\t\tthis._rotatorView.destroy();\n\t\tthis._fakePanelsView.destroy();\n\t}\n\n\t/**\n\t * Returns `true` when the given view is in one of the stacks. Otherwise returns `false`.\n\t *\n\t * @param {module:ui/view~View} view\n\t * @returns {Boolean}\n\t */\n\thasView( view ) {\n\t\treturn Array.from( this._viewToStack.keys() ).includes( view );\n\t}\n\n\t/**\n\t * Adds a new view to the stack and makes it visible if the current stack is visible\n\t * or it is the first view in the balloon.\n\t *\n\t * @param {Object} data The configuration of the view.\n\t * @param {String} [data.stackId='main'] The ID of the stack that the view is added to.\n\t * @param {module:ui/view~View} [data.view] The content of the balloon.\n\t * @param {module:utils/dom/position~Options} [data.position] Positioning options.\n\t * @param {String} [data.balloonClassName] An additional CSS class added to the {@link #view balloon} when visible.\n\t * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n\t * @param {Boolean} [data.singleViewMode=false] Whether the view should be the only visible view even if other stacks were added.\n\t */\n\tadd( data ) {\n\t\tif ( this.hasView( data.view ) ) {\n\t\t\t/**\n\t\t\t * Trying to add configuration of the same view more than once.\n\t\t\t *\n\t\t\t * @error contextualballoon-add-view-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'contextualballoon-add-view-exist',\n\t\t\t\t[ this, data ]\n\t\t\t);\n\t\t}\n\n\t\tconst stackId = data.stackId || 'main';\n\n\t\t// If new stack is added, creates it and show view from this stack.\n\t\tif ( !this._idToStack.has( stackId ) ) {\n\t\t\tthis._idToStack.set( stackId, new Map( [ [ data.view, data ] ] ) );\n\t\t\tthis._viewToStack.set( data.view, this._idToStack.get( stackId ) );\n\t\t\tthis._numberOfStacks = this._idToStack.size;\n\n\t\t\tif ( !this._visibleStack || data.singleViewMode ) {\n\t\t\t\tthis.showStack( stackId );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst stack = this._idToStack.get( stackId );\n\n\t\tif ( data.singleViewMode ) {\n\t\t\tthis.showStack( stackId );\n\t\t}\n\n\t\t// Add new view to the stack.\n\t\tstack.set( data.view, data );\n\t\tthis._viewToStack.set( data.view, stack );\n\n\t\t// And display it if is added to the currently visible stack.\n\t\tif ( stack === this._visibleStack ) {\n\t\t\tthis._showView( data );\n\t\t}\n\t}\n\n\t/**\n\t * Removes the given view from the stack. If the removed view was visible,\n\t * the view preceding it in the stack will become visible instead.\n\t * When there is no view in the stack, the next stack will be displayed.\n\t * When there are no more stacks, the balloon will hide.\n\t *\n\t * @param {module:ui/view~View} view A view to be removed from the balloon.\n\t */\n\tremove( view ) {\n\t\tif ( !this.hasView( view ) ) {\n\t\t\t/**\n\t\t\t * Trying to remove the configuration of the view not defined in the stack.\n\t\t\t *\n\t\t\t * @error contextualballoon-remove-view-not-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'contextualballoon-remove-view-not-exist',\n\t\t\t\t[ this, view ]\n\t\t\t);\n\t\t}\n\n\t\tconst stack = this._viewToStack.get( view );\n\n\t\tif ( this._singleViewMode && this.visibleView === view ) {\n\t\t\tthis._singleViewMode = false;\n\t\t}\n\n\t\t// When visible view will be removed we need to show a preceding view or next stack\n\t\t// if a view is the only view in the stack.\n\t\tif ( this.visibleView === view ) {\n\t\t\tif ( stack.size === 1 ) {\n\t\t\t\tif ( this._idToStack.size > 1 ) {\n\t\t\t\t\tthis._showNextStack();\n\t\t\t\t} else {\n\t\t\t\t\tthis.view.hide();\n\t\t\t\t\tthis.visibleView = null;\n\t\t\t\t\tthis._rotatorView.hideView();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._showView( Array.from( stack.values() )[ stack.size - 2 ] );\n\t\t\t}\n\t\t}\n\n\t\tif ( stack.size === 1 ) {\n\t\t\tthis._idToStack.delete( this._getStackId( stack ) );\n\t\t\tthis._numberOfStacks = this._idToStack.size;\n\t\t} else {\n\t\t\tstack.delete( view );\n\t\t}\n\n\t\tthis._viewToStack.delete( view );\n\t}\n\n\t/**\n\t * Updates the position of the balloon using the position data of the first visible view in the stack.\n\t * When new position data is given, the position data of the currently visible view will be updated.\n\t *\n\t * @param {module:utils/dom/position~Options} [position] position options.\n\t */\n\tupdatePosition( position ) {\n\t\tif ( position ) {\n\t\t\tthis._visibleStack.get( this.visibleView ).position = position;\n\t\t}\n\n\t\tthis.view.pin( this._getBalloonPosition() );\n\t\tthis._fakePanelsView.updatePosition();\n\t}\n\n\t/**\n\t * Shows the last view from the stack of a given ID.\n\t *\n\t * @param {String} id\n\t */\n\tshowStack( id ) {\n\t\tthis.visibleStack = id;\n\t\tconst stack = this._idToStack.get( id );\n\n\t\tif ( !stack ) {\n\t\t\t/**\n\t\t\t * Trying to show a stack that does not exist.\n\t\t\t *\n\t\t\t * @error contextualballoon-showstack-stack-not-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'contextualballoon-showstack-stack-not-exist',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tif ( this._visibleStack === stack ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._showView( Array.from( stack.values() ).pop() );\n\t}\n\n\t/**\n\t * Returns the stack of the currently visible view.\n\t *\n\t * @private\n\t * @type {Set}\n\t */\n\tget _visibleStack() {\n\t\treturn this._viewToStack.get( this.visibleView );\n\t}\n\n\t/**\n\t * Returns the ID of the given stack.\n\t *\n\t * @private\n\t * @param {Set} stack\n\t * @returns {String}\n\t */\n\t_getStackId( stack ) {\n\t\tconst entry = Array.from( this._idToStack.entries() ).find( entry => entry[ 1 ] === stack );\n\n\t\treturn entry[ 0 ];\n\t}\n\n\t/**\n\t * Shows the last view from the next stack.\n\t *\n\t * @private\n\t */\n\t_showNextStack() {\n\t\tconst stacks = Array.from( this._idToStack.values() );\n\n\t\tlet nextIndex = stacks.indexOf( this._visibleStack ) + 1;\n\n\t\tif ( !stacks[ nextIndex ] ) {\n\t\t\tnextIndex = 0;\n\t\t}\n\n\t\tthis.showStack( this._getStackId( stacks[ nextIndex ] ) );\n\t}\n\n\t/**\n\t * Shows the last view from the previous stack.\n\t *\n\t * @private\n\t */\n\t_showPrevStack() {\n\t\tconst stacks = Array.from( this._idToStack.values() );\n\n\t\tlet nextIndex = stacks.indexOf( this._visibleStack ) - 1;\n\n\t\tif ( !stacks[ nextIndex ] ) {\n\t\t\tnextIndex = stacks.length - 1;\n\t\t}\n\n\t\tthis.showStack( this._getStackId( stacks[ nextIndex ] ) );\n\t}\n\n\t/**\n\t * Creates a rotator view.\n\t *\n\t * @private\n\t * @returns {module:ui/panel/balloon/contextualballoon~RotatorView}\n\t */\n\t_createRotatorView() {\n\t\tconst view = new RotatorView( this.editor.locale );\n\t\tconst t = this.editor.locale.t;\n\n\t\tthis.view.content.add( view );\n\n\t\t// Hide navigation when there is only a one stack & not in single view mode.\n\t\tview.bind( 'isNavigationVisible' ).to( this, '_numberOfStacks', this, '_singleViewMode', ( value, isSingleViewMode ) => {\n\t\t\treturn !isSingleViewMode && value > 1;\n\t\t} );\n\n\t\t// Update balloon position after toggling navigation.\n\t\tview.on( 'change:isNavigationVisible', () => ( this.updatePosition() ), { priority: 'low' } );\n\n\t\t// Update stacks counter value.\n\t\tview.bind( 'counter' ).to( this, 'visibleView', this, '_numberOfStacks', ( visibleView, numberOfStacks ) => {\n\t\t\tif ( numberOfStacks < 2 ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tconst current = Array.from( this._idToStack.values() ).indexOf( this._visibleStack ) + 1;\n\n\t\t\treturn t( '%0 of %1', [ current, numberOfStacks ] );\n\t\t} );\n\n\t\tview.buttonNextView.on( 'execute', () => {\n\t\t\t// When current view has a focus then move focus to the editable before removing it,\n\t\t\t// otherwise editor will lost focus.\n\t\t\tif ( view.focusTracker.isFocused ) {\n\t\t\t\tthis.editor.editing.view.focus();\n\t\t\t}\n\n\t\t\tthis._showNextStack();\n\t\t} );\n\n\t\tview.buttonPrevView.on( 'execute', () => {\n\t\t\t// When current view has a focus then move focus to the editable before removing it,\n\t\t\t// otherwise editor will lost focus.\n\t\t\tif ( view.focusTracker.isFocused ) {\n\t\t\t\tthis.editor.editing.view.focus();\n\t\t\t}\n\n\t\t\tthis._showPrevStack();\n\t\t} );\n\n\t\treturn view;\n\t}\n\n\t/**\n\t * @private\n\t * @returns {module:ui/view~View}\n\t */\n\t_createFakePanelsView() {\n\t\tconst view = new FakePanelsView( this.editor.locale, this.view );\n\n\t\tview.bind( 'numberOfPanels' ).to( this, '_numberOfStacks', this, '_singleViewMode', ( number, isSingleViewMode ) => {\n\t\t\tconst showPanels = !isSingleViewMode && number >= 2;\n\n\t\t\treturn showPanels ? Math.min( number - 1, 2 ) : 0;\n\t\t} );\n\n\t\tview.listenTo( this.view, 'change:top', () => view.updatePosition() );\n\t\tview.listenTo( this.view, 'change:left', () => view.updatePosition() );\n\n\t\tthis.editor.ui.view.body.add( view );\n\n\t\treturn view;\n\t}\n\n\t/**\n\t * Sets the view as the content of the balloon and attaches the balloon using position\n\t * options of the first view.\n\t *\n\t * @private\n\t * @param {Object} data Configuration.\n\t * @param {module:ui/view~View} [data.view] The view to show in the balloon.\n\t * @param {String} [data.balloonClassName=''] Additional class name which will be added to the {@link #view balloon}.\n\t * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n\t */\n\t_showView( { view, balloonClassName = '', withArrow = true, singleViewMode = false } ) {\n\t\tthis.view.class = balloonClassName;\n\t\tthis.view.withArrow = withArrow;\n\n\t\tthis._rotatorView.showView( view );\n\t\tthis.visibleView = view;\n\t\tthis.view.pin( this._getBalloonPosition() );\n\t\tthis._fakePanelsView.updatePosition();\n\n\t\tif ( singleViewMode ) {\n\t\t\tthis._singleViewMode = true;\n\t\t}\n\t}\n\n\t/**\n\t * Returns position options of the last view in the stack.\n\t * This keeps the balloon in the same position when the view is changed.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n\t_getBalloonPosition() {\n\t\tlet position = Array.from( this._visibleStack.values() ).pop().position;\n\n\t\tif ( position ) {\n\t\t\t// Use the default limiter if none has been specified.\n\t\t\tif ( !position.limiter ) {\n\t\t\t\t// Don't modify the original options object.\n\t\t\t\tposition = Object.assign( {}, position, {\n\t\t\t\t\tlimiter: this.positionLimiter\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Don't modify the original options object.\n\t\t\tposition = Object.assign( {}, position, {\n\t\t\t\tviewportOffsetConfig: this.editor.ui.viewportOffset\n\t\t\t} );\n\t\t}\n\n\t\treturn position;\n\t}\n}\n\n/**\n * Rotator view is a helper class for the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon}.\n * It is used for displaying the last view from the current stack and providing navigation buttons for switching stacks.\n * See the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon} documentation to learn more.\n *\n * @extends module:ui/view~View\n */\nclass RotatorView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst t = locale.t;\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Defines whether navigation is visible or not.\n\t\t *\n\t\t * @member {Boolean} #isNavigationVisible\n\t\t */\n\t\tthis.set( 'isNavigationVisible', true );\n\n\t\t/**\n\t\t * Used for checking if a view is focused or not.\n\t\t *\n\t\t * @type {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Navigation button for switching the stack to the previous one.\n\t\t *\n\t\t * @type {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.buttonPrevView = this._createButtonView( t( 'Previous' ), prevIcon );\n\n\t\t/**\n\t\t * Navigation button for switching the stack to the next one.\n\t\t *\n\t\t * @type {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.buttonNextView = this._createButtonView( t( 'Next' ), nextIcon );\n\n\t\t/**\n\t\t * A collection of the child views that creates the rotator content.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.content = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-balloon-rotator'\n\t\t\t\t],\n\t\t\t\t'z-index': '-1'\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck-balloon-rotator__navigation',\n\t\t\t\t\t\t\tbind.to( 'isNavigationVisible', value => value ? '' : 'ck-hidden' )\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tthis.buttonPrevView,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'span',\n\n\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t\t\t'ck-balloon-rotator__counter'\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttext: bind.to( 'counter' )\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis.buttonNextView\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: 'ck-balloon-rotator__content'\n\t\t\t\t\t},\n\t\t\t\t\tchildren: this.content\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.focusTracker.add( this.element );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t}\n\n\t/**\n\t * Shows a given view.\n\t *\n\t * @param {module:ui/view~View} view The view to show.\n\t */\n\tshowView( view ) {\n\t\tthis.hideView();\n\t\tthis.content.add( view );\n\t}\n\n\t/**\n\t * Hides the currently displayed view.\n\t */\n\thideView() {\n\t\tthis.content.clear();\n\t}\n\n\t/**\n\t * Creates a navigation button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button icon.\n\t * @returns {module:ui/button/buttonview~ButtonView}\n\t */\n\t_createButtonView( label, icon ) {\n\t\tconst view = new ButtonView( this.locale );\n\n\t\tview.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\treturn view;\n\t}\n}\n\n// Displays additional layers under the balloon when multiple stacks are added to the balloon.\n//\n// @private\n// @extends module:ui/view~View\nclass FakePanelsView extends View {\n\t// @inheritDoc\n\tconstructor( locale, balloonPanelView ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t// Fake panels top offset.\n\t\t//\n\t\t// @observable\n\t\t// @member {Number} #top\n\t\tthis.set( 'top', 0 );\n\n\t\t// Fake panels left offset.\n\t\t//\n\t\t// @observable\n\t\t// @member {Number} #left\n\t\tthis.set( 'left', 0 );\n\n\t\t// Fake panels height.\n\t\t//\n\t\t// @observable\n\t\t// @member {Number} #height\n\t\tthis.set( 'height', 0 );\n\n\t\t// Fake panels width.\n\t\t//\n\t\t// @observable\n\t\t// @member {Number} #width\n\t\tthis.set( 'width', 0 );\n\n\t\t// Number of rendered fake panels.\n\t\t//\n\t\t// @observable\n\t\t// @member {Number} #numberOfPanels\n\t\tthis.set( 'numberOfPanels', 0 );\n\n\t\t// Collection of the child views which creates fake panel content.\n\t\t//\n\t\t// @readonly\n\t\t// @type {module:ui/viewcollection~ViewCollection}\n\t\tthis.content = this.createCollection();\n\n\t\t// Context.\n\t\t//\n\t\t// @private\n\t\t// @type {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n\t\tthis._balloonPanelView = balloonPanelView;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-fake-panel',\n\t\t\t\t\tbind.to( 'numberOfPanels', number => number ? '' : 'ck-hidden' )\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\ttop: bind.to( 'top', toPx ),\n\t\t\t\t\tleft: bind.to( 'left', toPx ),\n\t\t\t\t\twidth: bind.to( 'width', toPx ),\n\t\t\t\t\theight: bind.to( 'height', toPx )\n\t\t\t\t}\n\t\t\t},\n\t\t\tchildren: this.content\n\t\t} );\n\n\t\tthis.on( 'change:numberOfPanels', ( evt, name, next, prev ) => {\n\t\t\tif ( next > prev ) {\n\t\t\t\tthis._addPanels( next - prev );\n\t\t\t} else {\n\t\t\t\tthis._removePanels( prev - next );\n\t\t\t}\n\n\t\t\tthis.updatePosition();\n\t\t} );\n\t}\n\n\t// @private\n\t// @param {Number} number\n\t_addPanels( number ) {\n\t\twhile ( number-- ) {\n\t\t\tconst view = new View();\n\n\t\t\tview.setTemplate( { tag: 'div' } );\n\n\t\t\tthis.content.add( view );\n\t\t\tthis.registerChild( view );\n\t\t}\n\t}\n\n\t// @private\n\t// @param {Number} number\n\t_removePanels( number ) {\n\t\twhile ( number-- ) {\n\t\t\tconst view = this.content.last;\n\n\t\t\tthis.content.remove( view );\n\t\t\tthis.deregisterChild( view );\n\t\t\tview.destroy();\n\t\t}\n\t}\n\n\t// Updates coordinates of fake panels.\n\tupdatePosition() {\n\t\tif ( this.numberOfPanels ) {\n\t\t\tconst { top, left } = this._balloonPanelView;\n\t\t\tconst { width, height } = new Rect( this._balloonPanelView.element );\n\n\t\t\tObject.assign( this, { top, left, width, height } );\n\t\t}\n\t}\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,qCAAqC;AACxD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,aAAa,MAAM,6CAA6C;AACvE,OAAOC,YAAY,MAAM,4CAA4C;AACrE,OAAOC,MAAM,MAAM,0CAA0C;AAC7D,OAAOC,IAAI,MAAM,wCAAwC;AAEzD,OAAOC,QAAQ,MAAM,yCAAyC;AAC9D,OAAOC,QAAQ,MAAM,qCAAqC;AAE1D,OAAO,oDAAoD;AAC3D,OAAO,+CAA+C;AAEtD,MAAMC,IAAI,GAAGJ,MAAM,CAAE,IAAI,CAAE;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMK,iBAAiB,SAASX,MAAM,CAAC;EACrD;AACD;AACA;EACC,WAAWY,UAAU,GAAG;IACvB,OAAO,mBAAmB;EAC3B;;EAEA;AACD;AACA;EACCC,WAAW,CAAEC,MAAM,EAAG;IACrB,KAAK,CAAEA,MAAM,CAAE;;IAEf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,eAAe,GAAG,MAAM;MAC5B,MAAMC,IAAI,GAAG,IAAI,CAACF,MAAM,CAACG,OAAO,CAACD,IAAI;MACrC,MAAME,YAAY,GAAGF,IAAI,CAACG,QAAQ;MAClC,MAAMC,eAAe,GAAGF,YAAY,CAACG,SAAS,CAACD,eAAe;MAE9D,IAAKA,eAAe,EAAG;QACtB,OAAOJ,IAAI,CAACM,YAAY,CAACC,YAAY,CAAEH,eAAe,CAACI,IAAI,CAAE;MAC9D;MAEA,OAAO,IAAI;IACZ,CAAC;;IAED;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,GAAG,CAAE,aAAa,EAAE,IAAI,CAAE;;IAE/B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACT,IAAI,GAAG,IAAIf,gBAAgB,CAAEa,MAAM,CAACY,MAAM,CAAE;IACjDZ,MAAM,CAACa,EAAE,CAACX,IAAI,CAACY,IAAI,CAACC,GAAG,CAAE,IAAI,CAACb,IAAI,CAAE;IACpCF,MAAM,CAACa,EAAE,CAACG,YAAY,CAACD,GAAG,CAAE,IAAI,CAACb,IAAI,CAACe,OAAO,CAAE;;IAE/C;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,YAAY,GAAG,IAAIC,GAAG,EAAE;;IAE7B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,IAAID,GAAG,EAAE;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACR,GAAG,CAAE,iBAAiB,EAAE,CAAC,CAAE;;IAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,GAAG,CAAE,iBAAiB,EAAE,KAAK,CAAE;;IAEpC;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACU,YAAY,GAAG,IAAI,CAACC,kBAAkB,EAAE;;IAE7C;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,qBAAqB,EAAE;EACpD;;EAEA;AACD;AACA;EACCC,OAAO,GAAG;IACT,KAAK,CAACA,OAAO,EAAE;IAEf,IAAI,CAACvB,IAAI,CAACuB,OAAO,EAAE;IACnB,IAAI,CAACJ,YAAY,CAACI,OAAO,EAAE;IAC3B,IAAI,CAACF,eAAe,CAACE,OAAO,EAAE;EAC/B;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCC,OAAO,CAAExB,IAAI,EAAG;IACf,OAAOyB,KAAK,CAACC,IAAI,CAAE,IAAI,CAACV,YAAY,CAACW,IAAI,EAAE,CAAE,CAACC,QAAQ,CAAE5B,IAAI,CAAE;EAC/D;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCa,GAAG,CAAEgB,IAAI,EAAG;IACX,IAAK,IAAI,CAACL,OAAO,CAAEK,IAAI,CAAC7B,IAAI,CAAE,EAAG;MAChC;AACH;AACA;AACA;AACA;MACG,MAAM,IAAIZ,aAAa,CACtB,kCAAkC,EAClC,CAAE,IAAI,EAAEyC,IAAI,CAAE,CACd;IACF;IAEA,MAAMC,OAAO,GAAGD,IAAI,CAACC,OAAO,IAAI,MAAM;;IAEtC;IACA,IAAK,CAAC,IAAI,CAACZ,UAAU,CAACa,GAAG,CAAED,OAAO,CAAE,EAAG;MACtC,IAAI,CAACZ,UAAU,CAACT,GAAG,CAAEqB,OAAO,EAAE,IAAIb,GAAG,CAAE,CAAE,CAAEY,IAAI,CAAC7B,IAAI,EAAE6B,IAAI,CAAE,CAAE,CAAE,CAAE;MAClE,IAAI,CAACb,YAAY,CAACP,GAAG,CAAEoB,IAAI,CAAC7B,IAAI,EAAE,IAAI,CAACkB,UAAU,CAACc,GAAG,CAAEF,OAAO,CAAE,CAAE;MAClE,IAAI,CAACG,eAAe,GAAG,IAAI,CAACf,UAAU,CAACgB,IAAI;MAE3C,IAAK,CAAC,IAAI,CAACC,aAAa,IAAIN,IAAI,CAACO,cAAc,EAAG;QACjD,IAAI,CAACC,SAAS,CAAEP,OAAO,CAAE;MAC1B;MAEA;IACD;IAEA,MAAMQ,KAAK,GAAG,IAAI,CAACpB,UAAU,CAACc,GAAG,CAAEF,OAAO,CAAE;IAE5C,IAAKD,IAAI,CAACO,cAAc,EAAG;MAC1B,IAAI,CAACC,SAAS,CAAEP,OAAO,CAAE;IAC1B;;IAEA;IACAQ,KAAK,CAAC7B,GAAG,CAAEoB,IAAI,CAAC7B,IAAI,EAAE6B,IAAI,CAAE;IAC5B,IAAI,CAACb,YAAY,CAACP,GAAG,CAAEoB,IAAI,CAAC7B,IAAI,EAAEsC,KAAK,CAAE;;IAEzC;IACA,IAAKA,KAAK,KAAK,IAAI,CAACH,aAAa,EAAG;MACnC,IAAI,CAACI,SAAS,CAAEV,IAAI,CAAE;IACvB;EACD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCW,MAAM,CAAExC,IAAI,EAAG;IACd,IAAK,CAAC,IAAI,CAACwB,OAAO,CAAExB,IAAI,CAAE,EAAG;MAC5B;AACH;AACA;AACA;AACA;MACG,MAAM,IAAIZ,aAAa,CACtB,yCAAyC,EACzC,CAAE,IAAI,EAAEY,IAAI,CAAE,CACd;IACF;IAEA,MAAMsC,KAAK,GAAG,IAAI,CAACtB,YAAY,CAACgB,GAAG,CAAEhC,IAAI,CAAE;IAE3C,IAAK,IAAI,CAACyC,eAAe,IAAI,IAAI,CAACC,WAAW,KAAK1C,IAAI,EAAG;MACxD,IAAI,CAACyC,eAAe,GAAG,KAAK;IAC7B;;IAEA;IACA;IACA,IAAK,IAAI,CAACC,WAAW,KAAK1C,IAAI,EAAG;MAChC,IAAKsC,KAAK,CAACJ,IAAI,KAAK,CAAC,EAAG;QACvB,IAAK,IAAI,CAAChB,UAAU,CAACgB,IAAI,GAAG,CAAC,EAAG;UAC/B,IAAI,CAACS,cAAc,EAAE;QACtB,CAAC,MAAM;UACN,IAAI,CAAC3C,IAAI,CAAC4C,IAAI,EAAE;UAChB,IAAI,CAACF,WAAW,GAAG,IAAI;UACvB,IAAI,CAACvB,YAAY,CAAC0B,QAAQ,EAAE;QAC7B;MACD,CAAC,MAAM;QACN,IAAI,CAACN,SAAS,CAAEd,KAAK,CAACC,IAAI,CAAEY,KAAK,CAACQ,MAAM,EAAE,CAAE,CAAER,KAAK,CAACJ,IAAI,GAAG,CAAC,CAAE,CAAE;MACjE;IACD;IAEA,IAAKI,KAAK,CAACJ,IAAI,KAAK,CAAC,EAAG;MACvB,IAAI,CAAChB,UAAU,CAAC6B,MAAM,CAAE,IAAI,CAACC,WAAW,CAAEV,KAAK,CAAE,CAAE;MACnD,IAAI,CAACL,eAAe,GAAG,IAAI,CAACf,UAAU,CAACgB,IAAI;IAC5C,CAAC,MAAM;MACNI,KAAK,CAACS,MAAM,CAAE/C,IAAI,CAAE;IACrB;IAEA,IAAI,CAACgB,YAAY,CAAC+B,MAAM,CAAE/C,IAAI,CAAE;EACjC;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCiD,cAAc,CAAEC,QAAQ,EAAG;IAC1B,IAAKA,QAAQ,EAAG;MACf,IAAI,CAACf,aAAa,CAACH,GAAG,CAAE,IAAI,CAACU,WAAW,CAAE,CAACQ,QAAQ,GAAGA,QAAQ;IAC/D;IAEA,IAAI,CAAClD,IAAI,CAACmD,GAAG,CAAE,IAAI,CAACC,mBAAmB,EAAE,CAAE;IAC3C,IAAI,CAAC/B,eAAe,CAAC4B,cAAc,EAAE;EACtC;;EAEA;AACD;AACA;AACA;AACA;EACCZ,SAAS,CAAEgB,EAAE,EAAG;IACf,IAAI,CAACC,YAAY,GAAGD,EAAE;IACtB,MAAMf,KAAK,GAAG,IAAI,CAACpB,UAAU,CAACc,GAAG,CAAEqB,EAAE,CAAE;IAEvC,IAAK,CAACf,KAAK,EAAG;MACb;AACH;AACA;AACA;AACA;MACG,MAAM,IAAIlD,aAAa,CACtB,6CAA6C,EAC7C,IAAI,CACJ;IACF;IAEA,IAAK,IAAI,CAAC+C,aAAa,KAAKG,KAAK,EAAG;MACnC;IACD;IAEA,IAAI,CAACC,SAAS,CAAEd,KAAK,CAACC,IAAI,CAAEY,KAAK,CAACQ,MAAM,EAAE,CAAE,CAACS,GAAG,EAAE,CAAE;EACrD;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC,IAAIpB,aAAa,GAAG;IACnB,OAAO,IAAI,CAACnB,YAAY,CAACgB,GAAG,CAAE,IAAI,CAACU,WAAW,CAAE;EACjD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCM,WAAW,CAAEV,KAAK,EAAG;IACpB,MAAMkB,KAAK,GAAG/B,KAAK,CAACC,IAAI,CAAE,IAAI,CAACR,UAAU,CAACuC,OAAO,EAAE,CAAE,CAACC,IAAI,CAAEF,KAAK,IAAIA,KAAK,CAAE,CAAC,CAAE,KAAKlB,KAAK,CAAE;IAE3F,OAAOkB,KAAK,CAAE,CAAC,CAAE;EAClB;;EAEA;AACD;AACA;AACA;AACA;EACCb,cAAc,GAAG;IAChB,MAAMgB,MAAM,GAAGlC,KAAK,CAACC,IAAI,CAAE,IAAI,CAACR,UAAU,CAAC4B,MAAM,EAAE,CAAE;IAErD,IAAIc,SAAS,GAAGD,MAAM,CAACE,OAAO,CAAE,IAAI,CAAC1B,aAAa,CAAE,GAAG,CAAC;IAExD,IAAK,CAACwB,MAAM,CAAEC,SAAS,CAAE,EAAG;MAC3BA,SAAS,GAAG,CAAC;IACd;IAEA,IAAI,CAACvB,SAAS,CAAE,IAAI,CAACW,WAAW,CAAEW,MAAM,CAAEC,SAAS,CAAE,CAAE,CAAE;EAC1D;;EAEA;AACD;AACA;AACA;AACA;EACCE,cAAc,GAAG;IAChB,MAAMH,MAAM,GAAGlC,KAAK,CAACC,IAAI,CAAE,IAAI,CAACR,UAAU,CAAC4B,MAAM,EAAE,CAAE;IAErD,IAAIc,SAAS,GAAGD,MAAM,CAACE,OAAO,CAAE,IAAI,CAAC1B,aAAa,CAAE,GAAG,CAAC;IAExD,IAAK,CAACwB,MAAM,CAAEC,SAAS,CAAE,EAAG;MAC3BA,SAAS,GAAGD,MAAM,CAACI,MAAM,GAAG,CAAC;IAC9B;IAEA,IAAI,CAAC1B,SAAS,CAAE,IAAI,CAACW,WAAW,CAAEW,MAAM,CAAEC,SAAS,CAAE,CAAE,CAAE;EAC1D;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCxC,kBAAkB,GAAG;IACpB,MAAMpB,IAAI,GAAG,IAAIgE,WAAW,CAAE,IAAI,CAAClE,MAAM,CAACY,MAAM,CAAE;IAClD,MAAMuD,CAAC,GAAG,IAAI,CAACnE,MAAM,CAACY,MAAM,CAACuD,CAAC;IAE9B,IAAI,CAACjE,IAAI,CAACkE,OAAO,CAACrD,GAAG,CAAEb,IAAI,CAAE;;IAE7B;IACAA,IAAI,CAACmE,IAAI,CAAE,qBAAqB,CAAE,CAACC,EAAE,CAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAEC,KAAK,EAAEC,gBAAgB,KAAM;MACvH,OAAO,CAACA,gBAAgB,IAAID,KAAK,GAAG,CAAC;IACtC,CAAC,CAAE;;IAEH;IACArE,IAAI,CAACuE,EAAE,CAAE,4BAA4B,EAAE,MAAQ,IAAI,CAACtB,cAAc,EAAI,EAAE;MAAEuB,QAAQ,EAAE;IAAM,CAAC,CAAE;;IAE7F;IACAxE,IAAI,CAACmE,IAAI,CAAE,SAAS,CAAE,CAACC,EAAE,CAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAE1B,WAAW,EAAE+B,cAAc,KAAM;MAC3G,IAAKA,cAAc,GAAG,CAAC,EAAG;QACzB,OAAO,EAAE;MACV;MAEA,MAAMC,OAAO,GAAGjD,KAAK,CAACC,IAAI,CAAE,IAAI,CAACR,UAAU,CAAC4B,MAAM,EAAE,CAAE,CAACe,OAAO,CAAE,IAAI,CAAC1B,aAAa,CAAE,GAAG,CAAC;MAExF,OAAO8B,CAAC,CAAE,UAAU,EAAE,CAAES,OAAO,EAAED,cAAc,CAAE,CAAE;IACpD,CAAC,CAAE;IAEHzE,IAAI,CAAC2E,cAAc,CAACJ,EAAE,CAAE,SAAS,EAAE,MAAM;MACxC;MACA;MACA,IAAKvE,IAAI,CAACc,YAAY,CAAC8D,SAAS,EAAG;QAClC,IAAI,CAAC9E,MAAM,CAACG,OAAO,CAACD,IAAI,CAAC6E,KAAK,EAAE;MACjC;MAEA,IAAI,CAAClC,cAAc,EAAE;IACtB,CAAC,CAAE;IAEH3C,IAAI,CAAC8E,cAAc,CAACP,EAAE,CAAE,SAAS,EAAE,MAAM;MACxC;MACA;MACA,IAAKvE,IAAI,CAACc,YAAY,CAAC8D,SAAS,EAAG;QAClC,IAAI,CAAC9E,MAAM,CAACG,OAAO,CAACD,IAAI,CAAC6E,KAAK,EAAE;MACjC;MAEA,IAAI,CAACf,cAAc,EAAE;IACtB,CAAC,CAAE;IAEH,OAAO9D,IAAI;EACZ;;EAEA;AACD;AACA;AACA;EACCsB,qBAAqB,GAAG;IACvB,MAAMtB,IAAI,GAAG,IAAI+E,cAAc,CAAE,IAAI,CAACjF,MAAM,CAACY,MAAM,EAAE,IAAI,CAACV,IAAI,CAAE;IAEhEA,IAAI,CAACmE,IAAI,CAAE,gBAAgB,CAAE,CAACC,EAAE,CAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAEY,MAAM,EAAEV,gBAAgB,KAAM;MACnH,MAAMW,UAAU,GAAG,CAACX,gBAAgB,IAAIU,MAAM,IAAI,CAAC;MAEnD,OAAOC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAEH,MAAM,GAAG,CAAC,EAAE,CAAC,CAAE,GAAG,CAAC;IAClD,CAAC,CAAE;IAEHhF,IAAI,CAACoF,QAAQ,CAAE,IAAI,CAACpF,IAAI,EAAE,YAAY,EAAE,MAAMA,IAAI,CAACiD,cAAc,EAAE,CAAE;IACrEjD,IAAI,CAACoF,QAAQ,CAAE,IAAI,CAACpF,IAAI,EAAE,aAAa,EAAE,MAAMA,IAAI,CAACiD,cAAc,EAAE,CAAE;IAEtE,IAAI,CAACnD,MAAM,CAACa,EAAE,CAACX,IAAI,CAACY,IAAI,CAACC,GAAG,CAAEb,IAAI,CAAE;IAEpC,OAAOA,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCuC,SAAS,OAA8E;IAAA,IAA5E;MAAEvC,IAAI;MAAEqF,gBAAgB,GAAG,EAAE;MAAEC,SAAS,GAAG,IAAI;MAAElD,cAAc,GAAG;IAAM,CAAC;IACnF,IAAI,CAACpC,IAAI,CAACuF,KAAK,GAAGF,gBAAgB;IAClC,IAAI,CAACrF,IAAI,CAACsF,SAAS,GAAGA,SAAS;IAE/B,IAAI,CAACnE,YAAY,CAACqE,QAAQ,CAAExF,IAAI,CAAE;IAClC,IAAI,CAAC0C,WAAW,GAAG1C,IAAI;IACvB,IAAI,CAACA,IAAI,CAACmD,GAAG,CAAE,IAAI,CAACC,mBAAmB,EAAE,CAAE;IAC3C,IAAI,CAAC/B,eAAe,CAAC4B,cAAc,EAAE;IAErC,IAAKb,cAAc,EAAG;MACrB,IAAI,CAACK,eAAe,GAAG,IAAI;IAC5B;EACD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCW,mBAAmB,GAAG;IACrB,IAAIF,QAAQ,GAAGzB,KAAK,CAACC,IAAI,CAAE,IAAI,CAACS,aAAa,CAACW,MAAM,EAAE,CAAE,CAACS,GAAG,EAAE,CAACL,QAAQ;IAEvE,IAAKA,QAAQ,EAAG;MACf;MACA,IAAK,CAACA,QAAQ,CAACuC,OAAO,EAAG;QACxB;QACAvC,QAAQ,GAAGwC,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,EAAEzC,QAAQ,EAAE;UACvCuC,OAAO,EAAE,IAAI,CAAC1F;QACf,CAAC,CAAE;MACJ;;MAEA;MACAmD,QAAQ,GAAGwC,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,EAAEzC,QAAQ,EAAE;QACvC0C,oBAAoB,EAAE,IAAI,CAAC9F,MAAM,CAACa,EAAE,CAACkF;MACtC,CAAC,CAAE;IACJ;IAEA,OAAO3C,QAAQ;EAChB;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMc,WAAW,SAAS9E,IAAI,CAAC;EAC9B;AACD;AACA;EACCW,WAAW,CAAEa,MAAM,EAAG;IACrB,KAAK,CAAEA,MAAM,CAAE;IAEf,MAAMuD,CAAC,GAAGvD,MAAM,CAACuD,CAAC;IAClB,MAAME,IAAI,GAAG,IAAI,CAAC2B,YAAY;;IAE9B;AACF;AACA;AACA;AACA;IACE,IAAI,CAACrF,GAAG,CAAE,qBAAqB,EAAE,IAAI,CAAE;;IAEvC;AACF;AACA;AACA;AACA;IACE,IAAI,CAACK,YAAY,GAAG,IAAIzB,YAAY,EAAE;;IAEtC;AACF;AACA;AACA;AACA;IACE,IAAI,CAACyF,cAAc,GAAG,IAAI,CAACiB,iBAAiB,CAAE9B,CAAC,CAAE,UAAU,CAAE,EAAEzE,QAAQ,CAAE;;IAEzE;AACF;AACA;AACA;AACA;IACE,IAAI,CAACmF,cAAc,GAAG,IAAI,CAACoB,iBAAiB,CAAE9B,CAAC,CAAE,MAAM,CAAE,EAAExE,QAAQ,CAAE;;IAErE;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACyE,OAAO,GAAG,IAAI,CAAC8B,gBAAgB,EAAE;IAEtC,IAAI,CAACC,WAAW,CAAE;MACjBC,GAAG,EAAE,KAAK;MACVC,UAAU,EAAE;QACXZ,KAAK,EAAE,CACN,IAAI,EACJ,oBAAoB,CACpB;QACD,SAAS,EAAE;MACZ,CAAC;MACDa,QAAQ,EAAE,CACT;QACCF,GAAG,EAAE,KAAK;QACVC,UAAU,EAAE;UACXZ,KAAK,EAAE,CACN,gCAAgC,EAChCpB,IAAI,CAACC,EAAE,CAAE,qBAAqB,EAAEC,KAAK,IAAIA,KAAK,GAAG,EAAE,GAAG,WAAW,CAAE;QAErE,CAAC;QACD+B,QAAQ,EAAE,CACT,IAAI,CAACtB,cAAc,EACnB;UACCoB,GAAG,EAAE,MAAM;UAEXC,UAAU,EAAE;YACXZ,KAAK,EAAE,CACN,6BAA6B;UAE/B,CAAC;UAEDa,QAAQ,EAAE,CACT;YACCC,IAAI,EAAElC,IAAI,CAACC,EAAE,CAAE,SAAS;UACzB,CAAC;QAEH,CAAC,EACD,IAAI,CAACO,cAAc;MAErB,CAAC,EACD;QACCuB,GAAG,EAAE,KAAK;QACVC,UAAU,EAAE;UACXZ,KAAK,EAAE;QACR,CAAC;QACDa,QAAQ,EAAE,IAAI,CAAClC;MAChB,CAAC;IAEH,CAAC,CAAE;EACJ;;EAEA;AACD;AACA;EACCoC,MAAM,GAAG;IACR,KAAK,CAACA,MAAM,EAAE;IAEd,IAAI,CAACxF,YAAY,CAACD,GAAG,CAAE,IAAI,CAACE,OAAO,CAAE;EACtC;;EAEA;AACD;AACA;EACCQ,OAAO,GAAG;IACT,KAAK,CAACA,OAAO,EAAE;IAEf,IAAI,CAACT,YAAY,CAACS,OAAO,EAAE;EAC5B;;EAEA;AACD;AACA;AACA;AACA;EACCiE,QAAQ,CAAExF,IAAI,EAAG;IAChB,IAAI,CAAC6C,QAAQ,EAAE;IACf,IAAI,CAACqB,OAAO,CAACrD,GAAG,CAAEb,IAAI,CAAE;EACzB;;EAEA;AACD;AACA;EACC6C,QAAQ,GAAG;IACV,IAAI,CAACqB,OAAO,CAACqC,KAAK,EAAE;EACrB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCR,iBAAiB,CAAES,KAAK,EAAEC,IAAI,EAAG;IAChC,MAAMzG,IAAI,GAAG,IAAIb,UAAU,CAAE,IAAI,CAACuB,MAAM,CAAE;IAE1CV,IAAI,CAACS,GAAG,CAAE;MACT+F,KAAK;MACLC,IAAI;MACJC,OAAO,EAAE;IACV,CAAC,CAAE;IAEH,OAAO1G,IAAI;EACZ;AACD;;AAEA;AACA;AACA;AACA;AACA,MAAM+E,cAAc,SAAS7F,IAAI,CAAC;EACjC;EACAW,WAAW,CAAEa,MAAM,EAAEiG,gBAAgB,EAAG;IACvC,KAAK,CAAEjG,MAAM,CAAE;IAEf,MAAMyD,IAAI,GAAG,IAAI,CAAC2B,YAAY;;IAE9B;IACA;IACA;IACA;IACA,IAAI,CAACrF,GAAG,CAAE,KAAK,EAAE,CAAC,CAAE;;IAEpB;IACA;IACA;IACA;IACA,IAAI,CAACA,GAAG,CAAE,MAAM,EAAE,CAAC,CAAE;;IAErB;IACA;IACA;IACA;IACA,IAAI,CAACA,GAAG,CAAE,QAAQ,EAAE,CAAC,CAAE;;IAEvB;IACA;IACA;IACA;IACA,IAAI,CAACA,GAAG,CAAE,OAAO,EAAE,CAAC,CAAE;;IAEtB;IACA;IACA;IACA;IACA,IAAI,CAACA,GAAG,CAAE,gBAAgB,EAAE,CAAC,CAAE;;IAE/B;IACA;IACA;IACA;IACA,IAAI,CAACyD,OAAO,GAAG,IAAI,CAAC8B,gBAAgB,EAAE;;IAEtC;IACA;IACA;IACA;IACA,IAAI,CAACY,iBAAiB,GAAGD,gBAAgB;IAEzC,IAAI,CAACV,WAAW,CAAE;MACjBC,GAAG,EAAE,KAAK;MACVC,UAAU,EAAE;QACXZ,KAAK,EAAE,CACN,eAAe,EACfpB,IAAI,CAACC,EAAE,CAAE,gBAAgB,EAAEY,MAAM,IAAIA,MAAM,GAAG,EAAE,GAAG,WAAW,CAAE,CAChE;QACD6B,KAAK,EAAE;UACNC,GAAG,EAAE3C,IAAI,CAACC,EAAE,CAAE,KAAK,EAAE1E,IAAI,CAAE;UAC3BqH,IAAI,EAAE5C,IAAI,CAACC,EAAE,CAAE,MAAM,EAAE1E,IAAI,CAAE;UAC7BsH,KAAK,EAAE7C,IAAI,CAACC,EAAE,CAAE,OAAO,EAAE1E,IAAI,CAAE;UAC/BuH,MAAM,EAAE9C,IAAI,CAACC,EAAE,CAAE,QAAQ,EAAE1E,IAAI;QAChC;MACD,CAAC;MACD0G,QAAQ,EAAE,IAAI,CAAClC;IAChB,CAAC,CAAE;IAEH,IAAI,CAACK,EAAE,CAAE,uBAAuB,EAAE,CAAE2C,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,KAAM;MAC9D,IAAKD,IAAI,GAAGC,IAAI,EAAG;QAClB,IAAI,CAACC,UAAU,CAAEF,IAAI,GAAGC,IAAI,CAAE;MAC/B,CAAC,MAAM;QACN,IAAI,CAACE,aAAa,CAAEF,IAAI,GAAGD,IAAI,CAAE;MAClC;MAEA,IAAI,CAACnE,cAAc,EAAE;IACtB,CAAC,CAAE;EACJ;;EAEA;EACA;EACAqE,UAAU,CAAEtC,MAAM,EAAG;IACpB,OAAQA,MAAM,EAAE,EAAG;MAClB,MAAMhF,IAAI,GAAG,IAAId,IAAI,EAAE;MAEvBc,IAAI,CAACiG,WAAW,CAAE;QAAEC,GAAG,EAAE;MAAM,CAAC,CAAE;MAElC,IAAI,CAAChC,OAAO,CAACrD,GAAG,CAAEb,IAAI,CAAE;MACxB,IAAI,CAACwH,aAAa,CAAExH,IAAI,CAAE;IAC3B;EACD;;EAEA;EACA;EACAuH,aAAa,CAAEvC,MAAM,EAAG;IACvB,OAAQA,MAAM,EAAE,EAAG;MAClB,MAAMhF,IAAI,GAAG,IAAI,CAACkE,OAAO,CAACuD,IAAI;MAE9B,IAAI,CAACvD,OAAO,CAAC1B,MAAM,CAAExC,IAAI,CAAE;MAC3B,IAAI,CAAC0H,eAAe,CAAE1H,IAAI,CAAE;MAC5BA,IAAI,CAACuB,OAAO,EAAE;IACf;EACD;;EAEA;EACA0B,cAAc,GAAG;IAChB,IAAK,IAAI,CAAC0E,cAAc,EAAG;MAC1B,MAAM;QAAEb,GAAG;QAAEC;MAAK,CAAC,GAAG,IAAI,CAACH,iBAAiB;MAC5C,MAAM;QAAEI,KAAK;QAAEC;MAAO,CAAC,GAAG,IAAI1H,IAAI,CAAE,IAAI,CAACqH,iBAAiB,CAAC7F,OAAO,CAAE;MAEpE2E,MAAM,CAACC,MAAM,CAAE,IAAI,EAAE;QAAEmB,GAAG;QAAEC,IAAI;QAAEC,KAAK;QAAEC;MAAO,CAAC,CAAE;IACpD;EACD;AACD"},"metadata":{},"sourceType":"module"}