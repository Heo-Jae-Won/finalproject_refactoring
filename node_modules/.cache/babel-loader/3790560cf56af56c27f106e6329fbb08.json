{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/imageresizebuttons\n */\n\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView, DropdownButtonView, Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { CKEditorError, Collection } from 'ckeditor5/src/utils';\nimport ImageResizeEditing from './imageresizeediting';\nconst RESIZE_ICONS = {\n  small: icons.objectSizeSmall,\n  medium: icons.objectSizeMedium,\n  large: icons.objectSizeLarge,\n  original: icons.objectSizeFull\n};\n\n/**\n * The image resize buttons plugin.\n *\n * It adds a possibility to resize images using the toolbar dropdown or individual buttons, depending on the plugin configuration.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageResizeButtons extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ImageResizeEditing];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ImageResizeButtons';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n\n    /**\n     * The resize unit.\n     *\n     * @readonly\n     * @private\n     * @type {module:image/image~ImageConfig#resizeUnit}\n     * @default '%'\n     */\n    this._resizeUnit = editor.config.get('image.resizeUnit');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    const editor = this.editor;\n    const options = editor.config.get('image.resizeOptions');\n    const command = editor.commands.get('resizeImage');\n    this.bind('isEnabled').to(command);\n    for (const option of options) {\n      this._registerImageResizeButton(option);\n    }\n    this._registerImageResizeDropdown(options);\n  }\n\n  /**\n   * A helper function that creates a standalone button component for the plugin.\n   *\n   * @private\n   * @param {module:image/imageresize/imageresizebuttons~ImageResizeOption} resizeOption A model of the resize option.\n   */\n  _registerImageResizeButton(option) {\n    const editor = this.editor;\n    const {\n      name,\n      value,\n      icon\n    } = option;\n    const optionValueWithUnit = value ? value + this._resizeUnit : null;\n    editor.ui.componentFactory.add(name, locale => {\n      const button = new ButtonView(locale);\n      const command = editor.commands.get('resizeImage');\n      const labelText = this._getOptionLabelValue(option, true);\n      if (!RESIZE_ICONS[icon]) {\n        /**\n         * When configuring {@link module:image/image~ImageConfig#resizeOptions `config.image.resizeOptions`} for standalone\n         * buttons, a valid `icon` token must be set for each option.\n         *\n         * See all valid options described in the\n         * {@link module:image/imageresize/imageresizebuttons~ImageResizeOption plugin configuration}.\n         *\n         * @error imageresizebuttons-missing-icon\n         * @param {module:image/imageresize/imageresizebuttons~ImageResizeOption} option Invalid image resize option.\n        */\n        throw new CKEditorError('imageresizebuttons-missing-icon', editor, option);\n      }\n      button.set({\n        // Use the `label` property for a verbose description (because of ARIA).\n        label: labelText,\n        icon: RESIZE_ICONS[icon],\n        tooltip: labelText,\n        isToggleable: true\n      });\n\n      // Bind button to the command.\n      button.bind('isEnabled').to(this);\n      button.bind('isOn').to(command, 'value', getIsOnButtonCallback(optionValueWithUnit));\n      this.listenTo(button, 'execute', () => {\n        editor.execute('resizeImage', {\n          width: optionValueWithUnit\n        });\n      });\n      return button;\n    });\n  }\n\n  /**\n   * A helper function that creates a dropdown component for the plugin containing all the resize options defined in\n   * the editor configuration.\n   *\n   * @private\n   * @param {Array.<module:image/imageresize/imageresizebuttons~ImageResizeOption>} options An array of configured options.\n   */\n  _registerImageResizeDropdown(options) {\n    const editor = this.editor;\n    const t = editor.t;\n    const originalSizeOption = options.find(option => !option.value);\n    const componentCreator = locale => {\n      const command = editor.commands.get('resizeImage');\n      const dropdownView = createDropdown(locale, DropdownButtonView);\n      const dropdownButton = dropdownView.buttonView;\n      dropdownButton.set({\n        tooltip: t('Resize image'),\n        commandValue: originalSizeOption.value,\n        icon: RESIZE_ICONS.medium,\n        isToggleable: true,\n        label: this._getOptionLabelValue(originalSizeOption),\n        withText: true,\n        class: 'ck-resize-image-button'\n      });\n      dropdownButton.bind('label').to(command, 'value', commandValue => {\n        if (commandValue && commandValue.width) {\n          return commandValue.width;\n        } else {\n          return this._getOptionLabelValue(originalSizeOption);\n        }\n      });\n      dropdownView.bind('isOn').to(command);\n      dropdownView.bind('isEnabled').to(this);\n      addListToDropdown(dropdownView, this._getResizeDropdownListItemDefinitions(options, command));\n      dropdownView.listView.ariaLabel = t('Image resize list');\n\n      // Execute command when an item from the dropdown is selected.\n      this.listenTo(dropdownView, 'execute', evt => {\n        editor.execute(evt.source.commandName, {\n          width: evt.source.commandValue\n        });\n        editor.editing.view.focus();\n      });\n      return dropdownView;\n    };\n\n    // Register `resizeImage` dropdown and add `imageResize` dropdown as an alias for backward compatibility.\n    editor.ui.componentFactory.add('resizeImage', componentCreator);\n    editor.ui.componentFactory.add('imageResize', componentCreator);\n  }\n\n  /**\n   * A helper function for creating an option label value string.\n   *\n   * @private\n   * @param {module:image/imageresize/imageresizebuttons~ImageResizeOption} option A resize option object.\n   * @param {Boolean} [forTooltip] An optional flag for creating a tooltip label.\n   * @returns {String} A user-defined label combined from the numeric value and the resize unit or the default label\n   * for reset options (`Original`).\n   */\n  _getOptionLabelValue(option, forTooltip) {\n    const t = this.editor.t;\n    if (option.label) {\n      return option.label;\n    } else if (forTooltip) {\n      if (option.value) {\n        return t('Resize image to %0', option.value + this._resizeUnit);\n      } else {\n        return t('Resize image to the original size');\n      }\n    } else {\n      if (option.value) {\n        return option.value + this._resizeUnit;\n      } else {\n        return t('Original');\n      }\n    }\n  }\n\n  /**\n   * A helper function that parses the resize options and returns list item definitions ready for use in the dropdown.\n   *\n   * @private\n   * @param {Array.<module:image/imageresize/imageresizebuttons~ImageResizeOption>} options The resize options.\n   * @param {module:image/imageresize/resizeimagecommand~ResizeImageCommand} command The resize image command.\n   * @returns {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} Dropdown item definitions.\n   */\n  _getResizeDropdownListItemDefinitions(options, command) {\n    const itemDefinitions = new Collection();\n    options.map(option => {\n      const optionValueWithUnit = option.value ? option.value + this._resizeUnit : null;\n      const definition = {\n        type: 'button',\n        model: new Model({\n          commandName: 'resizeImage',\n          commandValue: optionValueWithUnit,\n          label: this._getOptionLabelValue(option),\n          withText: true,\n          icon: null\n        })\n      };\n      definition.model.bind('isOn').to(command, 'value', getIsOnButtonCallback(optionValueWithUnit));\n      itemDefinitions.add(definition);\n    });\n    return itemDefinitions;\n  }\n}\n\n// A helper function for setting the `isOn` state of buttons in value bindings.\nfunction getIsOnButtonCallback(value) {\n  return commandValue => {\n    if (value === null && commandValue === value) {\n      return true;\n    }\n    return commandValue && commandValue.width === value;\n  };\n}\n\n/**\n * The image resize option used in the {@link module:image/image~ImageConfig#resizeOptions image resize configuration}.\n *\n * @typedef {Object} module:image/imageresize/imageresizebuttons~ImageResizeOption\n * @property {String} name The name of the UI component that changes the image size.\n * * If you configure the feature using individual resize buttons, you can refer to this name in the\n * {@link module:image/image~ImageConfig#toolbar image toolbar configuration}.\n * * If you configure the feature using the resize dropdown, this name will be used for a list item in the dropdown.\n * @property {String} value The value of the resize option without the unit\n * ({@link module:image/image~ImageConfig#resizeUnit configured separately}). `null` resets an image to its original size.\n * @property {String} [icon] An icon used by an individual resize button (see the `name` property to learn more).\n * Available icons are: `'small'`, `'medium'`, `'large'`, `'original'`.\n * @property {String} [label] An option label displayed in the dropdown or, if the feature is configured using\n * individual buttons, a {@link module:ui/button/buttonview~ButtonView#tooltip} and an ARIA attribute of a button.\n * If not specified, the label is generated automatically based on the `value` option and the\n * {@link module:image/image~ImageConfig#resizeUnit `config.image.resizeUnit`}.\n */","map":{"version":3,"names":["Plugin","icons","ButtonView","DropdownButtonView","Model","createDropdown","addListToDropdown","CKEditorError","Collection","ImageResizeEditing","RESIZE_ICONS","small","objectSizeSmall","medium","objectSizeMedium","large","objectSizeLarge","original","objectSizeFull","ImageResizeButtons","requires","pluginName","constructor","editor","_resizeUnit","config","get","init","options","command","commands","bind","to","option","_registerImageResizeButton","_registerImageResizeDropdown","name","value","icon","optionValueWithUnit","ui","componentFactory","add","locale","button","labelText","_getOptionLabelValue","set","label","tooltip","isToggleable","getIsOnButtonCallback","listenTo","execute","width","t","originalSizeOption","find","componentCreator","dropdownView","dropdownButton","buttonView","commandValue","withText","class","_getResizeDropdownListItemDefinitions","listView","ariaLabel","evt","source","commandName","editing","view","focus","forTooltip","itemDefinitions","map","definition","type","model"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-image/src/imageresize/imageresizebuttons.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/imageresizebuttons\n */\n\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView, DropdownButtonView, Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { CKEditorError, Collection } from 'ckeditor5/src/utils';\n\nimport ImageResizeEditing from './imageresizeediting';\n\nconst RESIZE_ICONS = {\n\tsmall: icons.objectSizeSmall,\n\tmedium: icons.objectSizeMedium,\n\tlarge: icons.objectSizeLarge,\n\toriginal: icons.objectSizeFull\n};\n\n/**\n * The image resize buttons plugin.\n *\n * It adds a possibility to resize images using the toolbar dropdown or individual buttons, depending on the plugin configuration.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageResizeButtons extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageResizeEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageResizeButtons';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The resize unit.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @type {module:image/image~ImageConfig#resizeUnit}\n\t\t * @default '%'\n\t\t */\n\t\tthis._resizeUnit = editor.config.get( 'image.resizeUnit' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst options = editor.config.get( 'image.resizeOptions' );\n\t\tconst command = editor.commands.get( 'resizeImage' );\n\n\t\tthis.bind( 'isEnabled' ).to( command );\n\n\t\tfor ( const option of options ) {\n\t\t\tthis._registerImageResizeButton( option );\n\t\t}\n\n\t\tthis._registerImageResizeDropdown( options );\n\t}\n\n\t/**\n\t * A helper function that creates a standalone button component for the plugin.\n\t *\n\t * @private\n\t * @param {module:image/imageresize/imageresizebuttons~ImageResizeOption} resizeOption A model of the resize option.\n\t */\n\t_registerImageResizeButton( option ) {\n\t\tconst editor = this.editor;\n\t\tconst { name, value, icon } = option;\n\t\tconst optionValueWithUnit = value ? value + this._resizeUnit : null;\n\n\t\teditor.ui.componentFactory.add( name, locale => {\n\t\t\tconst button = new ButtonView( locale );\n\t\t\tconst command = editor.commands.get( 'resizeImage' );\n\t\t\tconst labelText = this._getOptionLabelValue( option, true );\n\n\t\t\tif ( !RESIZE_ICONS[ icon ] ) {\n\t\t\t\t/**\n\t\t\t\t * When configuring {@link module:image/image~ImageConfig#resizeOptions `config.image.resizeOptions`} for standalone\n\t\t\t\t * buttons, a valid `icon` token must be set for each option.\n\t\t\t\t *\n\t\t\t\t * See all valid options described in the\n\t\t\t\t * {@link module:image/imageresize/imageresizebuttons~ImageResizeOption plugin configuration}.\n\t\t\t\t *\n\t\t\t\t * @error imageresizebuttons-missing-icon\n\t\t\t\t * @param {module:image/imageresize/imageresizebuttons~ImageResizeOption} option Invalid image resize option.\n\t\t\t\t*/\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'imageresizebuttons-missing-icon',\n\t\t\t\t\teditor,\n\t\t\t\t\toption\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tbutton.set( {\n\t\t\t\t// Use the `label` property for a verbose description (because of ARIA).\n\t\t\t\tlabel: labelText,\n\t\t\t\ticon: RESIZE_ICONS[ icon ],\n\t\t\t\ttooltip: labelText,\n\t\t\t\tisToggleable: true\n\t\t\t} );\n\n\t\t\t// Bind button to the command.\n\t\t\tbutton.bind( 'isEnabled' ).to( this );\n\t\t\tbutton.bind( 'isOn' ).to( command, 'value', getIsOnButtonCallback( optionValueWithUnit ) );\n\n\t\t\tthis.listenTo( button, 'execute', () => {\n\t\t\t\teditor.execute( 'resizeImage', { width: optionValueWithUnit } );\n\t\t\t} );\n\n\t\t\treturn button;\n\t\t} );\n\t}\n\n\t/**\n\t * A helper function that creates a dropdown component for the plugin containing all the resize options defined in\n\t * the editor configuration.\n\t *\n\t * @private\n\t * @param {Array.<module:image/imageresize/imageresizebuttons~ImageResizeOption>} options An array of configured options.\n\t */\n\t_registerImageResizeDropdown( options ) {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst originalSizeOption = options.find( option => !option.value );\n\n\t\tconst componentCreator = locale => {\n\t\t\tconst command = editor.commands.get( 'resizeImage' );\n\t\t\tconst dropdownView = createDropdown( locale, DropdownButtonView );\n\t\t\tconst dropdownButton = dropdownView.buttonView;\n\n\t\t\tdropdownButton.set( {\n\t\t\t\ttooltip: t( 'Resize image' ),\n\t\t\t\tcommandValue: originalSizeOption.value,\n\t\t\t\ticon: RESIZE_ICONS.medium,\n\t\t\t\tisToggleable: true,\n\t\t\t\tlabel: this._getOptionLabelValue( originalSizeOption ),\n\t\t\t\twithText: true,\n\t\t\t\tclass: 'ck-resize-image-button'\n\t\t\t} );\n\n\t\t\tdropdownButton.bind( 'label' ).to( command, 'value', commandValue => {\n\t\t\t\tif ( commandValue && commandValue.width ) {\n\t\t\t\t\treturn commandValue.width;\n\t\t\t\t} else {\n\t\t\t\t\treturn this._getOptionLabelValue( originalSizeOption );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tdropdownView.bind( 'isOn' ).to( command );\n\t\t\tdropdownView.bind( 'isEnabled' ).to( this );\n\n\t\t\taddListToDropdown( dropdownView, this._getResizeDropdownListItemDefinitions( options, command ) );\n\n\t\t\tdropdownView.listView.ariaLabel = t( 'Image resize list' );\n\n\t\t\t// Execute command when an item from the dropdown is selected.\n\t\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\t\teditor.execute( evt.source.commandName, { width: evt.source.commandValue } );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t};\n\n\t\t// Register `resizeImage` dropdown and add `imageResize` dropdown as an alias for backward compatibility.\n\t\teditor.ui.componentFactory.add( 'resizeImage', componentCreator );\n\t\teditor.ui.componentFactory.add( 'imageResize', componentCreator );\n\t}\n\n\t/**\n\t * A helper function for creating an option label value string.\n\t *\n\t * @private\n\t * @param {module:image/imageresize/imageresizebuttons~ImageResizeOption} option A resize option object.\n\t * @param {Boolean} [forTooltip] An optional flag for creating a tooltip label.\n\t * @returns {String} A user-defined label combined from the numeric value and the resize unit or the default label\n\t * for reset options (`Original`).\n\t */\n\t_getOptionLabelValue( option, forTooltip ) {\n\t\tconst t = this.editor.t;\n\n\t\tif ( option.label ) {\n\t\t\treturn option.label;\n\t\t} else if ( forTooltip ) {\n\t\t\tif ( option.value ) {\n\t\t\t\treturn t( 'Resize image to %0', option.value + this._resizeUnit );\n\t\t\t} else {\n\t\t\t\treturn t( 'Resize image to the original size' );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( option.value ) {\n\t\t\t\treturn option.value + this._resizeUnit;\n\t\t\t} else {\n\t\t\t\treturn t( 'Original' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A helper function that parses the resize options and returns list item definitions ready for use in the dropdown.\n\t *\n\t * @private\n\t * @param {Array.<module:image/imageresize/imageresizebuttons~ImageResizeOption>} options The resize options.\n\t * @param {module:image/imageresize/resizeimagecommand~ResizeImageCommand} command The resize image command.\n\t * @returns {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} Dropdown item definitions.\n\t */\n\t_getResizeDropdownListItemDefinitions( options, command ) {\n\t\tconst itemDefinitions = new Collection();\n\n\t\toptions.map( option => {\n\t\t\tconst optionValueWithUnit = option.value ? option.value + this._resizeUnit : null;\n\t\t\tconst definition = {\n\t\t\t\ttype: 'button',\n\t\t\t\tmodel: new Model( {\n\t\t\t\t\tcommandName: 'resizeImage',\n\t\t\t\t\tcommandValue: optionValueWithUnit,\n\t\t\t\t\tlabel: this._getOptionLabelValue( option ),\n\t\t\t\t\twithText: true,\n\t\t\t\t\ticon: null\n\t\t\t\t} )\n\t\t\t};\n\n\t\t\tdefinition.model.bind( 'isOn' ).to( command, 'value', getIsOnButtonCallback( optionValueWithUnit ) );\n\n\t\t\titemDefinitions.add( definition );\n\t\t} );\n\n\t\treturn itemDefinitions;\n\t}\n}\n\n// A helper function for setting the `isOn` state of buttons in value bindings.\nfunction getIsOnButtonCallback( value ) {\n\treturn commandValue => {\n\t\tif ( value === null && commandValue === value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn commandValue && commandValue.width === value;\n\t};\n}\n\n/**\n * The image resize option used in the {@link module:image/image~ImageConfig#resizeOptions image resize configuration}.\n *\n * @typedef {Object} module:image/imageresize/imageresizebuttons~ImageResizeOption\n * @property {String} name The name of the UI component that changes the image size.\n * * If you configure the feature using individual resize buttons, you can refer to this name in the\n * {@link module:image/image~ImageConfig#toolbar image toolbar configuration}.\n * * If you configure the feature using the resize dropdown, this name will be used for a list item in the dropdown.\n * @property {String} value The value of the resize option without the unit\n * ({@link module:image/image~ImageConfig#resizeUnit configured separately}). `null` resets an image to its original size.\n * @property {String} [icon] An icon used by an individual resize button (see the `name` property to learn more).\n * Available icons are: `'small'`, `'medium'`, `'large'`, `'original'`.\n * @property {String} [label] An option label displayed in the dropdown or, if the feature is configured using\n * individual buttons, a {@link module:ui/button/buttonview~ButtonView#tooltip} and an ARIA attribute of a button.\n * If not specified, the label is generated automatically based on the `value` option and the\n * {@link module:image/image~ImageConfig#resizeUnit `config.image.resizeUnit`}.\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}