{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/utils\n */\n\nimport { first } from 'ckeditor5/src/utils';\n\n/**\n * Creates a view element representing the inline image.\n *\n *\t\t<span class=\"image-inline\"><img></img></span>\n *\n * Note that `alt` and `src` attributes are converted separately, so they are not included.\n *\n * @protected\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\nexport function createInlineImageViewElement(writer) {\n  return writer.createContainerElement('span', {\n    class: 'image-inline'\n  }, writer.createEmptyElement('img'));\n}\n\n/**\n * Creates a view element representing the block image.\n *\n *\t\t<figure class=\"image\"><img></img></figure>\n *\n * Note that `alt` and `src` attributes are converted separately, so they are not included.\n *\n * @protected\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\nexport function createBlockImageViewElement(writer) {\n  return writer.createContainerElement('figure', {\n    class: 'image'\n  }, [writer.createEmptyElement('img'), writer.createSlot()]);\n}\n\n/**\n * A function returning a `MatcherPattern` for a particular type of View images.\n *\n * @protected\n * @param {module:core/editor/editor~Editor} editor\n * @param {'imageBlock'|'imageInline'} matchImageType The type of created image.\n * @returns {module:engine/view/matcher~MatcherPattern}\n */\nexport function getImgViewElementMatcher(editor, matchImageType) {\n  const imageUtils = editor.plugins.get('ImageUtils');\n  const areBothImagePluginsLoaded = editor.plugins.has('ImageInlineEditing') && editor.plugins.has('ImageBlockEditing');\n  return element => {\n    // Check if the matched view element is an <img>.\n    if (!imageUtils.isInlineImageView(element)) {\n      return null;\n    }\n\n    // If just one of the plugins is loaded (block or inline), it will match all kinds of images.\n    if (!areBothImagePluginsLoaded) {\n      return getPositiveMatchPattern(element);\n    }\n\n    // The <img> can be standalone, wrapped in <figure>...</figure> (ImageBlock plugin) or\n    // wrapped in <figure><a>...</a></figure> (LinkImage plugin).\n    const imageType = element.findAncestor(imageUtils.isBlockImageView) ? 'imageBlock' : 'imageInline';\n    if (imageType !== matchImageType) {\n      return null;\n    }\n    return getPositiveMatchPattern(element);\n  };\n  function getPositiveMatchPattern(element) {\n    const pattern = {\n      name: true\n    };\n\n    // This will trigger src consumption (See https://github.com/ckeditor/ckeditor5/issues/11530).\n    if (element.hasAttribute('src')) {\n      pattern.attributes = ['src'];\n    }\n    return pattern;\n  }\n}\n\n/**\n * Considering the current model selection, it returns the name of the model image element\n * (`'imageBlock'` or `'imageInline'`) that will make most sense from the UX perspective if a new\n * image was inserted (also: uploaded, dropped, pasted) at that selection.\n *\n * The assumption is that inserting images into empty blocks or on other block widgets should\n * produce block images. Inline images should be inserted in other cases, e.g. in paragraphs\n * that already contain some text.\n *\n * @protected\n * @param {module:engine/model/schema~Schema} schema\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * @returns {'imageBlock'|'imageInline'}\n */\nexport function determineImageTypeForInsertionAtSelection(schema, selection) {\n  const firstBlock = first(selection.getSelectedBlocks());\n\n  // Insert a block image if the selection is not in/on block elements or it's on a block widget.\n  if (!firstBlock || schema.isObject(firstBlock)) {\n    return 'imageBlock';\n  }\n\n  // A block image should also be inserted into an empty block element\n  // (that is not an empty list item so the list won't get split).\n  if (firstBlock.isEmpty && firstBlock.name != 'listItem') {\n    return 'imageBlock';\n  }\n\n  // Otherwise insert an inline image.\n  return 'imageInline';\n}","map":{"version":3,"names":["first","createInlineImageViewElement","writer","createContainerElement","class","createEmptyElement","createBlockImageViewElement","createSlot","getImgViewElementMatcher","editor","matchImageType","imageUtils","plugins","get","areBothImagePluginsLoaded","has","element","isInlineImageView","getPositiveMatchPattern","imageType","findAncestor","isBlockImageView","pattern","name","hasAttribute","attributes","determineImageTypeForInsertionAtSelection","schema","selection","firstBlock","getSelectedBlocks","isObject","isEmpty"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-image/src/image/utils.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/utils\n */\n\nimport { first } from 'ckeditor5/src/utils';\n\n/**\n * Creates a view element representing the inline image.\n *\n *\t\t<span class=\"image-inline\"><img></img></span>\n *\n * Note that `alt` and `src` attributes are converted separately, so they are not included.\n *\n * @protected\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\nexport function createInlineImageViewElement( writer ) {\n\treturn writer.createContainerElement( 'span', { class: 'image-inline' },\n\t\twriter.createEmptyElement( 'img' )\n\t);\n}\n\n/**\n * Creates a view element representing the block image.\n *\n *\t\t<figure class=\"image\"><img></img></figure>\n *\n * Note that `alt` and `src` attributes are converted separately, so they are not included.\n *\n * @protected\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\nexport function createBlockImageViewElement( writer ) {\n\treturn writer.createContainerElement( 'figure', { class: 'image' }, [\n\t\twriter.createEmptyElement( 'img' ),\n\t\twriter.createSlot()\n\t] );\n}\n\n/**\n * A function returning a `MatcherPattern` for a particular type of View images.\n *\n * @protected\n * @param {module:core/editor/editor~Editor} editor\n * @param {'imageBlock'|'imageInline'} matchImageType The type of created image.\n * @returns {module:engine/view/matcher~MatcherPattern}\n */\nexport function getImgViewElementMatcher( editor, matchImageType ) {\n\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\tconst areBothImagePluginsLoaded = editor.plugins.has( 'ImageInlineEditing' ) && editor.plugins.has( 'ImageBlockEditing' );\n\n\treturn element => {\n\t\t// Check if the matched view element is an <img>.\n\t\tif ( !imageUtils.isInlineImageView( element ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If just one of the plugins is loaded (block or inline), it will match all kinds of images.\n\t\tif ( !areBothImagePluginsLoaded ) {\n\t\t\treturn getPositiveMatchPattern( element );\n\t\t}\n\n\t\t// The <img> can be standalone, wrapped in <figure>...</figure> (ImageBlock plugin) or\n\t\t// wrapped in <figure><a>...</a></figure> (LinkImage plugin).\n\t\tconst imageType = element.findAncestor( imageUtils.isBlockImageView ) ? 'imageBlock' : 'imageInline';\n\n\t\tif ( imageType !== matchImageType ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn getPositiveMatchPattern( element );\n\t};\n\n\tfunction getPositiveMatchPattern( element ) {\n\t\tconst pattern = {\n\t\t\tname: true\n\t\t};\n\n\t\t// This will trigger src consumption (See https://github.com/ckeditor/ckeditor5/issues/11530).\n\t\tif ( element.hasAttribute( 'src' ) ) {\n\t\t\tpattern.attributes = [ 'src' ];\n\t\t}\n\n\t\treturn pattern;\n\t}\n}\n\n/**\n * Considering the current model selection, it returns the name of the model image element\n * (`'imageBlock'` or `'imageInline'`) that will make most sense from the UX perspective if a new\n * image was inserted (also: uploaded, dropped, pasted) at that selection.\n *\n * The assumption is that inserting images into empty blocks or on other block widgets should\n * produce block images. Inline images should be inserted in other cases, e.g. in paragraphs\n * that already contain some text.\n *\n * @protected\n * @param {module:engine/model/schema~Schema} schema\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * @returns {'imageBlock'|'imageInline'}\n */\nexport function determineImageTypeForInsertionAtSelection( schema, selection ) {\n\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t// Insert a block image if the selection is not in/on block elements or it's on a block widget.\n\tif ( !firstBlock || schema.isObject( firstBlock ) ) {\n\t\treturn 'imageBlock';\n\t}\n\n\t// A block image should also be inserted into an empty block element\n\t// (that is not an empty list item so the list won't get split).\n\tif ( firstBlock.isEmpty && firstBlock.name != 'listItem' ) {\n\t\treturn 'imageBlock';\n\t}\n\n\t// Otherwise insert an inline image.\n\treturn 'imageInline';\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASA,KAAK,QAAQ,qBAAqB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,4BAA4B,CAAEC,MAAM,EAAG;EACtD,OAAOA,MAAM,CAACC,sBAAsB,CAAE,MAAM,EAAE;IAAEC,KAAK,EAAE;EAAe,CAAC,EACtEF,MAAM,CAACG,kBAAkB,CAAE,KAAK,CAAE,CAClC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,2BAA2B,CAAEJ,MAAM,EAAG;EACrD,OAAOA,MAAM,CAACC,sBAAsB,CAAE,QAAQ,EAAE;IAAEC,KAAK,EAAE;EAAQ,CAAC,EAAE,CACnEF,MAAM,CAACG,kBAAkB,CAAE,KAAK,CAAE,EAClCH,MAAM,CAACK,UAAU,EAAE,CACnB,CAAE;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwB,CAAEC,MAAM,EAAEC,cAAc,EAAG;EAClE,MAAMC,UAAU,GAAGF,MAAM,CAACG,OAAO,CAACC,GAAG,CAAE,YAAY,CAAE;EACrD,MAAMC,yBAAyB,GAAGL,MAAM,CAACG,OAAO,CAACG,GAAG,CAAE,oBAAoB,CAAE,IAAIN,MAAM,CAACG,OAAO,CAACG,GAAG,CAAE,mBAAmB,CAAE;EAEzH,OAAOC,OAAO,IAAI;IACjB;IACA,IAAK,CAACL,UAAU,CAACM,iBAAiB,CAAED,OAAO,CAAE,EAAG;MAC/C,OAAO,IAAI;IACZ;;IAEA;IACA,IAAK,CAACF,yBAAyB,EAAG;MACjC,OAAOI,uBAAuB,CAAEF,OAAO,CAAE;IAC1C;;IAEA;IACA;IACA,MAAMG,SAAS,GAAGH,OAAO,CAACI,YAAY,CAAET,UAAU,CAACU,gBAAgB,CAAE,GAAG,YAAY,GAAG,aAAa;IAEpG,IAAKF,SAAS,KAAKT,cAAc,EAAG;MACnC,OAAO,IAAI;IACZ;IAEA,OAAOQ,uBAAuB,CAAEF,OAAO,CAAE;EAC1C,CAAC;EAED,SAASE,uBAAuB,CAAEF,OAAO,EAAG;IAC3C,MAAMM,OAAO,GAAG;MACfC,IAAI,EAAE;IACP,CAAC;;IAED;IACA,IAAKP,OAAO,CAACQ,YAAY,CAAE,KAAK,CAAE,EAAG;MACpCF,OAAO,CAACG,UAAU,GAAG,CAAE,KAAK,CAAE;IAC/B;IAEA,OAAOH,OAAO;EACf;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,yCAAyC,CAAEC,MAAM,EAAEC,SAAS,EAAG;EAC9E,MAAMC,UAAU,GAAG7B,KAAK,CAAE4B,SAAS,CAACE,iBAAiB,EAAE,CAAE;;EAEzD;EACA,IAAK,CAACD,UAAU,IAAIF,MAAM,CAACI,QAAQ,CAAEF,UAAU,CAAE,EAAG;IACnD,OAAO,YAAY;EACpB;;EAEA;EACA;EACA,IAAKA,UAAU,CAACG,OAAO,IAAIH,UAAU,CAACN,IAAI,IAAI,UAAU,EAAG;IAC1D,OAAO,YAAY;EACpB;;EAEA;EACA,OAAO,aAAa;AACrB"},"metadata":{},"sourceType":"module"}