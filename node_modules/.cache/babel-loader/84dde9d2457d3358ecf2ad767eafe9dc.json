{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* global setTimeout, clearTimeout */\n/* eslint-disable new-cap */\n/**\n * @module utils/focustracker\n */\nimport DomEmitterMixin from './dom/emittermixin';\nimport { Observable } from './observablemixin';\nimport CKEditorError from './ckeditorerror';\n/**\n * Allows observing a group of `Element`s whether at least one of them is focused.\n *\n * Used by the {@link module:core/editor/editor~Editor} in order to track whether the focus is still within the application,\n * or were used outside of its UI.\n *\n * **Note** `focus` and `blur` listeners use event capturing, so it is only needed to register wrapper `Element`\n * which contain other `focusable` elements. But note that this wrapper element has to be focusable too\n * (have e.g. `tabindex=\"-1\"`).\n *\n * Check out the {@glink framework/guides/deep-dive/ui/focus-tracking \"Deep dive into focus tracking\" guide} to learn more.\n *\n * @mixes module:utils/dom/emittermixin~EmitterMixin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class FocusTracker extends DomEmitterMixin(Observable) {\n  constructor() {\n    super();\n    this.set('isFocused', false);\n    this.set('focusedElement', null);\n    this._elements = new Set();\n    this._nextEventLoopTimeout = null;\n  }\n  /**\n   * Starts tracking the specified element.\n   *\n   * @param {Element} element\n   */\n  add(element) {\n    if (this._elements.has(element)) {\n      /**\n       * This element is already tracked by {@link module:utils/focustracker~FocusTracker}.\n       *\n       * @error focustracker-add-element-already-exist\n       */\n      throw new CKEditorError('focustracker-add-element-already-exist', this);\n    }\n    this.listenTo(element, 'focus', () => this._focus(element), {\n      useCapture: true\n    });\n    this.listenTo(element, 'blur', () => this._blur(), {\n      useCapture: true\n    });\n    this._elements.add(element);\n  }\n  /**\n   * Stops tracking the specified element and stops listening on this element.\n   *\n   * @param {Element} element\n   */\n  remove(element) {\n    if (element === this.focusedElement) {\n      this._blur();\n    }\n    if (this._elements.has(element)) {\n      this.stopListening(element);\n      this._elements.delete(element);\n    }\n  }\n  /**\n   * Destroys the focus tracker by:\n   * - Disabling all event listeners attached to tracked elements.\n   * - Removing all tracked elements that were previously added.\n   */\n  destroy() {\n    this.stopListening();\n  }\n  /**\n   * Stores currently focused element and set {#isFocused} as `true`.\n   *\n   * @private\n   * @param {Element} element Element which has been focused.\n   */\n  _focus(element) {\n    clearTimeout(this._nextEventLoopTimeout);\n    this.focusedElement = element;\n    this.isFocused = true;\n  }\n  /**\n   * Clears currently focused element and set {@link #isFocused} as `false`.\n   * This method uses `setTimeout` to change order of fires `blur` and `focus` events.\n   *\n   * @private\n   * @fires blur\n   */\n  _blur() {\n    clearTimeout(this._nextEventLoopTimeout);\n    this._nextEventLoopTimeout = setTimeout(() => {\n      this.focusedElement = null;\n      this.isFocused = false;\n    }, 0);\n  }\n}","map":{"version":3,"names":["DomEmitterMixin","Observable","CKEditorError","FocusTracker","constructor","set","_elements","Set","_nextEventLoopTimeout","add","element","has","listenTo","_focus","useCapture","_blur","remove","focusedElement","stopListening","delete","destroy","clearTimeout","isFocused","setTimeout"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/focustracker.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* global setTimeout, clearTimeout */\n/* eslint-disable new-cap */\n/**\n * @module utils/focustracker\n */\nimport DomEmitterMixin from './dom/emittermixin';\nimport { Observable } from './observablemixin';\nimport CKEditorError from './ckeditorerror';\n/**\n * Allows observing a group of `Element`s whether at least one of them is focused.\n *\n * Used by the {@link module:core/editor/editor~Editor} in order to track whether the focus is still within the application,\n * or were used outside of its UI.\n *\n * **Note** `focus` and `blur` listeners use event capturing, so it is only needed to register wrapper `Element`\n * which contain other `focusable` elements. But note that this wrapper element has to be focusable too\n * (have e.g. `tabindex=\"-1\"`).\n *\n * Check out the {@glink framework/guides/deep-dive/ui/focus-tracking \"Deep dive into focus tracking\" guide} to learn more.\n *\n * @mixes module:utils/dom/emittermixin~EmitterMixin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class FocusTracker extends DomEmitterMixin(Observable) {\n    constructor() {\n        super();\n        this.set('isFocused', false);\n        this.set('focusedElement', null);\n        this._elements = new Set();\n        this._nextEventLoopTimeout = null;\n    }\n    /**\n     * Starts tracking the specified element.\n     *\n     * @param {Element} element\n     */\n    add(element) {\n        if (this._elements.has(element)) {\n            /**\n             * This element is already tracked by {@link module:utils/focustracker~FocusTracker}.\n             *\n             * @error focustracker-add-element-already-exist\n             */\n            throw new CKEditorError('focustracker-add-element-already-exist', this);\n        }\n        this.listenTo(element, 'focus', () => this._focus(element), { useCapture: true });\n        this.listenTo(element, 'blur', () => this._blur(), { useCapture: true });\n        this._elements.add(element);\n    }\n    /**\n     * Stops tracking the specified element and stops listening on this element.\n     *\n     * @param {Element} element\n     */\n    remove(element) {\n        if (element === this.focusedElement) {\n            this._blur();\n        }\n        if (this._elements.has(element)) {\n            this.stopListening(element);\n            this._elements.delete(element);\n        }\n    }\n    /**\n     * Destroys the focus tracker by:\n     * - Disabling all event listeners attached to tracked elements.\n     * - Removing all tracked elements that were previously added.\n     */\n    destroy() {\n        this.stopListening();\n    }\n    /**\n     * Stores currently focused element and set {#isFocused} as `true`.\n     *\n     * @private\n     * @param {Element} element Element which has been focused.\n     */\n    _focus(element) {\n        clearTimeout(this._nextEventLoopTimeout);\n        this.focusedElement = element;\n        this.isFocused = true;\n    }\n    /**\n     * Clears currently focused element and set {@link #isFocused} as `false`.\n     * This method uses `setTimeout` to change order of fires `blur` and `focus` events.\n     *\n     * @private\n     * @fires blur\n     */\n    _blur() {\n        clearTimeout(this._nextEventLoopTimeout);\n        this._nextEventLoopTimeout = setTimeout(() => {\n            this.focusedElement = null;\n            this.isFocused = false;\n        }, 0);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,eAAe,MAAM,oBAAoB;AAChD,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,YAAY,SAASH,eAAe,CAACC,UAAU,CAAC,CAAC;EAClEG,WAAW,GAAG;IACV,KAAK,EAAE;IACP,IAAI,CAACC,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC;IAC5B,IAAI,CAACA,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC;IAChC,IAAI,CAACC,SAAS,GAAG,IAAIC,GAAG,EAAE;IAC1B,IAAI,CAACC,qBAAqB,GAAG,IAAI;EACrC;EACA;AACJ;AACA;AACA;AACA;EACIC,GAAG,CAACC,OAAO,EAAE;IACT,IAAI,IAAI,CAACJ,SAAS,CAACK,GAAG,CAACD,OAAO,CAAC,EAAE;MAC7B;AACZ;AACA;AACA;AACA;MACY,MAAM,IAAIR,aAAa,CAAC,wCAAwC,EAAE,IAAI,CAAC;IAC3E;IACA,IAAI,CAACU,QAAQ,CAACF,OAAO,EAAE,OAAO,EAAE,MAAM,IAAI,CAACG,MAAM,CAACH,OAAO,CAAC,EAAE;MAAEI,UAAU,EAAE;IAAK,CAAC,CAAC;IACjF,IAAI,CAACF,QAAQ,CAACF,OAAO,EAAE,MAAM,EAAE,MAAM,IAAI,CAACK,KAAK,EAAE,EAAE;MAAED,UAAU,EAAE;IAAK,CAAC,CAAC;IACxE,IAAI,CAACR,SAAS,CAACG,GAAG,CAACC,OAAO,CAAC;EAC/B;EACA;AACJ;AACA;AACA;AACA;EACIM,MAAM,CAACN,OAAO,EAAE;IACZ,IAAIA,OAAO,KAAK,IAAI,CAACO,cAAc,EAAE;MACjC,IAAI,CAACF,KAAK,EAAE;IAChB;IACA,IAAI,IAAI,CAACT,SAAS,CAACK,GAAG,CAACD,OAAO,CAAC,EAAE;MAC7B,IAAI,CAACQ,aAAa,CAACR,OAAO,CAAC;MAC3B,IAAI,CAACJ,SAAS,CAACa,MAAM,CAACT,OAAO,CAAC;IAClC;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIU,OAAO,GAAG;IACN,IAAI,CAACF,aAAa,EAAE;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIL,MAAM,CAACH,OAAO,EAAE;IACZW,YAAY,CAAC,IAAI,CAACb,qBAAqB,CAAC;IACxC,IAAI,CAACS,cAAc,GAAGP,OAAO;IAC7B,IAAI,CAACY,SAAS,GAAG,IAAI;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIP,KAAK,GAAG;IACJM,YAAY,CAAC,IAAI,CAACb,qBAAqB,CAAC;IACxC,IAAI,CAACA,qBAAqB,GAAGe,UAAU,CAAC,MAAM;MAC1C,IAAI,CAACN,cAAc,GAAG,IAAI;MAC1B,IAAI,CAACK,SAAS,GAAG,KAAK;IAC1B,CAAC,EAAE,CAAC,CAAC;EACT;AACJ"},"metadata":{},"sourceType":"module"}