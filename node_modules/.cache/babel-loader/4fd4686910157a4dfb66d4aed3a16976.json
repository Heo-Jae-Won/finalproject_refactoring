{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module module:engine/view/upcastwriter\n */\nimport DocumentFragment from './documentfragment';\nimport Element from './element';\nimport Text from './text';\nimport { isPlainObject } from 'lodash-es';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n/**\n * View upcast writer. It provides a set of methods used to manipulate non-semantic view trees.\n *\n * It should be used only while working on a non-semantic view\n * (e.g. a view created from HTML string on paste).\n * To manipulate a view which was or is being downcasted from the the model use the\n * {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n *\n * Unlike `DowncastWriter`, which is available in the {@link module:engine/view/view~View#change `View#change()`} block,\n * `UpcastWriter` can be created wherever you need it:\n *\n *\t\tconst writer = new UpcastWriter( viewDocument );\n *\t\tconst text = writer.createText( 'foo!' );\n *\n *\t\twriter.appendChild( text, someViewElement );\n */\nexport default class UpcastWriter {\n  /**\n   * @param {module:engine/view/document~Document} document The view document instance in which this upcast writer operates.\n   */\n  constructor(document) {\n    /**\n     * The view document instance in which this upcast writer operates.\n     *\n     * @readonly\n     * @type {module:engine/view/document~Document}\n     */\n    this.document = document;\n  }\n  /**\n   * Creates a new {@link module:engine/view/documentfragment~DocumentFragment} instance.\n   *\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into the created document fragment.\n   * @returns {module:engine/view/documentfragment~DocumentFragment} The created document fragment.\n   */\n  createDocumentFragment(children) {\n    return new DocumentFragment(this.document, children);\n  }\n  /**\n   * Creates a new {@link module:engine/view/element~Element} instance.\n   *\n   * Attributes can be passed in various formats:\n   *\n   *\t\tupcastWriter.createElement( 'div', { class: 'editor', contentEditable: 'true' } ); // object\n   *\t\tupcastWriter.createElement( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n   *\t\tupcastWriter.createElement( 'div', mapOfAttributes ); // map\n   *\n   * @param {String} name Node name.\n   * @param {Object|Iterable} [attrs] Collection of attributes.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into created element.\n   * @returns {module:engine/view/element~Element} Created element.\n   */\n  createElement(name, attrs, children) {\n    return new Element(this.document, name, attrs, children);\n  }\n  /**\n   * Creates a new {@link module:engine/view/text~Text} instance.\n   *\n   * @param {String} data The text's data.\n   * @returns {module:engine/view/text~Text} The created text node.\n   */\n  createText(data) {\n    return new Text(this.document, data);\n  }\n  /**\n   * Clones the provided element.\n   *\n   * @see module:engine/view/element~Element#_clone\n   * @param {module:engine/view/element~Element} element Element to be cloned.\n   * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n   * element will be cloned without any children.\n   * @returns {module:engine/view/element~Element} Clone of this element.\n   */\n  clone(element) {\n    let deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return element._clone(deep);\n  }\n  /**\n   * Appends a child node or a list of child nodes at the end of this node\n   * and sets the parent of these nodes to this element.\n   *\n   * @see module:engine/view/element~Element#_appendChild\n   * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n   * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n   * to which items will be appended.\n   * @fires module:engine/view/node~Node#event:change\n   * @returns {Number} Number of appended nodes.\n   */\n  appendChild(items, element) {\n    return element._appendChild(items);\n  }\n  /**\n   * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n   * this element.\n   *\n   * @see module:engine/view/element~Element#_insertChild\n   * @param {Number} index Offset at which nodes should be inserted.\n   * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n   * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n   * to which items will be inserted.\n   * @fires module:engine/view/node~Node#event:change\n   * @returns {Number} Number of inserted nodes.\n   */\n  insertChild(index, items, element) {\n    return element._insertChild(index, items);\n  }\n  /**\n   * Removes the given number of child nodes starting at the given index and set the parent of these nodes to `null`.\n   *\n   * @see module:engine/view/element~Element#_removeChildren\n   * @param {Number} index Offset from which nodes will be removed.\n   * @param {Number} howMany Number of nodes to remove.\n   * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n   * which children will be removed.\n   * @fires module:engine/view/node~Node#event:change\n   * @returns {Array.<module:engine/view/node~Node>} The array containing removed nodes.\n   */\n  removeChildren(index, howMany, element) {\n    return element._removeChildren(index, howMany);\n  }\n  /**\n   * Removes given element from the view structure. Will not have effect on detached elements.\n   *\n   * @param {module:engine/view/element~Element} element Element which will be removed.\n   * @returns {Array.<module:engine/view/node~Node>} The array containing removed nodes.\n   */\n  remove(element) {\n    const parent = element.parent;\n    if (parent) {\n      return this.removeChildren(parent.getChildIndex(element), 1, parent);\n    }\n    return [];\n  }\n  /**\n   * Replaces given element with the new one in the view structure. Will not have effect on detached elements.\n   *\n   * @param {module:engine/view/element~Element} oldElement Element which will be replaced.\n   * @param {module:engine/view/element~Element} newElement Element which will be inserted in the place of the old element.\n   * @returns {Boolean} Whether old element was successfully replaced.\n   */\n  replace(oldElement, newElement) {\n    const parent = oldElement.parent;\n    if (parent) {\n      const index = parent.getChildIndex(oldElement);\n      this.removeChildren(index, 1, parent);\n      this.insertChild(index, newElement, parent);\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Removes given element from view structure and places its children in its position.\n   * It does nothing if element has no parent.\n   *\n   * @param {module:engine/view/element~Element} element Element to unwrap.\n   */\n  unwrapElement(element) {\n    const parent = element.parent;\n    if (parent) {\n      const index = parent.getChildIndex(element);\n      this.remove(element);\n      this.insertChild(index, element.getChildren(), parent);\n    }\n  }\n  /**\n   * Renames element by creating a copy of a given element but with its name changed and then moving contents of the\n   * old element to the new one.\n   *\n   * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n   *\n   * @param {String} newName New element name.\n   * @param {module:engine/view/element~Element} element Element to be renamed.\n   * @returns {module:engine/view/element~Element|null} New element or null if the old element\n   * was not replaced (happens for detached elements).\n   */\n  rename(newName, element) {\n    const newElement = new Element(this.document, newName, element.getAttributes(), element.getChildren());\n    return this.replace(element, newElement) ? newElement : null;\n  }\n  /**\n   * Adds or overwrites element's attribute with a specified key and value.\n   *\n   *\t\twriter.setAttribute( 'href', 'http://ckeditor.com', linkElement );\n   *\n   * @see module:engine/view/element~Element#_setAttribute\n   * @param {String} key Attribute key.\n   * @param {String} value Attribute value.\n   * @param {module:engine/view/element~Element} element Element for which attribute will be set.\n   */\n  setAttribute(key, value, element) {\n    element._setAttribute(key, value);\n  }\n  /**\n   * Removes attribute from the element.\n   *\n   *\t\twriter.removeAttribute( 'href', linkElement );\n   *\n   * @see module:engine/view/element~Element#_removeAttribute\n   * @param {String} key Attribute key.\n   * @param {module:engine/view/element~Element} element Element from which attribute will be removed.\n   */\n  removeAttribute(key, element) {\n    element._removeAttribute(key);\n  }\n  /**\n   * Adds specified class to the element.\n   *\n   *\t\twriter.addClass( 'foo', linkElement );\n   *\t\twriter.addClass( [ 'foo', 'bar' ], linkElement );\n   *\n   * @see module:engine/view/element~Element#_addClass\n   * @param {Array.<String>|String} className Single class name or array of class names which will be added.\n   * @param {module:engine/view/element~Element} element Element for which class will be added.\n   */\n  addClass(className, element) {\n    element._addClass(className);\n  }\n  /**\n   * Removes specified class from the element.\n   *\n   *\t\twriter.removeClass( 'foo', linkElement );\n   *\t\twriter.removeClass( [ 'foo', 'bar' ], linkElement );\n   *\n   * @see module:engine/view/element~Element#_removeClass\n   * @param {Array.<String>|String} className Single class name or array of class names which will be removed.\n   * @param {module:engine/view/element~Element} element Element from which class will be removed.\n   */\n  removeClass(className, element) {\n    element._removeClass(className);\n  }\n  setStyle(property, valueOrElement, element) {\n    if (isPlainObject(property) && element === undefined) {\n      valueOrElement._setStyle(property);\n    } else {\n      element._setStyle(property, valueOrElement);\n    }\n  }\n  /**\n   * Removes specified style from the element.\n   *\n   *\t\twriter.removeStyle( 'color', element );  // Removes 'color' style.\n   *\t\twriter.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\n   *\n   * **Note**: This method can work with normalized style names if\n   * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n   * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.\n   *\n   * @see module:engine/view/element~Element#_removeStyle\n   * @param {Array.<String>|String} property Style property name or names to be removed.\n   * @param {module:engine/view/element~Element} element Element from which style will be removed.\n   */\n  removeStyle(property, element) {\n    element._removeStyle(property);\n  }\n  /**\n   * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n   * so they can be used to add special data to elements.\n   *\n   * @see module:engine/view/element~Element#_setCustomProperty\n   * @param {String|Symbol} key Custom property name/key.\n   * @param {*} value Custom property value to be stored.\n   * @param {module:engine/view/element~Element} element Element for which custom property will be set.\n   */\n  setCustomProperty(key, value, element) {\n    element._setCustomProperty(key, value);\n  }\n  /**\n   * Removes a custom property stored under the given key.\n   *\n   * @see module:engine/view/element~Element#_removeCustomProperty\n   * @param {String|Symbol} key Name/key of the custom property to be removed.\n   * @param {module:engine/view/element~Element} element Element from which the custom property will be removed.\n   * @returns {Boolean} Returns true if property was removed.\n   */\n  removeCustomProperty(key, element) {\n    return element._removeCustomProperty(key);\n  }\n  /**\n   * Creates position at the given location. The location can be specified as:\n   *\n   * * a {@link module:engine/view/position~Position position},\n   * * parent element and offset (offset defaults to `0`),\n   * * parent element and `'end'` (sets position at the end of that element),\n   * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n   *\n   * This method is a shortcut to other constructors such as:\n   *\n   * * {@link #createPositionBefore},\n   * * {@link #createPositionAfter},\n   *\n   * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/view/item~Item view item}.\n   * @returns {module:engine/view/position~Position}\n   */\n  createPositionAt(itemOrPosition, offset) {\n    return Position._createAt(itemOrPosition, offset);\n  }\n  /**\n   * Creates a new position after given view item.\n   *\n   * @param {module:engine/view/item~Item} item View item after which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n  createPositionAfter(item) {\n    return Position._createAfter(item);\n  }\n  /**\n   * Creates a new position before given view item.\n   *\n   * @param {module:engine/view/item~Item} item View item before which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n  createPositionBefore(item) {\n    return Position._createBefore(item);\n  }\n  /**\n   * Creates a range spanning from `start` position to `end` position.\n   *\n   * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n   *\n   * @param {module:engine/view/position~Position} start Start position.\n   * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n   * @returns {module:engine/view/range~Range}\n   */\n  createRange(start, end) {\n    return new Range(start, end);\n  }\n  /**\n   * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n   *\n   * @param {module:engine/view/item~Item} item\n   * @returns {module:engine/view/range~Range}\n   */\n  createRangeOn(item) {\n    return Range._createOn(item);\n  }\n  /**\n   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n   * that element and ends after the last child of that element.\n   *\n   * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n   * @returns {module:engine/view/range~Range}\n   */\n  createRangeIn(element) {\n    return Range._createIn(element);\n  }\n  /**\n   * Creates a new {@link module:engine/view/selection~Selection} instance.\n   *\n   * \t\t// Creates empty selection without ranges.\n   *\t\tconst selection = writer.createSelection();\n   *\n   *\t\t// Creates selection at the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\tconst selection = writer.createSelection( range );\n   *\n   *\t\t// Creates selection at the given ranges\n   * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n   *\t\tconst selection = writer.createSelection( ranges );\n   *\n   *\t\t// Creates selection from the other selection.\n   *\t\tconst otherSelection = writer.createSelection();\n   *\t\tconst selection = writer.createSelection( otherSelection );\n   *\n   *\t\t// Creates selection from the document selection.\n   *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n   *\n   * \t\t// Creates selection at the given position.\n   *\t\tconst position = writer.createPositionFromPath( root, path );\n   *\t\tconst selection = writer.createSelection( position );\n   *\n   *\t\t// Creates collapsed selection at the position of given item and offset.\n   *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n   *\t\tconst selection = writer.createSelection( paragraph, offset );\n   *\n   *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n   *\t\t// first child of that element and ends after the last child of that element.\n   *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n   *\n   *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n   *\t\t// just after the item.\n   *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n   *\n   * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n   *\n   *\t\t// Creates backward selection.\n   *\t\tconst selection = writer.createSelection( range, { backward: true } );\n   *\n   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n   * represented in other way, for example by applying proper CSS class.\n   *\n   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n   * (and be  properly handled by screen readers).\n   *\n   *\t\t// Creates fake selection with label.\n   *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n   *\n   * @param {module:engine/view/selection~Selectable} [selectable=null]\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n   * @param {String} [options.label] Label for the fake selection.\n   * @returns {module:engine/view/selection~Selection}\n   */\n  createSelection() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new Selection(...args);\n  }\n}","map":{"version":3,"names":["DocumentFragment","Element","Text","isPlainObject","Position","Range","Selection","UpcastWriter","constructor","document","createDocumentFragment","children","createElement","name","attrs","createText","data","clone","element","deep","_clone","appendChild","items","_appendChild","insertChild","index","_insertChild","removeChildren","howMany","_removeChildren","remove","parent","getChildIndex","replace","oldElement","newElement","unwrapElement","getChildren","rename","newName","getAttributes","setAttribute","key","value","_setAttribute","removeAttribute","_removeAttribute","addClass","className","_addClass","removeClass","_removeClass","setStyle","property","valueOrElement","undefined","_setStyle","removeStyle","_removeStyle","setCustomProperty","_setCustomProperty","removeCustomProperty","_removeCustomProperty","createPositionAt","itemOrPosition","offset","_createAt","createPositionAfter","item","_createAfter","createPositionBefore","_createBefore","createRange","start","end","createRangeOn","_createOn","createRangeIn","_createIn","createSelection","args"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/upcastwriter.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module module:engine/view/upcastwriter\n */\nimport DocumentFragment from './documentfragment';\nimport Element from './element';\nimport Text from './text';\nimport { isPlainObject } from 'lodash-es';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n/**\n * View upcast writer. It provides a set of methods used to manipulate non-semantic view trees.\n *\n * It should be used only while working on a non-semantic view\n * (e.g. a view created from HTML string on paste).\n * To manipulate a view which was or is being downcasted from the the model use the\n * {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n *\n * Unlike `DowncastWriter`, which is available in the {@link module:engine/view/view~View#change `View#change()`} block,\n * `UpcastWriter` can be created wherever you need it:\n *\n *\t\tconst writer = new UpcastWriter( viewDocument );\n *\t\tconst text = writer.createText( 'foo!' );\n *\n *\t\twriter.appendChild( text, someViewElement );\n */\nexport default class UpcastWriter {\n    /**\n     * @param {module:engine/view/document~Document} document The view document instance in which this upcast writer operates.\n     */\n    constructor(document) {\n        /**\n         * The view document instance in which this upcast writer operates.\n         *\n         * @readonly\n         * @type {module:engine/view/document~Document}\n         */\n        this.document = document;\n    }\n    /**\n     * Creates a new {@link module:engine/view/documentfragment~DocumentFragment} instance.\n     *\n     * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n     * A list of nodes to be inserted into the created document fragment.\n     * @returns {module:engine/view/documentfragment~DocumentFragment} The created document fragment.\n     */\n    createDocumentFragment(children) {\n        return new DocumentFragment(this.document, children);\n    }\n    /**\n     * Creates a new {@link module:engine/view/element~Element} instance.\n     *\n     * Attributes can be passed in various formats:\n     *\n     *\t\tupcastWriter.createElement( 'div', { class: 'editor', contentEditable: 'true' } ); // object\n     *\t\tupcastWriter.createElement( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n     *\t\tupcastWriter.createElement( 'div', mapOfAttributes ); // map\n     *\n     * @param {String} name Node name.\n     * @param {Object|Iterable} [attrs] Collection of attributes.\n     * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n     * A list of nodes to be inserted into created element.\n     * @returns {module:engine/view/element~Element} Created element.\n     */\n    createElement(name, attrs, children) {\n        return new Element(this.document, name, attrs, children);\n    }\n    /**\n     * Creates a new {@link module:engine/view/text~Text} instance.\n     *\n     * @param {String} data The text's data.\n     * @returns {module:engine/view/text~Text} The created text node.\n     */\n    createText(data) {\n        return new Text(this.document, data);\n    }\n    /**\n     * Clones the provided element.\n     *\n     * @see module:engine/view/element~Element#_clone\n     * @param {module:engine/view/element~Element} element Element to be cloned.\n     * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n     * element will be cloned without any children.\n     * @returns {module:engine/view/element~Element} Clone of this element.\n     */\n    clone(element, deep = false) {\n        return element._clone(deep);\n    }\n    /**\n     * Appends a child node or a list of child nodes at the end of this node\n     * and sets the parent of these nodes to this element.\n     *\n     * @see module:engine/view/element~Element#_appendChild\n     * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n     * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n     * to which items will be appended.\n     * @fires module:engine/view/node~Node#event:change\n     * @returns {Number} Number of appended nodes.\n     */\n    appendChild(items, element) {\n        return element._appendChild(items);\n    }\n    /**\n     * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n     * this element.\n     *\n     * @see module:engine/view/element~Element#_insertChild\n     * @param {Number} index Offset at which nodes should be inserted.\n     * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n     * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n     * to which items will be inserted.\n     * @fires module:engine/view/node~Node#event:change\n     * @returns {Number} Number of inserted nodes.\n     */\n    insertChild(index, items, element) {\n        return element._insertChild(index, items);\n    }\n    /**\n     * Removes the given number of child nodes starting at the given index and set the parent of these nodes to `null`.\n     *\n     * @see module:engine/view/element~Element#_removeChildren\n     * @param {Number} index Offset from which nodes will be removed.\n     * @param {Number} howMany Number of nodes to remove.\n     * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n     * which children will be removed.\n     * @fires module:engine/view/node~Node#event:change\n     * @returns {Array.<module:engine/view/node~Node>} The array containing removed nodes.\n     */\n    removeChildren(index, howMany, element) {\n        return element._removeChildren(index, howMany);\n    }\n    /**\n     * Removes given element from the view structure. Will not have effect on detached elements.\n     *\n     * @param {module:engine/view/element~Element} element Element which will be removed.\n     * @returns {Array.<module:engine/view/node~Node>} The array containing removed nodes.\n     */\n    remove(element) {\n        const parent = element.parent;\n        if (parent) {\n            return this.removeChildren(parent.getChildIndex(element), 1, parent);\n        }\n        return [];\n    }\n    /**\n     * Replaces given element with the new one in the view structure. Will not have effect on detached elements.\n     *\n     * @param {module:engine/view/element~Element} oldElement Element which will be replaced.\n     * @param {module:engine/view/element~Element} newElement Element which will be inserted in the place of the old element.\n     * @returns {Boolean} Whether old element was successfully replaced.\n     */\n    replace(oldElement, newElement) {\n        const parent = oldElement.parent;\n        if (parent) {\n            const index = parent.getChildIndex(oldElement);\n            this.removeChildren(index, 1, parent);\n            this.insertChild(index, newElement, parent);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Removes given element from view structure and places its children in its position.\n     * It does nothing if element has no parent.\n     *\n     * @param {module:engine/view/element~Element} element Element to unwrap.\n     */\n    unwrapElement(element) {\n        const parent = element.parent;\n        if (parent) {\n            const index = parent.getChildIndex(element);\n            this.remove(element);\n            this.insertChild(index, element.getChildren(), parent);\n        }\n    }\n    /**\n     * Renames element by creating a copy of a given element but with its name changed and then moving contents of the\n     * old element to the new one.\n     *\n     * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n     *\n     * @param {String} newName New element name.\n     * @param {module:engine/view/element~Element} element Element to be renamed.\n     * @returns {module:engine/view/element~Element|null} New element or null if the old element\n     * was not replaced (happens for detached elements).\n     */\n    rename(newName, element) {\n        const newElement = new Element(this.document, newName, element.getAttributes(), element.getChildren());\n        return this.replace(element, newElement) ? newElement : null;\n    }\n    /**\n     * Adds or overwrites element's attribute with a specified key and value.\n     *\n     *\t\twriter.setAttribute( 'href', 'http://ckeditor.com', linkElement );\n     *\n     * @see module:engine/view/element~Element#_setAttribute\n     * @param {String} key Attribute key.\n     * @param {String} value Attribute value.\n     * @param {module:engine/view/element~Element} element Element for which attribute will be set.\n     */\n    setAttribute(key, value, element) {\n        element._setAttribute(key, value);\n    }\n    /**\n     * Removes attribute from the element.\n     *\n     *\t\twriter.removeAttribute( 'href', linkElement );\n     *\n     * @see module:engine/view/element~Element#_removeAttribute\n     * @param {String} key Attribute key.\n     * @param {module:engine/view/element~Element} element Element from which attribute will be removed.\n     */\n    removeAttribute(key, element) {\n        element._removeAttribute(key);\n    }\n    /**\n     * Adds specified class to the element.\n     *\n     *\t\twriter.addClass( 'foo', linkElement );\n     *\t\twriter.addClass( [ 'foo', 'bar' ], linkElement );\n     *\n     * @see module:engine/view/element~Element#_addClass\n     * @param {Array.<String>|String} className Single class name or array of class names which will be added.\n     * @param {module:engine/view/element~Element} element Element for which class will be added.\n     */\n    addClass(className, element) {\n        element._addClass(className);\n    }\n    /**\n     * Removes specified class from the element.\n     *\n     *\t\twriter.removeClass( 'foo', linkElement );\n     *\t\twriter.removeClass( [ 'foo', 'bar' ], linkElement );\n     *\n     * @see module:engine/view/element~Element#_removeClass\n     * @param {Array.<String>|String} className Single class name or array of class names which will be removed.\n     * @param {module:engine/view/element~Element} element Element from which class will be removed.\n     */\n    removeClass(className, element) {\n        element._removeClass(className);\n    }\n    setStyle(property, valueOrElement, element) {\n        if (isPlainObject(property) && element === undefined) {\n            valueOrElement._setStyle(property);\n        }\n        else {\n            element._setStyle(property, valueOrElement);\n        }\n    }\n    /**\n     * Removes specified style from the element.\n     *\n     *\t\twriter.removeStyle( 'color', element );  // Removes 'color' style.\n     *\t\twriter.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\n     *\n     * **Note**: This method can work with normalized style names if\n     * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n     * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.\n     *\n     * @see module:engine/view/element~Element#_removeStyle\n     * @param {Array.<String>|String} property Style property name or names to be removed.\n     * @param {module:engine/view/element~Element} element Element from which style will be removed.\n     */\n    removeStyle(property, element) {\n        element._removeStyle(property);\n    }\n    /**\n     * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n     * so they can be used to add special data to elements.\n     *\n     * @see module:engine/view/element~Element#_setCustomProperty\n     * @param {String|Symbol} key Custom property name/key.\n     * @param {*} value Custom property value to be stored.\n     * @param {module:engine/view/element~Element} element Element for which custom property will be set.\n     */\n    setCustomProperty(key, value, element) {\n        element._setCustomProperty(key, value);\n    }\n    /**\n     * Removes a custom property stored under the given key.\n     *\n     * @see module:engine/view/element~Element#_removeCustomProperty\n     * @param {String|Symbol} key Name/key of the custom property to be removed.\n     * @param {module:engine/view/element~Element} element Element from which the custom property will be removed.\n     * @returns {Boolean} Returns true if property was removed.\n     */\n    removeCustomProperty(key, element) {\n        return element._removeCustomProperty(key);\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/view/position~Position position},\n     * * parent element and offset (offset defaults to `0`),\n     * * parent element and `'end'` (sets position at the end of that element),\n     * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n     *\n     * This method is a shortcut to other constructors such as:\n     *\n     * * {@link #createPositionBefore},\n     * * {@link #createPositionAfter},\n     *\n     * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n     * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n     * first parameter is a {@link module:engine/view/item~Item view item}.\n     * @returns {module:engine/view/position~Position}\n     */\n    createPositionAt(itemOrPosition, offset) {\n        return Position._createAt(itemOrPosition, offset);\n    }\n    /**\n     * Creates a new position after given view item.\n     *\n     * @param {module:engine/view/item~Item} item View item after which the position should be located.\n     * @returns {module:engine/view/position~Position}\n     */\n    createPositionAfter(item) {\n        return Position._createAfter(item);\n    }\n    /**\n     * Creates a new position before given view item.\n     *\n     * @param {module:engine/view/item~Item} item View item before which the position should be located.\n     * @returns {module:engine/view/position~Position}\n     */\n    createPositionBefore(item) {\n        return Position._createBefore(item);\n    }\n    /**\n     * Creates a range spanning from `start` position to `end` position.\n     *\n     * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n     *\n     * @param {module:engine/view/position~Position} start Start position.\n     * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n     * @returns {module:engine/view/range~Range}\n     */\n    createRange(start, end) {\n        return new Range(start, end);\n    }\n    /**\n     * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n     *\n     * @param {module:engine/view/item~Item} item\n     * @returns {module:engine/view/range~Range}\n     */\n    createRangeOn(item) {\n        return Range._createOn(item);\n    }\n    /**\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n     * @returns {module:engine/view/range~Range}\n     */\n    createRangeIn(element) {\n        return Range._createIn(element);\n    }\n    /**\n     * Creates a new {@link module:engine/view/selection~Selection} instance.\n     *\n     * \t\t// Creates empty selection without ranges.\n     *\t\tconst selection = writer.createSelection();\n     *\n     *\t\t// Creates selection at the given range.\n     *\t\tconst range = writer.createRange( start, end );\n     *\t\tconst selection = writer.createSelection( range );\n     *\n     *\t\t// Creates selection at the given ranges\n     * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n     *\t\tconst selection = writer.createSelection( ranges );\n     *\n     *\t\t// Creates selection from the other selection.\n     *\t\tconst otherSelection = writer.createSelection();\n     *\t\tconst selection = writer.createSelection( otherSelection );\n     *\n     *\t\t// Creates selection from the document selection.\n     *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n     *\n     * \t\t// Creates selection at the given position.\n     *\t\tconst position = writer.createPositionFromPath( root, path );\n     *\t\tconst selection = writer.createSelection( position );\n     *\n     *\t\t// Creates collapsed selection at the position of given item and offset.\n     *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n     *\t\tconst selection = writer.createSelection( paragraph, offset );\n     *\n     *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n     *\t\t// first child of that element and ends after the last child of that element.\n     *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n     *\n     *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n     *\t\t// just after the item.\n     *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n     *\n     * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n     *\n     *\t\t// Creates backward selection.\n     *\t\tconst selection = writer.createSelection( range, { backward: true } );\n     *\n     * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n     * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n     * represented in other way, for example by applying proper CSS class.\n     *\n     * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n     * (and be  properly handled by screen readers).\n     *\n     *\t\t// Creates fake selection with label.\n     *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n     *\n     * @param {module:engine/view/selection~Selectable} [selectable=null]\n     * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n     * @param {Object} [options]\n     * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n     * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n     * @param {String} [options.label] Label for the fake selection.\n     * @returns {module:engine/view/selection~Selection}\n     */\n    createSelection(...args) {\n        return new Selection(...args);\n    }\n}\n"],"mappings":"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ACIG,WAAW,CAACJ,QAAQ,EAAEnC,OAAO,EAAE;IAC3BA,OAAO,CAACwC,YAAY,CAACL,QAAQ,CAAC;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,iBAAiB,CAACjB,GAAG,EAAEC,KAAK,EAAEzB,OAAO,EAAE;IACnCA,OAAO,CAAC0C,kBAAkB,CAAClB,GAAG,EAAEC,KAAK,CAAC;EAC1C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIkB,oBAAoB,CAACnB,GAAG,EAAExB,OAAO,EAAE;IAC/B,OAAOA,OAAO,CAAC4C,qBAAqB,CAACpB,GAAG,CAAC;EAC7C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIqB,gBAAgB,CAACC,cAAc,EAAEC,MAAM,EAAE;IACrC,OAAO7D,QAAQ,CAAC8D,SAAS,CAACF,cAAc,EAAEC,MAAM,CAAC;EACrD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,mBAAmB,CAACC,IAAI,EAAE;IACtB,OAAOhE,QAAQ,CAACiE,YAAY,CAACD,IAAI,CAAC;EACtC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,oBAAoB,CAACF,IAAI,EAAE;IACvB,OAAOhE,QAAQ,CAACmE,aAAa,CAACH,IAAI,CAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,WAAW,CAACC,KAAK,EAAEC,GAAG,EAAE;IACpB,OAAO,IAAIrE,KAAK,CAACoE,KAAK,EAAEC,GAAG,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,aAAa,CAACP,IAAI,EAAE;IAChB,OAAO/D,KAAK,CAACuE,SAAS,CAACR,IAAI,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIS,aAAa,CAAC3D,OAAO,EAAE;IACnB,OAAOb,KAAK,CAACyE,SAAS,CAAC5D,OAAO,CAAC;EACnC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI6D,eAAe,GAAU;IAAA,kCAANC,IAAI;MAAJA,IAAI;IAAA;IACnB,OAAO,IAAI1E,SAAS,CAAC,GAAG0E,IAAI,CAAC;EACjC;AACJ"},"metadata":{},"sourceType":"module"}