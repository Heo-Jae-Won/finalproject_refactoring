{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/text\n */\nimport Node from './node';\n// @if CK_DEBUG_ENGINE // const { convertMapToStringifiedObject } = require( '../dev-utils/utils' );\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Text extends Node {\n  /**\n   * Creates a text node.\n   *\n   * **Note:** Constructor of this class shouldn't be used directly in the code.\n   * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n   *\n   * @protected\n   * @param {String} [data] Node's text.\n   * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n   */\n  constructor(data, attrs) {\n    super(attrs);\n    /**\n     * Text data contained in this text node.\n     *\n     * @protected\n     * @type {String}\n     */\n    this._data = data || '';\n  }\n  /**\n   * @inheritDoc\n   */\n  get offsetSize() {\n    return this.data.length;\n  }\n  /**\n   * Returns a text data contained in the node.\n   *\n   * @readonly\n   * @type {String}\n   */\n  get data() {\n    return this._data;\n  }\n  /**\n   * Converts `Text` instance to plain object and returns it.\n   *\n   * @returns {Object} `Text` instance converted to plain object.\n   */\n  toJSON() {\n    const json = super.toJSON();\n    json.data = this.data;\n    return json;\n  }\n  /**\n   * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n   *\n   * @internal\n   * @protected\n   * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n   */\n  _clone() {\n    return new Text(this.data, this.getAttributes());\n  }\n  /**\n   * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n   *\n   * @param {Object} json Plain object to be converted to `Text`.\n   * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n   */\n  static fromJSON(json) {\n    return new Text(json.data, json.attributes);\n  }\n}\n/**\n * Checks whether this object is of the given.\n *\n *\t\ttext.is( '$text' ); // -> true\n *\t\ttext.is( 'node' ); // -> true\n *\t\ttext.is( 'model:$text' ); // -> true\n *\t\ttext.is( 'model:node' ); // -> true\n *\n *\t\ttext.is( 'view:$text' ); // -> false\n *\t\ttext.is( 'documentSelection' ); // -> false\n *\n * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n *\n * **Note:** Until version 20.0.0 this method wasn't accepting `'$text'` type. The legacy `'text'` type is still\n * accepted for backward compatibility.\n *\n * @param {String} type Type to check.\n * @returns {Boolean}\n */\nText.prototype.is = function (type) {\n  return type === '$text' || type === 'model:$text' ||\n  // This are legacy values kept for backward compatibility.\n  type === 'text' || type === 'model:text' ||\n  // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n  type === 'node' || type === 'model:node';\n};","map":{"version":3,"names":["Node","Text","constructor","data","attrs","_data","offsetSize","length","toJSON","json","_clone","getAttributes","fromJSON","attributes","prototype","is","type"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/text\n */\nimport Node from './node';\n// @if CK_DEBUG_ENGINE // const { convertMapToStringifiedObject } = require( '../dev-utils/utils' );\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Text extends Node {\n    /**\n     * Creates a text node.\n     *\n     * **Note:** Constructor of this class shouldn't be used directly in the code.\n     * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n     *\n     * @protected\n     * @param {String} [data] Node's text.\n     * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n     */\n    constructor(data, attrs) {\n        super(attrs);\n        /**\n         * Text data contained in this text node.\n         *\n         * @protected\n         * @type {String}\n         */\n        this._data = data || '';\n    }\n    /**\n     * @inheritDoc\n     */\n    get offsetSize() {\n        return this.data.length;\n    }\n    /**\n     * Returns a text data contained in the node.\n     *\n     * @readonly\n     * @type {String}\n     */\n    get data() {\n        return this._data;\n    }\n    /**\n     * Converts `Text` instance to plain object and returns it.\n     *\n     * @returns {Object} `Text` instance converted to plain object.\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.data = this.data;\n        return json;\n    }\n    /**\n     * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n     *\n     * @internal\n     * @protected\n     * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n     */\n    _clone() {\n        return new Text(this.data, this.getAttributes());\n    }\n    /**\n     * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n     *\n     * @param {Object} json Plain object to be converted to `Text`.\n     * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n     */\n    static fromJSON(json) {\n        return new Text(json.data, json.attributes);\n    }\n}\n/**\n * Checks whether this object is of the given.\n *\n *\t\ttext.is( '$text' ); // -> true\n *\t\ttext.is( 'node' ); // -> true\n *\t\ttext.is( 'model:$text' ); // -> true\n *\t\ttext.is( 'model:node' ); // -> true\n *\n *\t\ttext.is( 'view:$text' ); // -> false\n *\t\ttext.is( 'documentSelection' ); // -> false\n *\n * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n *\n * **Note:** Until version 20.0.0 this method wasn't accepting `'$text'` type. The legacy `'text'` type is still\n * accepted for backward compatibility.\n *\n * @param {String} type Type to check.\n * @returns {Boolean}\n */\nText.prototype.is = function (type) {\n    return type === '$text' || type === 'model:$text' ||\n        // This are legacy values kept for backward compatibility.\n        type === 'text' || type === 'model:text' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'node' || type === 'model:node';\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,IAAI,SAASD,IAAI,CAAC;EACnC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,WAAW,CAACC,IAAI,EAAEC,KAAK,EAAE;IACrB,KAAK,CAACA,KAAK,CAAC;IACZ;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,KAAK,GAAGF,IAAI,IAAI,EAAE;EAC3B;EACA;AACJ;AACA;EACI,IAAIG,UAAU,GAAG;IACb,OAAO,IAAI,CAACH,IAAI,CAACI,MAAM;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIJ,IAAI,GAAG;IACP,OAAO,IAAI,CAACE,KAAK;EACrB;EACA;AACJ;AACA;AACA;AACA;EACIG,MAAM,GAAG;IACL,MAAMC,IAAI,GAAG,KAAK,CAACD,MAAM,EAAE;IAC3BC,IAAI,CAACN,IAAI,GAAG,IAAI,CAACA,IAAI;IACrB,OAAOM,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,MAAM,GAAG;IACL,OAAO,IAAIT,IAAI,CAAC,IAAI,CAACE,IAAI,EAAE,IAAI,CAACQ,aAAa,EAAE,CAAC;EACpD;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOC,QAAQ,CAACH,IAAI,EAAE;IAClB,OAAO,IAAIR,IAAI,CAACQ,IAAI,CAACN,IAAI,EAAEM,IAAI,CAACI,UAAU,CAAC;EAC/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,IAAI,CAACa,SAAS,CAACC,EAAE,GAAG,UAAUC,IAAI,EAAE;EAChC,OAAOA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,aAAa;EAC7C;EACAA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,YAAY;EACxC;EACAA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,YAAY;AAChD,CAAC"},"metadata":{},"sourceType":"module"}