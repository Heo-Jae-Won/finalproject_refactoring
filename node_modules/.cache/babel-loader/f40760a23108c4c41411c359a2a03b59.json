{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/rootattributeoperation\n */\nimport Operation from './operation';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\n *\n * This operation is needed, because root elements can't be changed through\n * @link module:engine/model/operation/attributeoperation~AttributeOperation}.\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\n * requires a range to change and root element can't\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\n * {@link module:engine/model/position~Position} can't be created before a root element.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RootAttributeOperation extends Operation {\n  /**\n   * Creates an operation that changes, removes or adds attributes on root element.\n   *\n   * @see module:engine/model/operation/attributeoperation~AttributeOperation\n   * @param {module:engine/model/rootelement~RootElement} root Root element to change.\n   * @param {String} key Key of an attribute to change or remove.\n   * @param {*} oldValue Old value of the attribute with given key or `null` if adding a new attribute.\n   * @param {*} newValue New value to set for the attribute. If `null`, then the operation just removes the attribute.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(root, key, oldValue, newValue, baseVersion) {\n    super(baseVersion);\n    /**\n     * Root element to change.\n     *\n     * @readonly\n     * @member {module:engine/model/rootelement~RootElement}\n     */\n    this.root = root;\n    /**\n     * Key of an attribute to change or remove.\n     *\n     * @readonly\n     * @member {String}\n     */\n    this.key = key;\n    /**\n     * Old value of the attribute with given key or `null` if adding a new attribute.\n     *\n     * @readonly\n     * @member {*}\n     */\n    this.oldValue = oldValue;\n    /**\n     * New value to set for the attribute. If `null`, then the operation just removes the attribute.\n     *\n     * @readonly\n     * @member {*}\n     */\n    this.newValue = newValue;\n  }\n  /**\n   * @inheritDoc\n   */\n  get type() {\n    if (this.oldValue === null) {\n      return 'addRootAttribute';\n    } else if (this.newValue === null) {\n      return 'removeRootAttribute';\n    } else {\n      return 'changeRootAttribute';\n    }\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation} Clone of this operation.\n   */\n  clone() {\n    return new RootAttributeOperation(this.root, this.key, this.oldValue, this.newValue, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n   */\n  getReversed() {\n    return new RootAttributeOperation(this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   * @internal\n   */\n  _validate() {\n    if (this.root != this.root.root || this.root.is('documentFragment')) {\n      /**\n       * The element to change is not a root element.\n       *\n       * @error rootattribute-operation-not-a-root\n       * @param {module:engine/model/rootelement~RootElement} root\n       * @param {String} key\n       * @param {*} value\n       */\n      throw new CKEditorError('rootattribute-operation-not-a-root', this, {\n        root: this.root,\n        key: this.key\n      });\n    }\n    if (this.oldValue !== null && this.root.getAttribute(this.key) !== this.oldValue) {\n      /**\n       * The attribute which should be removed does not exists for the given node.\n       *\n       * @error rootattribute-operation-wrong-old-value\n       * @param {module:engine/model/rootelement~RootElement} root\n       * @param {String} key\n       * @param {*} value\n       */\n      throw new CKEditorError('rootattribute-operation-wrong-old-value', this, {\n        root: this.root,\n        key: this.key\n      });\n    }\n    if (this.oldValue === null && this.newValue !== null && this.root.hasAttribute(this.key)) {\n      /**\n       * The attribute with given key already exists for the given node.\n       *\n       * @error rootattribute-operation-attribute-exists\n       * @param {module:engine/model/rootelement~RootElement} root\n       * @param {String} key\n       */\n      throw new CKEditorError('rootattribute-operation-attribute-exists', this, {\n        root: this.root,\n        key: this.key\n      });\n    }\n  }\n  /**\n   * @inheritDoc\n   * @internal\n   */\n  _execute() {\n    if (this.newValue !== null) {\n      this.root._setAttribute(this.key, this.newValue);\n    } else {\n      this.root._removeAttribute(this.key);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  toJSON() {\n    const json = super.toJSON();\n    json.root = this.root.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n  static get className() {\n    return 'RootAttributeOperation';\n  }\n  /**\n   * Creates RootAttributeOperation object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n   */\n  static fromJSON(json, document) {\n    if (!document.getRoot(json.root)) {\n      /**\n       * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\n       *\n       * @error rootattribute-operation-fromjson-no-root\n       * @param {String} rootName\n       */\n      throw new CKEditorError('rootattribute-operation-fromjson-no-root', this, {\n        rootName: json.root\n      });\n    }\n    return new RootAttributeOperation(document.getRoot(json.root), json.key, json.oldValue, json.newValue, json.baseVersion);\n  }\n}","map":{"version":3,"names":["Operation","CKEditorError","RootAttributeOperation","constructor","root","key","oldValue","newValue","baseVersion","type","clone","getReversed","_validate","is","getAttribute","hasAttribute","_execute","_setAttribute","_removeAttribute","toJSON","json","className","fromJSON","document","getRoot","rootName"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/rootattributeoperation.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/rootattributeoperation\n */\nimport Operation from './operation';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\n *\n * This operation is needed, because root elements can't be changed through\n * @link module:engine/model/operation/attributeoperation~AttributeOperation}.\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\n * requires a range to change and root element can't\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\n * {@link module:engine/model/position~Position} can't be created before a root element.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RootAttributeOperation extends Operation {\n    /**\n     * Creates an operation that changes, removes or adds attributes on root element.\n     *\n     * @see module:engine/model/operation/attributeoperation~AttributeOperation\n     * @param {module:engine/model/rootelement~RootElement} root Root element to change.\n     * @param {String} key Key of an attribute to change or remove.\n     * @param {*} oldValue Old value of the attribute with given key or `null` if adding a new attribute.\n     * @param {*} newValue New value to set for the attribute. If `null`, then the operation just removes the attribute.\n     * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(root, key, oldValue, newValue, baseVersion) {\n        super(baseVersion);\n        /**\n         * Root element to change.\n         *\n         * @readonly\n         * @member {module:engine/model/rootelement~RootElement}\n         */\n        this.root = root;\n        /**\n         * Key of an attribute to change or remove.\n         *\n         * @readonly\n         * @member {String}\n         */\n        this.key = key;\n        /**\n         * Old value of the attribute with given key or `null` if adding a new attribute.\n         *\n         * @readonly\n         * @member {*}\n         */\n        this.oldValue = oldValue;\n        /**\n         * New value to set for the attribute. If `null`, then the operation just removes the attribute.\n         *\n         * @readonly\n         * @member {*}\n         */\n        this.newValue = newValue;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        if (this.oldValue === null) {\n            return 'addRootAttribute';\n        }\n        else if (this.newValue === null) {\n            return 'removeRootAttribute';\n        }\n        else {\n            return 'changeRootAttribute';\n        }\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation} Clone of this operation.\n     */\n    clone() {\n        return new RootAttributeOperation(this.root, this.key, this.oldValue, this.newValue, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     *\n     * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n     */\n    getReversed() {\n        return new RootAttributeOperation(this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        if (this.root != this.root.root || this.root.is('documentFragment')) {\n            /**\n             * The element to change is not a root element.\n             *\n             * @error rootattribute-operation-not-a-root\n             * @param {module:engine/model/rootelement~RootElement} root\n             * @param {String} key\n             * @param {*} value\n             */\n            throw new CKEditorError('rootattribute-operation-not-a-root', this, { root: this.root, key: this.key });\n        }\n        if (this.oldValue !== null && this.root.getAttribute(this.key) !== this.oldValue) {\n            /**\n             * The attribute which should be removed does not exists for the given node.\n             *\n             * @error rootattribute-operation-wrong-old-value\n             * @param {module:engine/model/rootelement~RootElement} root\n             * @param {String} key\n             * @param {*} value\n             */\n            throw new CKEditorError('rootattribute-operation-wrong-old-value', this, { root: this.root, key: this.key });\n        }\n        if (this.oldValue === null && this.newValue !== null && this.root.hasAttribute(this.key)) {\n            /**\n             * The attribute with given key already exists for the given node.\n             *\n             * @error rootattribute-operation-attribute-exists\n             * @param {module:engine/model/rootelement~RootElement} root\n             * @param {String} key\n             */\n            throw new CKEditorError('rootattribute-operation-attribute-exists', this, { root: this.root, key: this.key });\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        if (this.newValue !== null) {\n            this.root._setAttribute(this.key, this.newValue);\n        }\n        else {\n            this.root._removeAttribute(this.key);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.root = this.root.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'RootAttributeOperation';\n    }\n    /**\n     * Creates RootAttributeOperation object from deserilized object, i.e. from parsed JSON string.\n     *\n     * @param {Object} json Deserialized JSON object.\n     * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n     * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n     */\n    static fromJSON(json, document) {\n        if (!document.getRoot(json.root)) {\n            /**\n             * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\n             *\n             * @error rootattribute-operation-fromjson-no-root\n             * @param {String} rootName\n             */\n            throw new CKEditorError('rootattribute-operation-fromjson-no-root', this, { rootName: json.root });\n        }\n        return new RootAttributeOperation(document.getRoot(json.root), json.key, json.oldValue, json.newValue, json.baseVersion);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}