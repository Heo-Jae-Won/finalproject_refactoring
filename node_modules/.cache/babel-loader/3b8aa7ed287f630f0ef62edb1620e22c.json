{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/operationfactory\n */\nimport AttributeOperation from './attributeoperation';\nimport InsertOperation from './insertoperation';\nimport MarkerOperation from './markeroperation';\nimport MoveOperation from './moveoperation';\nimport NoOperation from './nooperation';\nimport Operation from './operation';\nimport RenameOperation from './renameoperation';\nimport RootAttributeOperation from './rootattributeoperation';\nimport SplitOperation from './splitoperation';\nimport MergeOperation from './mergeoperation';\nconst operations = {};\noperations[AttributeOperation.className] = AttributeOperation;\noperations[InsertOperation.className] = InsertOperation;\noperations[MarkerOperation.className] = MarkerOperation;\noperations[MoveOperation.className] = MoveOperation;\noperations[NoOperation.className] = NoOperation;\noperations[Operation.className] = Operation;\noperations[RenameOperation.className] = RenameOperation;\noperations[RootAttributeOperation.className] = RootAttributeOperation;\noperations[SplitOperation.className] = SplitOperation;\noperations[MergeOperation.className] = MergeOperation;\n/**\n * A factory class for creating operations.\n *\n * @abstract\n */\nexport default class OperationFactory {\n  /**\n   * Creates an operation instance from a JSON object (parsed JSON string).\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/operation~Operation}\n   */\n  static fromJSON(json, document) {\n    return operations[json.__className].fromJSON(json, document);\n  }\n}","map":{"version":3,"names":["AttributeOperation","InsertOperation","MarkerOperation","MoveOperation","NoOperation","Operation","RenameOperation","RootAttributeOperation","SplitOperation","MergeOperation","operations","className","OperationFactory","fromJSON","json","document","__className"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operationfactory.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/operationfactory\n */\nimport AttributeOperation from './attributeoperation';\nimport InsertOperation from './insertoperation';\nimport MarkerOperation from './markeroperation';\nimport MoveOperation from './moveoperation';\nimport NoOperation from './nooperation';\nimport Operation from './operation';\nimport RenameOperation from './renameoperation';\nimport RootAttributeOperation from './rootattributeoperation';\nimport SplitOperation from './splitoperation';\nimport MergeOperation from './mergeoperation';\nconst operations = {};\noperations[AttributeOperation.className] = AttributeOperation;\noperations[InsertOperation.className] = InsertOperation;\noperations[MarkerOperation.className] = MarkerOperation;\noperations[MoveOperation.className] = MoveOperation;\noperations[NoOperation.className] = NoOperation;\noperations[Operation.className] = Operation;\noperations[RenameOperation.className] = RenameOperation;\noperations[RootAttributeOperation.className] = RootAttributeOperation;\noperations[SplitOperation.className] = SplitOperation;\noperations[MergeOperation.className] = MergeOperation;\n/**\n * A factory class for creating operations.\n *\n * @abstract\n */\nexport default class OperationFactory {\n    /**\n     * Creates an operation instance from a JSON object (parsed JSON string).\n     *\n     * @param {Object} json Deserialized JSON object.\n     * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n     * @returns {module:engine/model/operation/operation~Operation}\n     */\n    static fromJSON(json, document) {\n        return operations[json.__className].fromJSON(json, document);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,MAAMC,UAAU,GAAG,CAAC,CAAC;AACrBA,UAAU,CAACV,kBAAkB,CAACW,SAAS,CAAC,GAAGX,kBAAkB;AAC7DU,UAAU,CAACT,eAAe,CAACU,SAAS,CAAC,GAAGV,eAAe;AACvDS,UAAU,CAACR,eAAe,CAACS,SAAS,CAAC,GAAGT,eAAe;AACvDQ,UAAU,CAACP,aAAa,CAACQ,SAAS,CAAC,GAAGR,aAAa;AACnDO,UAAU,CAACN,WAAW,CAACO,SAAS,CAAC,GAAGP,WAAW;AAC/CM,UAAU,CAACL,SAAS,CAACM,SAAS,CAAC,GAAGN,SAAS;AAC3CK,UAAU,CAACJ,eAAe,CAACK,SAAS,CAAC,GAAGL,eAAe;AACvDI,UAAU,CAACH,sBAAsB,CAACI,SAAS,CAAC,GAAGJ,sBAAsB;AACrEG,UAAU,CAACF,cAAc,CAACG,SAAS,CAAC,GAAGH,cAAc;AACrDE,UAAU,CAACD,cAAc,CAACE,SAAS,CAAC,GAAGF,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMG,gBAAgB,CAAC;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,QAAQ,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAC5B,OAAOL,UAAU,CAACI,IAAI,CAACE,WAAW,CAAC,CAACH,QAAQ,CAACC,IAAI,EAAEC,QAAQ,CAAC;EAChE;AACJ"},"metadata":{},"sourceType":"module"}