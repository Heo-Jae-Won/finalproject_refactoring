{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\nconst modifiersToGlyphsMac = {\n  ctrl: '⌃',\n  cmd: '⌘',\n  alt: '⌥',\n  shift: '⇧'\n};\nconst modifiersToGlyphsNonMac = {\n  ctrl: 'Ctrl+',\n  alt: 'Alt+',\n  shift: 'Shift+'\n};\n/**\n * An object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `` ` ``, `-`, `=`, `[`, `]`, `;`, `'`, `,`, `.`, `/`, `\\`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\nexport const keyCodes = generateKnownKeyCodes();\nconst keyCodeNames = Object.fromEntries(Object.entries(keyCodes).map(_ref => {\n  let [name, code] = _ref;\n  return [code, name.charAt(0).toUpperCase() + name.slice(1)];\n}));\n/**\n * Converts a key name or {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} A key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\nexport function getCode(key) {\n  let keyCode;\n  if (typeof key == 'string') {\n    keyCode = keyCodes[key.toLowerCase()];\n    if (!keyCode) {\n      /**\n       * Unknown key name. Only key names included in the {@link module:utils/keyboard~keyCodes} can be used.\n       *\n       * @error keyboard-unknown-key\n       * @param {String} key\n       */\n      throw new CKEditorError('keyboard-unknown-key', null, {\n        key\n      });\n    }\n  } else {\n    keyCode = key.keyCode + (key.altKey ? keyCodes.alt : 0) + (key.ctrlKey ? keyCodes.ctrl : 0) + (key.shiftKey ? keyCodes.shift : 0) + (key.metaKey ? keyCodes.cmd : 0);\n  }\n  return keyCode;\n}\n/**\n * Parses the keystroke and returns a keystroke code that will match the code returned by\n * {@link module:utils/keyboard~getCode} for the corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * Note: On macOS, keystroke handling is translating the `Ctrl` key to the `Cmd` key and handling only that keystroke.\n * For example, a registered keystroke `Ctrl+A` will be translated to `Cmd+A` on macOS. To disable the translation of some keystroke,\n * use the forced modifier: `Ctrl!+A` (note the exclamation mark).\n *\n * @param {String|Array.<Number|String>} keystroke The keystroke definition.\n * @returns {Number} Keystroke code.\n */\nexport function parseKeystroke(keystroke) {\n  if (typeof keystroke == 'string') {\n    keystroke = splitKeystrokeText(keystroke);\n  }\n  return keystroke.map(key => typeof key == 'string' ? getEnvKeyCode(key) : key).reduce((key, sum) => sum + key, 0);\n}\n/**\n * Translates any keystroke string text like `\"Ctrl+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on macOS.\n *\n * @param {String} keystroke The keystroke text.\n * @returns {String} The keystroke text specific for the environment.\n */\nexport function getEnvKeystrokeText(keystroke) {\n  let keystrokeCode = parseKeystroke(keystroke);\n  const modifiersToGlyphs = Object.entries(env.isMac ? modifiersToGlyphsMac : modifiersToGlyphsNonMac);\n  const modifiers = modifiersToGlyphs.reduce((modifiers, _ref2) => {\n    let [name, glyph] = _ref2;\n    // Modifier keys are stored as a bit mask so extract those from the keystroke code.\n    if ((keystrokeCode & keyCodes[name]) != 0) {\n      keystrokeCode &= ~keyCodes[name];\n      modifiers += glyph;\n    }\n    return modifiers;\n  }, '');\n  return modifiers + (keystrokeCode ? keyCodeNames[keystrokeCode] : '');\n}\n/**\n * Returns `true` if the provided key code represents one of the arrow keys.\n *\n * @param {Number} keyCode A key code as in {@link module:utils/keyboard~KeystrokeInfo#keyCode}.\n * @returns {Boolean}\n */\nexport function isArrowKeyCode(keyCode) {\n  return keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup || keyCode == keyCodes.arrowdown;\n}\n/**\n * Returns the direction in which the {@link module:engine/model/documentselection~DocumentSelection selection}\n * will move when the provided arrow key code is pressed considering the language direction of the editor content.\n *\n * For instance, in right–to–left (RTL) content languages, pressing the left arrow means moving the selection right (forward)\n * in the model structure. Similarly, pressing the right arrow moves the selection left (backward).\n *\n * @param {Number} keyCode A key code as in {@link module:utils/keyboard~KeystrokeInfo#keyCode}.\n * @param {module:utils/language~LanguageDirection} contentLanguageDirection The content language direction, corresponding to\n * {@link module:utils/locale~Locale#contentLanguageDirection}.\n * @returns {module:utils/keyboard~ArrowKeyCodeDirection|undefined} Localized arrow direction or `undefined` for non-arrow key codes.\n */\nexport function getLocalizedArrowKeyCodeDirection(keyCode, contentLanguageDirection) {\n  const isLtrContent = contentLanguageDirection === 'ltr';\n  switch (keyCode) {\n    case keyCodes.arrowleft:\n      return isLtrContent ? 'left' : 'right';\n    case keyCodes.arrowright:\n      return isLtrContent ? 'right' : 'left';\n    case keyCodes.arrowup:\n      return 'up';\n    case keyCodes.arrowdown:\n      return 'down';\n  }\n}\n// Converts a key name to the key code with mapping based on the env.\n//\n// See: {@link module:utils/keyboard~getCode}.\n//\n// @param {String} key The key name (see {@link module:utils/keyboard~keyCodes}).\n// @returns {Number} Key code.\nfunction getEnvKeyCode(key) {\n  // Don't remap modifier key for forced modifiers.\n  if (key.endsWith('!')) {\n    return getCode(key.slice(0, -1));\n  }\n  const code = getCode(key);\n  return env.isMac && code == keyCodes.ctrl ? keyCodes.cmd : code;\n}\n/**\n * Determines if the provided key code moves the {@link module:engine/model/documentselection~DocumentSelection selection}\n * forward or backward considering the language direction of the editor content.\n *\n * For instance, in right–to–left (RTL) languages, pressing the left arrow means moving forward\n * in the model structure. Similarly, pressing the right arrow moves the selection backward.\n *\n * @param {Number} keyCode A key code as in {@link module:utils/keyboard~KeystrokeInfo#keyCode}.\n * @param {module:utils/language~LanguageDirection} contentLanguageDirection The content language direction, corresponding to\n * {@link module:utils/locale~Locale#contentLanguageDirection}.\n * @returns {Boolean}\n */\nexport function isForwardArrowKeyCode(keyCode, contentLanguageDirection) {\n  const localizedKeyCodeDirection = getLocalizedArrowKeyCodeDirection(keyCode, contentLanguageDirection);\n  return localizedKeyCodeDirection === 'down' || localizedKeyCodeDirection === 'right';\n}\nfunction generateKnownKeyCodes() {\n  const keyCodes = {\n    arrowleft: 37,\n    arrowup: 38,\n    arrowright: 39,\n    arrowdown: 40,\n    backspace: 8,\n    delete: 46,\n    enter: 13,\n    space: 32,\n    esc: 27,\n    tab: 9,\n    // The idea about these numbers is that they do not collide with any real key codes, so we can use them\n    // like bit masks.\n    ctrl: 0x110000,\n    shift: 0x220000,\n    alt: 0x440000,\n    cmd: 0x880000\n  };\n  // a-z\n  for (let code = 65; code <= 90; code++) {\n    const letter = String.fromCharCode(code);\n    keyCodes[letter.toLowerCase()] = code;\n  }\n  // 0-9\n  for (let code = 48; code <= 57; code++) {\n    keyCodes[code - 48] = code;\n  }\n  // F1-F12\n  for (let code = 112; code <= 123; code++) {\n    keyCodes['f' + (code - 111)] = code;\n  }\n  // other characters\n  for (const char of '`-=[];\\',./\\\\') {\n    keyCodes[char] = char.charCodeAt(0);\n  }\n  return keyCodes;\n}\nfunction splitKeystrokeText(keystroke) {\n  return keystroke.split('+').map(key => key.trim());\n}","map":{"version":3,"names":["CKEditorError","env","modifiersToGlyphsMac","ctrl","cmd","alt","shift","modifiersToGlyphsNonMac","keyCodes","generateKnownKeyCodes","keyCodeNames","Object","fromEntries","entries","map","name","code","charAt","toUpperCase","slice","getCode","key","keyCode","toLowerCase","altKey","ctrlKey","shiftKey","metaKey","parseKeystroke","keystroke","splitKeystrokeText","getEnvKeyCode","reduce","sum","getEnvKeystrokeText","keystrokeCode","modifiersToGlyphs","isMac","modifiers","glyph","isArrowKeyCode","arrowright","arrowleft","arrowup","arrowdown","getLocalizedArrowKeyCodeDirection","contentLanguageDirection","isLtrContent","endsWith","isForwardArrowKeyCode","localizedKeyCodeDirection","backspace","delete","enter","space","esc","tab","letter","String","fromCharCode","char","charCodeAt","split","trim"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\nconst modifiersToGlyphsMac = {\n    ctrl: '⌃',\n    cmd: '⌘',\n    alt: '⌥',\n    shift: '⇧'\n};\nconst modifiersToGlyphsNonMac = {\n    ctrl: 'Ctrl+',\n    alt: 'Alt+',\n    shift: 'Shift+'\n};\n/**\n * An object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `` ` ``, `-`, `=`, `[`, `]`, `;`, `'`, `,`, `.`, `/`, `\\`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\nexport const keyCodes = generateKnownKeyCodes();\nconst keyCodeNames = Object.fromEntries(Object.entries(keyCodes).map(([name, code]) => [code, name.charAt(0).toUpperCase() + name.slice(1)]));\n/**\n * Converts a key name or {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} A key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\nexport function getCode(key) {\n    let keyCode;\n    if (typeof key == 'string') {\n        keyCode = keyCodes[key.toLowerCase()];\n        if (!keyCode) {\n            /**\n             * Unknown key name. Only key names included in the {@link module:utils/keyboard~keyCodes} can be used.\n             *\n             * @error keyboard-unknown-key\n             * @param {String} key\n             */\n            throw new CKEditorError('keyboard-unknown-key', null, { key });\n        }\n    }\n    else {\n        keyCode = key.keyCode +\n            (key.altKey ? keyCodes.alt : 0) +\n            (key.ctrlKey ? keyCodes.ctrl : 0) +\n            (key.shiftKey ? keyCodes.shift : 0) +\n            (key.metaKey ? keyCodes.cmd : 0);\n    }\n    return keyCode;\n}\n/**\n * Parses the keystroke and returns a keystroke code that will match the code returned by\n * {@link module:utils/keyboard~getCode} for the corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * Note: On macOS, keystroke handling is translating the `Ctrl` key to the `Cmd` key and handling only that keystroke.\n * For example, a registered keystroke `Ctrl+A` will be translated to `Cmd+A` on macOS. To disable the translation of some keystroke,\n * use the forced modifier: `Ctrl!+A` (note the exclamation mark).\n *\n * @param {String|Array.<Number|String>} keystroke The keystroke definition.\n * @returns {Number} Keystroke code.\n */\nexport function parseKeystroke(keystroke) {\n    if (typeof keystroke == 'string') {\n        keystroke = splitKeystrokeText(keystroke);\n    }\n    return keystroke\n        .map(key => (typeof key == 'string') ? getEnvKeyCode(key) : key)\n        .reduce((key, sum) => sum + key, 0);\n}\n/**\n * Translates any keystroke string text like `\"Ctrl+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on macOS.\n *\n * @param {String} keystroke The keystroke text.\n * @returns {String} The keystroke text specific for the environment.\n */\nexport function getEnvKeystrokeText(keystroke) {\n    let keystrokeCode = parseKeystroke(keystroke);\n    const modifiersToGlyphs = Object.entries(env.isMac ? modifiersToGlyphsMac : modifiersToGlyphsNonMac);\n    const modifiers = modifiersToGlyphs.reduce((modifiers, [name, glyph]) => {\n        // Modifier keys are stored as a bit mask so extract those from the keystroke code.\n        if ((keystrokeCode & keyCodes[name]) != 0) {\n            keystrokeCode &= ~keyCodes[name];\n            modifiers += glyph;\n        }\n        return modifiers;\n    }, '');\n    return modifiers + (keystrokeCode ? keyCodeNames[keystrokeCode] : '');\n}\n/**\n * Returns `true` if the provided key code represents one of the arrow keys.\n *\n * @param {Number} keyCode A key code as in {@link module:utils/keyboard~KeystrokeInfo#keyCode}.\n * @returns {Boolean}\n */\nexport function isArrowKeyCode(keyCode) {\n    return keyCode == keyCodes.arrowright ||\n        keyCode == keyCodes.arrowleft ||\n        keyCode == keyCodes.arrowup ||\n        keyCode == keyCodes.arrowdown;\n}\n/**\n * Returns the direction in which the {@link module:engine/model/documentselection~DocumentSelection selection}\n * will move when the provided arrow key code is pressed considering the language direction of the editor content.\n *\n * For instance, in right–to–left (RTL) content languages, pressing the left arrow means moving the selection right (forward)\n * in the model structure. Similarly, pressing the right arrow moves the selection left (backward).\n *\n * @param {Number} keyCode A key code as in {@link module:utils/keyboard~KeystrokeInfo#keyCode}.\n * @param {module:utils/language~LanguageDirection} contentLanguageDirection The content language direction, corresponding to\n * {@link module:utils/locale~Locale#contentLanguageDirection}.\n * @returns {module:utils/keyboard~ArrowKeyCodeDirection|undefined} Localized arrow direction or `undefined` for non-arrow key codes.\n */\nexport function getLocalizedArrowKeyCodeDirection(keyCode, contentLanguageDirection) {\n    const isLtrContent = contentLanguageDirection === 'ltr';\n    switch (keyCode) {\n        case keyCodes.arrowleft:\n            return isLtrContent ? 'left' : 'right';\n        case keyCodes.arrowright:\n            return isLtrContent ? 'right' : 'left';\n        case keyCodes.arrowup:\n            return 'up';\n        case keyCodes.arrowdown:\n            return 'down';\n    }\n}\n// Converts a key name to the key code with mapping based on the env.\n//\n// See: {@link module:utils/keyboard~getCode}.\n//\n// @param {String} key The key name (see {@link module:utils/keyboard~keyCodes}).\n// @returns {Number} Key code.\nfunction getEnvKeyCode(key) {\n    // Don't remap modifier key for forced modifiers.\n    if (key.endsWith('!')) {\n        return getCode(key.slice(0, -1));\n    }\n    const code = getCode(key);\n    return env.isMac && code == keyCodes.ctrl ? keyCodes.cmd : code;\n}\n/**\n * Determines if the provided key code moves the {@link module:engine/model/documentselection~DocumentSelection selection}\n * forward or backward considering the language direction of the editor content.\n *\n * For instance, in right–to–left (RTL) languages, pressing the left arrow means moving forward\n * in the model structure. Similarly, pressing the right arrow moves the selection backward.\n *\n * @param {Number} keyCode A key code as in {@link module:utils/keyboard~KeystrokeInfo#keyCode}.\n * @param {module:utils/language~LanguageDirection} contentLanguageDirection The content language direction, corresponding to\n * {@link module:utils/locale~Locale#contentLanguageDirection}.\n * @returns {Boolean}\n */\nexport function isForwardArrowKeyCode(keyCode, contentLanguageDirection) {\n    const localizedKeyCodeDirection = getLocalizedArrowKeyCodeDirection(keyCode, contentLanguageDirection);\n    return localizedKeyCodeDirection === 'down' || localizedKeyCodeDirection === 'right';\n}\nfunction generateKnownKeyCodes() {\n    const keyCodes = {\n        arrowleft: 37,\n        arrowup: 38,\n        arrowright: 39,\n        arrowdown: 40,\n        backspace: 8,\n        delete: 46,\n        enter: 13,\n        space: 32,\n        esc: 27,\n        tab: 9,\n        // The idea about these numbers is that they do not collide with any real key codes, so we can use them\n        // like bit masks.\n        ctrl: 0x110000,\n        shift: 0x220000,\n        alt: 0x440000,\n        cmd: 0x880000\n    };\n    // a-z\n    for (let code = 65; code <= 90; code++) {\n        const letter = String.fromCharCode(code);\n        keyCodes[letter.toLowerCase()] = code;\n    }\n    // 0-9\n    for (let code = 48; code <= 57; code++) {\n        keyCodes[code - 48] = code;\n    }\n    // F1-F12\n    for (let code = 112; code <= 123; code++) {\n        keyCodes['f' + (code - 111)] = code;\n    }\n    // other characters\n    for (const char of '`-=[];\\',./\\\\') {\n        keyCodes[char] = char.charCodeAt(0);\n    }\n    return keyCodes;\n}\nfunction splitKeystrokeText(keystroke) {\n    return keystroke.split('+').map(key => key.trim());\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}