{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/attributeelement\n */\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n// Default attribute priority.\nconst DEFAULT_PRIORITY = 10;\n/**\n * Attribute elements are used to represent formatting elements in the view (think â€“ `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class AttributeElement extends Element {\n  /**\n   * Creates an attribute element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n   * @see module:engine/view/element~Element\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n   * @param {String} name Node name.\n   * @param {Object|Iterable} [attrs] Collection of attributes.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into created element.\n   */\n  constructor() {\n    super(...arguments);\n    /**\n     * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n     *\n     * @method #getFillerOffset\n     * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n     */\n    this.getFillerOffset = getFillerOffset;\n    /**\n     * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n     *\n     * @protected\n     * @member {Number}\n     */\n    this._priority = DEFAULT_PRIORITY;\n    /**\n     * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n     * and then two elements are considered similar if, and only if they have the same `_id`.\n     *\n     * @protected\n     * @member {String|Number}\n     */\n    this._id = null;\n    /**\n     * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n     * and still exist in the view tree.\n     *\n     * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n     *\n     * @protected\n     * @member {Set.<module:engine/view/attributeelement~AttributeElement>|null}\n     */\n    this._clonesGroup = null;\n  }\n  /**\n   * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n   *\n   * @readonly\n   * @type {Number}\n   */\n  get priority() {\n    return this._priority;\n  }\n  /**\n   * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n   * and then two elements are considered similar if, and only if they have the same `id`.\n   *\n   * @readonly\n   * @type {String|Number}\n   */\n  get id() {\n    return this._id;\n  }\n  /**\n   * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n   * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n   *\n   * Note: If this element has been removed from the tree, returned set will not include it.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n   * if this element has no `id`.\n   *\n   * @returns {Set.<module:engine/view/attributeelement~AttributeElement>} Set containing all the attribute elements\n   * with the same `id` that were added and not removed from the view tree.\n   */\n  getElementsWithSameId() {\n    if (this.id === null) {\n      /**\n       * Cannot get elements with the same id for an attribute element without id.\n       *\n       * @error attribute-element-get-elements-with-same-id-no-id\n       */\n      throw new CKEditorError('attribute-element-get-elements-with-same-id-no-id', this);\n    }\n    return new Set(this._clonesGroup);\n  }\n  /**\n   * Checks if this element is similar to other element.\n   *\n   * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n   * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n   * different set of children nodes.\n   *\n   * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n   * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n   * considered similar.\n   *\n   * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n   *\n   * * two following similar elements can be merged together into one, longer element,\n   * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n   * decide whether processed element should be unwrapped,\n   * * etc.\n   *\n   * @param {module:engine/view/element~Element} otherElement\n   * @returns {Boolean}\n   */\n  isSimilar(otherElement) {\n    // If any element has an `id` set, just compare the ids.\n    if (this.id !== null || otherElement.id !== null) {\n      return this.id === otherElement.id;\n    }\n    return super.isSimilar(otherElement) && this.priority == otherElement.priority;\n  }\n  /**\n   * Clones provided element with priority.\n   *\n   * @protected\n   * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\n   * element will be cloned without any children.\n   * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\n   */\n  _clone() {\n    let deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const cloned = super._clone(deep);\n    // Clone priority too.\n    cloned._priority = this._priority;\n    // And id too.\n    cloned._id = this._id;\n    return cloned;\n  }\n}\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\n/**\n * Checks whether this object is of the given.\n *\n *\t\tattributeElement.is( 'attributeElement' ); // -> true\n *\t\tattributeElement.is( 'element' ); // -> true\n *\t\tattributeElement.is( 'node' ); // -> true\n *\t\tattributeElement.is( 'view:attributeElement' ); // -> true\n *\t\tattributeElement.is( 'view:element' ); // -> true\n *\t\tattributeElement.is( 'view:node' ); // -> true\n *\n *\t\tattributeElement.is( 'model:element' ); // -> false\n *\t\tattributeElement.is( 'documentFragment' ); // -> false\n *\n * Assuming that the object being checked is an attribute element, you can also check its\n * {@link module:engine/view/attributeelement~AttributeElement#name name}:\n *\n *\t\tattributeElement.is( 'element', 'b' ); // -> true if this is a bold element\n *\t\tattributeElement.is( 'attributeElement', 'b' ); // -> same as above\n *\t\ttext.is( 'element', 'b' ); -> false\n *\n * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n *\n * @param {String} type Type to check.\n * @param {String} [name] Element name.\n * @returns {Boolean}\n */\nAttributeElement.prototype.is = function (type, name) {\n  if (!name) {\n    return type === 'attributeElement' || type === 'view:attributeElement' ||\n    // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n    type === 'element' || type === 'view:element' || type === 'node' || type === 'view:node';\n  } else {\n    return name === this.name && (type === 'attributeElement' || type === 'view:attributeElement' ||\n    // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n    type === 'element' || type === 'view:element');\n  }\n};\n// Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getFillerOffset() {\n  // <b>foo</b> does not need filler.\n  if (nonUiChildrenCount(this)) {\n    return null;\n  }\n  let element = this.parent;\n  // <p><b></b></p> needs filler -> <p><b><br></b></p>\n  while (element && element.is('attributeElement')) {\n    if (nonUiChildrenCount(element) > 1) {\n      return null;\n    }\n    element = element.parent;\n  }\n  if (!element || nonUiChildrenCount(element) > 1) {\n    return null;\n  }\n  // Render block filler at the end of element (after all ui elements).\n  return this.childCount;\n}\n// Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n//\n// @param {module:engine/view/element~Element} element\n// @returns {Number}\nfunction nonUiChildrenCount(element) {\n  return Array.from(element.getChildren()).filter(element => !element.is('uiElement')).length;\n}","map":{"version":3,"names":["Element","CKEditorError","DEFAULT_PRIORITY","AttributeElement","constructor","getFillerOffset","_priority","_id","_clonesGroup","priority","id","getElementsWithSameId","Set","isSimilar","otherElement","_clone","deep","cloned","prototype","is","type","name","nonUiChildrenCount","element","parent","childCount","Array","from","getChildren","filter","length"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/attributeelement.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/attributeelement\n */\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n// Default attribute priority.\nconst DEFAULT_PRIORITY = 10;\n/**\n * Attribute elements are used to represent formatting elements in the view (think â€“ `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class AttributeElement extends Element {\n    /**\n     * Creates an attribute element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n     * @see module:engine/view/element~Element\n     * @protected\n     * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n     * @param {String} name Node name.\n     * @param {Object|Iterable} [attrs] Collection of attributes.\n     * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n     * A list of nodes to be inserted into created element.\n     */\n    constructor(...args) {\n        super(...args);\n        /**\n         * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n         *\n         * @method #getFillerOffset\n         * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n         */\n        this.getFillerOffset = getFillerOffset;\n        /**\n         * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n         *\n         * @protected\n         * @member {Number}\n         */\n        this._priority = DEFAULT_PRIORITY;\n        /**\n         * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n         * and then two elements are considered similar if, and only if they have the same `_id`.\n         *\n         * @protected\n         * @member {String|Number}\n         */\n        this._id = null;\n        /**\n         * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n         * and still exist in the view tree.\n         *\n         * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n         *\n         * @protected\n         * @member {Set.<module:engine/view/attributeelement~AttributeElement>|null}\n         */\n        this._clonesGroup = null;\n    }\n    /**\n     * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n     *\n     * @readonly\n     * @type {Number}\n     */\n    get priority() {\n        return this._priority;\n    }\n    /**\n     * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n     * and then two elements are considered similar if, and only if they have the same `id`.\n     *\n     * @readonly\n     * @type {String|Number}\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n     * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n     *\n     * Note: If this element has been removed from the tree, returned set will not include it.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n     * if this element has no `id`.\n     *\n     * @returns {Set.<module:engine/view/attributeelement~AttributeElement>} Set containing all the attribute elements\n     * with the same `id` that were added and not removed from the view tree.\n     */\n    getElementsWithSameId() {\n        if (this.id === null) {\n            /**\n             * Cannot get elements with the same id for an attribute element without id.\n             *\n             * @error attribute-element-get-elements-with-same-id-no-id\n             */\n            throw new CKEditorError('attribute-element-get-elements-with-same-id-no-id', this);\n        }\n        return new Set(this._clonesGroup);\n    }\n    /**\n     * Checks if this element is similar to other element.\n     *\n     * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n     * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n     * different set of children nodes.\n     *\n     * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n     * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n     * considered similar.\n     *\n     * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n     *\n     * * two following similar elements can be merged together into one, longer element,\n     * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n     * decide whether processed element should be unwrapped,\n     * * etc.\n     *\n     * @param {module:engine/view/element~Element} otherElement\n     * @returns {Boolean}\n     */\n    isSimilar(otherElement) {\n        // If any element has an `id` set, just compare the ids.\n        if (this.id !== null || otherElement.id !== null) {\n            return this.id === otherElement.id;\n        }\n        return super.isSimilar(otherElement) && this.priority == otherElement.priority;\n    }\n    /**\n     * Clones provided element with priority.\n     *\n     * @protected\n     * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\n     * element will be cloned without any children.\n     * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\n     */\n    _clone(deep = false) {\n        const cloned = super._clone(deep);\n        // Clone priority too.\n        cloned._priority = this._priority;\n        // And id too.\n        cloned._id = this._id;\n        return cloned;\n    }\n}\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\n/**\n * Checks whether this object is of the given.\n *\n *\t\tattributeElement.is( 'attributeElement' ); // -> true\n *\t\tattributeElement.is( 'element' ); // -> true\n *\t\tattributeElement.is( 'node' ); // -> true\n *\t\tattributeElement.is( 'view:attributeElement' ); // -> true\n *\t\tattributeElement.is( 'view:element' ); // -> true\n *\t\tattributeElement.is( 'view:node' ); // -> true\n *\n *\t\tattributeElement.is( 'model:element' ); // -> false\n *\t\tattributeElement.is( 'documentFragment' ); // -> false\n *\n * Assuming that the object being checked is an attribute element, you can also check its\n * {@link module:engine/view/attributeelement~AttributeElement#name name}:\n *\n *\t\tattributeElement.is( 'element', 'b' ); // -> true if this is a bold element\n *\t\tattributeElement.is( 'attributeElement', 'b' ); // -> same as above\n *\t\ttext.is( 'element', 'b' ); -> false\n *\n * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n *\n * @param {String} type Type to check.\n * @param {String} [name] Element name.\n * @returns {Boolean}\n */\nAttributeElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'attributeElement' || type === 'view:attributeElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'attributeElement' || type === 'view:attributeElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element');\n    }\n};\n// Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getFillerOffset() {\n    // <b>foo</b> does not need filler.\n    if (nonUiChildrenCount(this)) {\n        return null;\n    }\n    let element = this.parent;\n    // <p><b></b></p> needs filler -> <p><b><br></b></p>\n    while (element && element.is('attributeElement')) {\n        if (nonUiChildrenCount(element) > 1) {\n            return null;\n        }\n        element = element.parent;\n    }\n    if (!element || nonUiChildrenCount(element) > 1) {\n        return null;\n    }\n    // Render block filler at the end of element (after all ui elements).\n    return this.childCount;\n}\n// Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n//\n// @param {module:engine/view/element~Element} element\n// @returns {Number}\nfunction nonUiChildrenCount(element) {\n    return Array.from(element.getChildren()).filter(element => !element.is('uiElement')).length;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,OAAO,MAAM,WAAW;AAC/B,OAAOC,aAAa,MAAM,6CAA6C;AACvE;AACA,MAAMC,gBAAgB,GAAG,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,gBAAgB,SAASH,OAAO,CAAC;EAClD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,WAAW,GAAU;IACjB,KAAK,CAAC,YAAO,CAAC;IACd;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAGJ,gBAAgB;IACjC;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACK,GAAG,GAAG,IAAI;IACf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,YAAY,GAAG,IAAI;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIC,QAAQ,GAAG;IACX,OAAO,IAAI,CAACH,SAAS;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAII,EAAE,GAAG;IACL,OAAO,IAAI,CAACH,GAAG;EACnB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,qBAAqB,GAAG;IACpB,IAAI,IAAI,CAACD,EAAE,KAAK,IAAI,EAAE;MAClB;AACZ;AACA;AACA;AACA;MACY,MAAM,IAAIT,aAAa,CAAC,mDAAmD,EAAE,IAAI,CAAC;IACtF;IACA,OAAO,IAAIW,GAAG,CAAC,IAAI,CAACJ,YAAY,CAAC;EACrC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,SAAS,CAACC,YAAY,EAAE;IACpB;IACA,IAAI,IAAI,CAACJ,EAAE,KAAK,IAAI,IAAII,YAAY,CAACJ,EAAE,KAAK,IAAI,EAAE;MAC9C,OAAO,IAAI,CAACA,EAAE,KAAKI,YAAY,CAACJ,EAAE;IACtC;IACA,OAAO,KAAK,CAACG,SAAS,CAACC,YAAY,CAAC,IAAI,IAAI,CAACL,QAAQ,IAAIK,YAAY,CAACL,QAAQ;EAClF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,MAAM,GAAe;IAAA,IAAdC,IAAI,uEAAG,KAAK;IACf,MAAMC,MAAM,GAAG,KAAK,CAACF,MAAM,CAACC,IAAI,CAAC;IACjC;IACAC,MAAM,CAACX,SAAS,GAAG,IAAI,CAACA,SAAS;IACjC;IACAW,MAAM,CAACV,GAAG,GAAG,IAAI,CAACA,GAAG;IACrB,OAAOU,MAAM;EACjB;AACJ;AACAd,gBAAgB,CAACD,gBAAgB,GAAGA,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,gBAAgB,CAACe,SAAS,CAACC,EAAE,GAAG,UAAUC,IAAI,EAAEC,IAAI,EAAE;EAClD,IAAI,CAACA,IAAI,EAAE;IACP,OAAOD,IAAI,KAAK,kBAAkB,IAAIA,IAAI,KAAK,uBAAuB;IAClE;IACAA,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,cAAc,IAC7CA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,WAAW;EAC/C,CAAC,MACI;IACD,OAAOC,IAAI,KAAK,IAAI,CAACA,IAAI,KAAKD,IAAI,KAAK,kBAAkB,IAAIA,IAAI,KAAK,uBAAuB;IACzF;IACAA,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,cAAc,CAAC;EACtD;AACJ,CAAC;AACD;AACA;AACA;AACA,SAASf,eAAe,GAAG;EACvB;EACA,IAAIiB,kBAAkB,CAAC,IAAI,CAAC,EAAE;IAC1B,OAAO,IAAI;EACf;EACA,IAAIC,OAAO,GAAG,IAAI,CAACC,MAAM;EACzB;EACA,OAAOD,OAAO,IAAIA,OAAO,CAACJ,EAAE,CAAC,kBAAkB,CAAC,EAAE;IAC9C,IAAIG,kBAAkB,CAACC,OAAO,CAAC,GAAG,CAAC,EAAE;MACjC,OAAO,IAAI;IACf;IACAA,OAAO,GAAGA,OAAO,CAACC,MAAM;EAC5B;EACA,IAAI,CAACD,OAAO,IAAID,kBAAkB,CAACC,OAAO,CAAC,GAAG,CAAC,EAAE;IAC7C,OAAO,IAAI;EACf;EACA;EACA,OAAO,IAAI,CAACE,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA,SAASH,kBAAkB,CAACC,OAAO,EAAE;EACjC,OAAOG,KAAK,CAACC,IAAI,CAACJ,OAAO,CAACK,WAAW,EAAE,CAAC,CAACC,MAAM,CAACN,OAAO,IAAI,CAACA,OAAO,CAACJ,EAAE,CAAC,WAAW,CAAC,CAAC,CAACW,MAAM;AAC/F"},"metadata":{},"sourceType":"module"}