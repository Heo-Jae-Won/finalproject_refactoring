{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/addkeyboardhandlingforgrid\n */\n\n/**\n * A helper that adds a keyboard navigation support (arrow up/down/left/right) for grids.\n *\n * @param {Object} options Configuration options.\n * @param {module:utils/keystrokehandler~KeystrokeHandler} options.keystrokeHandler Keystroke handler to register navigation with arrow\n * keys.\n * @param {module:utils/focustracker~FocusTracker} options.focusTracker A focus tracker for grid elements.\n * @param {module:ui/viewcollection~ViewCollection} options.gridItems A collection of grid items.\n * @param {Number|Function} options.numberOfColumns Number of columns in the grid. Can be specified as a function that returns\n * the number (e.g. for responsive grids).\n */\nexport default function addKeyboardHandlingForGrid(_ref) {\n  let {\n    keystrokeHandler,\n    focusTracker,\n    gridItems,\n    numberOfColumns\n  } = _ref;\n  const getNumberOfColumns = typeof numberOfColumns === 'number' ? () => numberOfColumns : numberOfColumns;\n  keystrokeHandler.set('arrowright', getGridItemFocuser((focusedElementIndex, gridItems) => {\n    if (focusedElementIndex === gridItems.length - 1) {\n      return 0;\n    } else {\n      return focusedElementIndex + 1;\n    }\n  }));\n  keystrokeHandler.set('arrowleft', getGridItemFocuser((focusedElementIndex, gridItems) => {\n    if (focusedElementIndex === 0) {\n      return gridItems.length - 1;\n    } else {\n      return focusedElementIndex - 1;\n    }\n  }));\n  keystrokeHandler.set('arrowup', getGridItemFocuser((focusedElementIndex, gridItems) => {\n    let nextIndex = focusedElementIndex - getNumberOfColumns();\n    if (nextIndex < 0) {\n      nextIndex = focusedElementIndex + getNumberOfColumns() * Math.floor(gridItems.length / getNumberOfColumns());\n      if (nextIndex > gridItems.length - 1) {\n        nextIndex -= getNumberOfColumns();\n      }\n    }\n    return nextIndex;\n  }));\n  keystrokeHandler.set('arrowdown', getGridItemFocuser((focusedElementIndex, gridItems) => {\n    let nextIndex = focusedElementIndex + getNumberOfColumns();\n    if (nextIndex > gridItems.length - 1) {\n      nextIndex = focusedElementIndex % getNumberOfColumns();\n    }\n    return nextIndex;\n  }));\n  function getGridItemFocuser(getIndexToFocus) {\n    return evt => {\n      const focusedElement = gridItems.find(item => item.element === focusTracker.focusedElement);\n      const focusedElementIndex = gridItems.getIndex(focusedElement);\n      const nextIndexToFocus = getIndexToFocus(focusedElementIndex, gridItems);\n      gridItems.get(nextIndexToFocus).focus();\n      evt.stopPropagation();\n      evt.preventDefault();\n    };\n  }\n}","map":{"version":3,"names":["addKeyboardHandlingForGrid","keystrokeHandler","focusTracker","gridItems","numberOfColumns","getNumberOfColumns","set","getGridItemFocuser","focusedElementIndex","length","nextIndex","Math","floor","getIndexToFocus","evt","focusedElement","find","item","element","getIndex","nextIndexToFocus","get","focus","stopPropagation","preventDefault"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-ui/src/bindings/addkeyboardhandlingforgrid.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/addkeyboardhandlingforgrid\n */\n\n/**\n * A helper that adds a keyboard navigation support (arrow up/down/left/right) for grids.\n *\n * @param {Object} options Configuration options.\n * @param {module:utils/keystrokehandler~KeystrokeHandler} options.keystrokeHandler Keystroke handler to register navigation with arrow\n * keys.\n * @param {module:utils/focustracker~FocusTracker} options.focusTracker A focus tracker for grid elements.\n * @param {module:ui/viewcollection~ViewCollection} options.gridItems A collection of grid items.\n * @param {Number|Function} options.numberOfColumns Number of columns in the grid. Can be specified as a function that returns\n * the number (e.g. for responsive grids).\n */\nexport default function addKeyboardHandlingForGrid( { keystrokeHandler, focusTracker, gridItems, numberOfColumns } ) {\n\tconst getNumberOfColumns = typeof numberOfColumns === 'number' ? () => numberOfColumns : numberOfColumns;\n\n\tkeystrokeHandler.set( 'arrowright', getGridItemFocuser( ( focusedElementIndex, gridItems ) => {\n\t\tif ( focusedElementIndex === gridItems.length - 1 ) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn focusedElementIndex + 1;\n\t\t}\n\t} ) );\n\n\tkeystrokeHandler.set( 'arrowleft', getGridItemFocuser( ( focusedElementIndex, gridItems ) => {\n\t\tif ( focusedElementIndex === 0 ) {\n\t\t\treturn gridItems.length - 1;\n\t\t} else {\n\t\t\treturn focusedElementIndex - 1;\n\t\t}\n\t} ) );\n\n\tkeystrokeHandler.set( 'arrowup', getGridItemFocuser( ( focusedElementIndex, gridItems ) => {\n\t\tlet nextIndex = focusedElementIndex - getNumberOfColumns();\n\n\t\tif ( nextIndex < 0 ) {\n\t\t\tnextIndex = focusedElementIndex + getNumberOfColumns() * Math.floor( gridItems.length / getNumberOfColumns() );\n\n\t\t\tif ( nextIndex > gridItems.length - 1 ) {\n\t\t\t\tnextIndex -= getNumberOfColumns();\n\t\t\t}\n\t\t}\n\n\t\treturn nextIndex;\n\t} ) );\n\n\tkeystrokeHandler.set( 'arrowdown', getGridItemFocuser( ( focusedElementIndex, gridItems ) => {\n\t\tlet nextIndex = focusedElementIndex + getNumberOfColumns();\n\n\t\tif ( nextIndex > gridItems.length - 1 ) {\n\t\t\tnextIndex = focusedElementIndex % getNumberOfColumns();\n\t\t}\n\n\t\treturn nextIndex;\n\t} ) );\n\n\tfunction getGridItemFocuser( getIndexToFocus ) {\n\t\treturn evt => {\n\t\t\tconst focusedElement = gridItems.find( item => item.element === focusTracker.focusedElement );\n\t\t\tconst focusedElementIndex = gridItems.getIndex( focusedElement );\n\t\t\tconst nextIndexToFocus = getIndexToFocus( focusedElementIndex, gridItems );\n\n\t\t\tgridItems.get( nextIndexToFocus ).focus();\n\n\t\t\tevt.stopPropagation();\n\t\t\tevt.preventDefault();\n\t\t};\n\t}\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,0BAA0B,OAAmE;EAAA,IAAjE;IAAEC,gBAAgB;IAAEC,YAAY;IAAEC,SAAS;IAAEC;EAAgB,CAAC;EACjH,MAAMC,kBAAkB,GAAG,OAAOD,eAAe,KAAK,QAAQ,GAAG,MAAMA,eAAe,GAAGA,eAAe;EAExGH,gBAAgB,CAACK,GAAG,CAAE,YAAY,EAAEC,kBAAkB,CAAE,CAAEC,mBAAmB,EAAEL,SAAS,KAAM;IAC7F,IAAKK,mBAAmB,KAAKL,SAAS,CAACM,MAAM,GAAG,CAAC,EAAG;MACnD,OAAO,CAAC;IACT,CAAC,MAAM;MACN,OAAOD,mBAAmB,GAAG,CAAC;IAC/B;EACD,CAAC,CAAE,CAAE;EAELP,gBAAgB,CAACK,GAAG,CAAE,WAAW,EAAEC,kBAAkB,CAAE,CAAEC,mBAAmB,EAAEL,SAAS,KAAM;IAC5F,IAAKK,mBAAmB,KAAK,CAAC,EAAG;MAChC,OAAOL,SAAS,CAACM,MAAM,GAAG,CAAC;IAC5B,CAAC,MAAM;MACN,OAAOD,mBAAmB,GAAG,CAAC;IAC/B;EACD,CAAC,CAAE,CAAE;EAELP,gBAAgB,CAACK,GAAG,CAAE,SAAS,EAAEC,kBAAkB,CAAE,CAAEC,mBAAmB,EAAEL,SAAS,KAAM;IAC1F,IAAIO,SAAS,GAAGF,mBAAmB,GAAGH,kBAAkB,EAAE;IAE1D,IAAKK,SAAS,GAAG,CAAC,EAAG;MACpBA,SAAS,GAAGF,mBAAmB,GAAGH,kBAAkB,EAAE,GAAGM,IAAI,CAACC,KAAK,CAAET,SAAS,CAACM,MAAM,GAAGJ,kBAAkB,EAAE,CAAE;MAE9G,IAAKK,SAAS,GAAGP,SAAS,CAACM,MAAM,GAAG,CAAC,EAAG;QACvCC,SAAS,IAAIL,kBAAkB,EAAE;MAClC;IACD;IAEA,OAAOK,SAAS;EACjB,CAAC,CAAE,CAAE;EAELT,gBAAgB,CAACK,GAAG,CAAE,WAAW,EAAEC,kBAAkB,CAAE,CAAEC,mBAAmB,EAAEL,SAAS,KAAM;IAC5F,IAAIO,SAAS,GAAGF,mBAAmB,GAAGH,kBAAkB,EAAE;IAE1D,IAAKK,SAAS,GAAGP,SAAS,CAACM,MAAM,GAAG,CAAC,EAAG;MACvCC,SAAS,GAAGF,mBAAmB,GAAGH,kBAAkB,EAAE;IACvD;IAEA,OAAOK,SAAS;EACjB,CAAC,CAAE,CAAE;EAEL,SAASH,kBAAkB,CAAEM,eAAe,EAAG;IAC9C,OAAOC,GAAG,IAAI;MACb,MAAMC,cAAc,GAAGZ,SAAS,CAACa,IAAI,CAAEC,IAAI,IAAIA,IAAI,CAACC,OAAO,KAAKhB,YAAY,CAACa,cAAc,CAAE;MAC7F,MAAMP,mBAAmB,GAAGL,SAAS,CAACgB,QAAQ,CAAEJ,cAAc,CAAE;MAChE,MAAMK,gBAAgB,GAAGP,eAAe,CAAEL,mBAAmB,EAAEL,SAAS,CAAE;MAE1EA,SAAS,CAACkB,GAAG,CAAED,gBAAgB,CAAE,CAACE,KAAK,EAAE;MAEzCR,GAAG,CAACS,eAAe,EAAE;MACrBT,GAAG,CAACU,cAAc,EAAE;IACrB,CAAC;EACF;AACD"},"metadata":{},"sourceType":"module"}