{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable new-cap */\n/**\n * @module utils/dom/emittermixin\n */\nimport { _getEmitterListenedTo, _setEmitterId, Emitter as BaseEmitter } from '../emittermixin';\nimport uid from '../uid';\nimport isNode from './isnode';\nimport isWindow from './iswindow';\n/**\n * Mixin that injects the DOM events API into its host. It provides the API\n * compatible with {@link module:utils/emittermixin~EmitterMixin}.\n *\n * DOM emitter mixin is by default available in the {@link module:ui/view~View} class,\n * but it can also be mixed into any other class:\n *\n *\t\timport mix from '../utils/mix.js';\n *\t\timport DomEmitterMixin from '../utils/dom/emittermixin.js';\n *\t\timport { Emitter } from '../utils/emittermixin.js';\n *\n *\t\tclass SomeView extends DomEmitterMixin( Emitter ) {}\n *\n *\t\tconst view = new SomeView();\n *\t\tview.listenTo( domElement, ( evt, domEvt ) => {\n *\t\t\tconsole.log( evt, domEvt );\n *\t\t} );\n *\n * @mixin EmitterMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n */\nexport default function DomEmitterMixin(base) {\n  class Mixin extends base {\n    listenTo(emitter, event, callback) {\n      let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      // Check if emitter is an instance of DOM Node. If so, use corresponding ProxyEmitter (or create one if not existing).\n      if (isNode(emitter) || isWindow(emitter)) {\n        const proxyOptions = {\n          capture: !!options.useCapture,\n          passive: !!options.usePassive\n        };\n        const proxyEmitter = this._getProxyEmitter(emitter, proxyOptions) || new ProxyEmitter(emitter, proxyOptions);\n        this.listenTo(proxyEmitter, event, callback, options);\n      } else {\n        // Execute parent class method with Emitter (or ProxyEmitter) instance.\n        BaseEmitter.prototype.listenTo.call(this, emitter, event, callback, options);\n      }\n    }\n    stopListening(emitter, event, callback) {\n      // Check if the emitter is an instance of DOM Node. If so, forward the call to the corresponding ProxyEmitters.\n      if (isNode(emitter) || isWindow(emitter)) {\n        const proxyEmitters = this._getAllProxyEmitters(emitter);\n        for (const proxy of proxyEmitters) {\n          this.stopListening(proxy, event, callback);\n        }\n      } else {\n        // Execute parent class method with Emitter (or ProxyEmitter) instance.\n        BaseEmitter.prototype.stopListening.call(this, emitter, event, callback);\n      }\n    }\n    /**\n     * Retrieves ProxyEmitter instance for given DOM Node residing in this Host and given options.\n     *\n     * @private\n     * @param {Node|Window} node DOM Node of the ProxyEmitter.\n     * @param {Object} [options] Additional options.\n     * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n     * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n     * @param {Boolean} [options.usePassive=false] Indicates that the function specified by listener will never call preventDefault()\n     * and prevents blocking browser's main thread by this event handler.\n     * @returns {module:utils/dom/emittermixin~ProxyEmitter|null} ProxyEmitter instance bound to the DOM Node.\n     */\n    _getProxyEmitter(node, options) {\n      return _getEmitterListenedTo(this, getProxyEmitterId(node, options));\n    }\n    /**\n     * Retrieves all the ProxyEmitter instances for given DOM Node residing in this Host.\n     *\n     * @private\n     * @param {Node|Window} node DOM Node of the ProxyEmitter.\n     * @returns {Array.<module:utils/dom/emittermixin~ProxyEmitter>}\n     */\n    _getAllProxyEmitters(node) {\n      return [{\n        capture: false,\n        passive: false\n      }, {\n        capture: false,\n        passive: true\n      }, {\n        capture: true,\n        passive: false\n      }, {\n        capture: true,\n        passive: true\n      }].map(options => this._getProxyEmitter(node, options)).filter(proxy => !!proxy);\n    }\n  }\n  return Mixin;\n}\nexport const Emitter = DomEmitterMixin(BaseEmitter);\n// Backward compatibility with `mix`\n['_getProxyEmitter', '_getAllProxyEmitters', 'on', 'once', 'off', 'listenTo', 'stopListening', 'fire', 'delegate', 'stopDelegating', '_addEventListener', '_removeEventListener'].forEach(key => {\n  DomEmitterMixin[key] = Emitter.prototype[key];\n});\n/**\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#on}.\n * There is a separate instance for each combination of modes (useCapture & usePassive). The mode is concatenated with\n * UID stored in HTMLElement to give each instance unique identifier.\n *\n *                                  listenTo( click, ... )\n *                    +-----------------------------------------+\n *                    |              stopListening( ... )       |\n *     +----------------------------+                           |             addEventListener( click, ... )\n *     | Host                       |                           |   +---------------------------------------------+\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\n *     | _listeningTo: {            |                +----------v-------------+                                   |\n *     |   UID+mode: {              |                | ProxyEmitter           |                                   |\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\n *     | }                          |                | _domListeners: {},     |                                   |\n *     | +------------------------+ |                | _emitterId: UID+mode   |                                   |\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\n *     | +------------------------+ |                           |   |                                             |\n *     +--------------^-------------+                           |   +---------------------------------------------+\n *                    |                                         |                  click (DOM Event)\n *                    +-----------------------------------------+\n *                                fire( click, DOM Event )\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n * @private\n */\nclass ProxyEmitter extends BaseEmitter {\n  /**\n   * @param {Node|Window} node DOM Node that fires events.\n   * @param {Object} [options] Additional options.\n   * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n   * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n   * @param {Boolean} [options.usePassive=false] Indicates that the function specified by listener will never call preventDefault()\n   * and prevents blocking browser's main thread by this event handler.\n   */\n  constructor(node, options) {\n    super();\n    // Set emitter ID to match DOM Node \"expando\" property.\n    _setEmitterId(this, getProxyEmitterId(node, options));\n    // Remember the DOM Node this ProxyEmitter is bound to.\n    this._domNode = node;\n    // And given options.\n    this._options = options;\n  }\n  /**\n   * Registers a callback function to be executed when an event is fired.\n   *\n   * It attaches a native DOM listener to the DOM Node. When fired,\n   * a corresponding Emitter event will also fire with DOM Event object as an argument.\n   *\n   * **Note**: This is automatically called by the\n   * {@link module:utils/emittermixin~EmitterMixin#listenTo `EmitterMixin#listenTo()`}.\n   *\n   * @method module:utils/dom/emittermixin~ProxyEmitter#attach\n   * @param {String} event The name of the event.\n   */\n  attach(event) {\n    // If the DOM Listener for given event already exist it is pointless\n    // to attach another one.\n    if (this._domListeners && this._domListeners[event]) {\n      return;\n    }\n    const domListener = this._createDomListener(event);\n    // Attach the native DOM listener to DOM Node.\n    this._domNode.addEventListener(event, domListener, this._options);\n    if (!this._domListeners) {\n      this._domListeners = {};\n    }\n    // Store the native DOM listener in this ProxyEmitter. It will be helpful\n    // when stopping listening to the event.\n    this._domListeners[event] = domListener;\n  }\n  /**\n   * Stops executing the callback on the given event.\n   *\n   * **Note**: This is automatically called by the\n   * {@link module:utils/emittermixin~EmitterMixin#stopListening `EmitterMixin#stopListening()`}.\n   *\n   * @method module:utils/dom/emittermixin~ProxyEmitter#detach\n   * @param {String} event The name of the event.\n   */\n  detach(event) {\n    let events;\n    // Remove native DOM listeners which are orphans. If no callbacks\n    // are awaiting given event, detach native DOM listener from DOM Node.\n    // See: {@link attach}.\n    if (this._domListeners[event] && (!(events = this._events[event]) || !events.callbacks.length)) {\n      this._domListeners[event].removeListener();\n    }\n  }\n  /**\n   * Adds callback to emitter for given event.\n   *\n   * @protected\n   * @method module:utils/dom/emittermixin~ProxyEmitter#_addEventListener\n   * @param {String} event The name of the event.\n   * @param {Function} callback The function to be called on event.\n   * @param {Object} [options={}] Additional options.\n   * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n   * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n   * order they were added.\n   */\n  _addEventListener(event, callback, options) {\n    this.attach(event);\n    BaseEmitter.prototype._addEventListener.call(this, event, callback, options);\n  }\n  /**\n   * Removes callback from emitter for given event.\n   *\n   * @protected\n   * @method module:utils/dom/emittermixin~ProxyEmitter#_removeEventListener\n   * @param {String} event The name of the event.\n   * @param {Function} callback The function to stop being called.\n   */\n  _removeEventListener(event, callback) {\n    BaseEmitter.prototype._removeEventListener.call(this, event, callback);\n    this.detach(event);\n  }\n  /**\n   * Creates a native DOM listener callback. When the native DOM event\n   * is fired it will fire corresponding event on this ProxyEmitter.\n   * Note: A native DOM Event is passed as an argument.\n   *\n   * @private\n   * @method module:utils/dom/emittermixin~ProxyEmitter#_createDomListener\n   * @param {String} event The name of the event.\n   * @returns {Function} The DOM listener callback.\n   */\n  _createDomListener(event) {\n    const domListener = domEvt => {\n      this.fire(event, domEvt);\n    };\n    // Supply the DOM listener callback with a function that will help\n    // detach it from the DOM Node, when it is no longer necessary.\n    // See: {@link detach}.\n    domListener.removeListener = () => {\n      this._domNode.removeEventListener(event, domListener, this._options);\n      delete this._domListeners[event];\n    };\n    return domListener;\n  }\n}\n// Gets an unique DOM Node identifier. The identifier will be set if not defined.\n//\n// @private\n// @param {Node} node\n// @returns {String} UID for given DOM Node.\nfunction getNodeUID(node) {\n  return node['data-ck-expando'] || (node['data-ck-expando'] = uid());\n}\n// Gets id of the ProxyEmitter for the given node.\n//\n// Combines DOM Node identifier and additional options.\n//\n// @private\n// @param {Node} node\n// @param {Object} options Additional options.\n// @returns {String} ProxyEmitter id.\nfunction getProxyEmitterId(node, options) {\n  let id = getNodeUID(node);\n  for (const option of Object.keys(options).sort()) {\n    if (options[option]) {\n      id += '-' + option;\n    }\n  }\n  return id;\n}","map":{"version":3,"names":["_getEmitterListenedTo","_setEmitterId","Emitter","BaseEmitter","uid","isNode","isWindow","DomEmitterMixin","base","Mixin","listenTo","emitter","event","callback","options","proxyOptions","capture","useCapture","passive","usePassive","proxyEmitter","_getProxyEmitter","ProxyEmitter","prototype","call","stopListening","proxyEmitters","_getAllProxyEmitters","proxy","node","getProxyEmitterId","map","filter","forEach","key","constructor","_domNode","_options","attach","_domListeners","domListener","_createDomListener","addEventListener","detach","events","_events","callbacks","length","removeListener","_addEventListener","_removeEventListener","domEvt","fire","removeEventListener","getNodeUID","id","option","Object","keys","sort"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable new-cap */\n/**\n * @module utils/dom/emittermixin\n */\nimport { _getEmitterListenedTo, _setEmitterId, Emitter as BaseEmitter } from '../emittermixin';\nimport uid from '../uid';\nimport isNode from './isnode';\nimport isWindow from './iswindow';\n/**\n * Mixin that injects the DOM events API into its host. It provides the API\n * compatible with {@link module:utils/emittermixin~EmitterMixin}.\n *\n * DOM emitter mixin is by default available in the {@link module:ui/view~View} class,\n * but it can also be mixed into any other class:\n *\n *\t\timport mix from '../utils/mix.js';\n *\t\timport DomEmitterMixin from '../utils/dom/emittermixin.js';\n *\t\timport { Emitter } from '../utils/emittermixin.js';\n *\n *\t\tclass SomeView extends DomEmitterMixin( Emitter ) {}\n *\n *\t\tconst view = new SomeView();\n *\t\tview.listenTo( domElement, ( evt, domEvt ) => {\n *\t\t\tconsole.log( evt, domEvt );\n *\t\t} );\n *\n * @mixin EmitterMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n */\nexport default function DomEmitterMixin(base) {\n    class Mixin extends base {\n        listenTo(emitter, event, callback, options = {}) {\n            // Check if emitter is an instance of DOM Node. If so, use corresponding ProxyEmitter (or create one if not existing).\n            if (isNode(emitter) || isWindow(emitter)) {\n                const proxyOptions = {\n                    capture: !!options.useCapture,\n                    passive: !!options.usePassive\n                };\n                const proxyEmitter = this._getProxyEmitter(emitter, proxyOptions) || new ProxyEmitter(emitter, proxyOptions);\n                this.listenTo(proxyEmitter, event, callback, options);\n            }\n            else {\n                // Execute parent class method with Emitter (or ProxyEmitter) instance.\n                BaseEmitter.prototype.listenTo.call(this, emitter, event, callback, options);\n            }\n        }\n        stopListening(emitter, event, callback) {\n            // Check if the emitter is an instance of DOM Node. If so, forward the call to the corresponding ProxyEmitters.\n            if (isNode(emitter) || isWindow(emitter)) {\n                const proxyEmitters = this._getAllProxyEmitters(emitter);\n                for (const proxy of proxyEmitters) {\n                    this.stopListening(proxy, event, callback);\n                }\n            }\n            else {\n                // Execute parent class method with Emitter (or ProxyEmitter) instance.\n                BaseEmitter.prototype.stopListening.call(this, emitter, event, callback);\n            }\n        }\n        /**\n         * Retrieves ProxyEmitter instance for given DOM Node residing in this Host and given options.\n         *\n         * @private\n         * @param {Node|Window} node DOM Node of the ProxyEmitter.\n         * @param {Object} [options] Additional options.\n         * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n         * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n         * @param {Boolean} [options.usePassive=false] Indicates that the function specified by listener will never call preventDefault()\n         * and prevents blocking browser's main thread by this event handler.\n         * @returns {module:utils/dom/emittermixin~ProxyEmitter|null} ProxyEmitter instance bound to the DOM Node.\n         */\n        _getProxyEmitter(node, options) {\n            return _getEmitterListenedTo(this, getProxyEmitterId(node, options));\n        }\n        /**\n         * Retrieves all the ProxyEmitter instances for given DOM Node residing in this Host.\n         *\n         * @private\n         * @param {Node|Window} node DOM Node of the ProxyEmitter.\n         * @returns {Array.<module:utils/dom/emittermixin~ProxyEmitter>}\n         */\n        _getAllProxyEmitters(node) {\n            return [\n                { capture: false, passive: false },\n                { capture: false, passive: true },\n                { capture: true, passive: false },\n                { capture: true, passive: true }\n            ].map(options => this._getProxyEmitter(node, options)).filter(proxy => !!proxy);\n        }\n    }\n    return Mixin;\n}\nexport const Emitter = DomEmitterMixin(BaseEmitter);\n// Backward compatibility with `mix`\n([\n    '_getProxyEmitter', '_getAllProxyEmitters',\n    'on', 'once', 'off', 'listenTo',\n    'stopListening', 'fire', 'delegate', 'stopDelegating',\n    '_addEventListener', '_removeEventListener'\n]).forEach(key => {\n    DomEmitterMixin[key] = Emitter.prototype[key];\n});\n/**\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#on}.\n * There is a separate instance for each combination of modes (useCapture & usePassive). The mode is concatenated with\n * UID stored in HTMLElement to give each instance unique identifier.\n *\n *                                  listenTo( click, ... )\n *                    +-----------------------------------------+\n *                    |              stopListening( ... )       |\n *     +----------------------------+                           |             addEventListener( click, ... )\n *     | Host                       |                           |   +---------------------------------------------+\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\n *     | _listeningTo: {            |                +----------v-------------+                                   |\n *     |   UID+mode: {              |                | ProxyEmitter           |                                   |\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\n *     | }                          |                | _domListeners: {},     |                                   |\n *     | +------------------------+ |                | _emitterId: UID+mode   |                                   |\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\n *     | +------------------------+ |                           |   |                                             |\n *     +--------------^-------------+                           |   +---------------------------------------------+\n *                    |                                         |                  click (DOM Event)\n *                    +-----------------------------------------+\n *                                fire( click, DOM Event )\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n * @private\n */\nclass ProxyEmitter extends BaseEmitter {\n    /**\n     * @param {Node|Window} node DOM Node that fires events.\n     * @param {Object} [options] Additional options.\n     * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n     * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n     * @param {Boolean} [options.usePassive=false] Indicates that the function specified by listener will never call preventDefault()\n     * and prevents blocking browser's main thread by this event handler.\n     */\n    constructor(node, options) {\n        super();\n        // Set emitter ID to match DOM Node \"expando\" property.\n        _setEmitterId(this, getProxyEmitterId(node, options));\n        // Remember the DOM Node this ProxyEmitter is bound to.\n        this._domNode = node;\n        // And given options.\n        this._options = options;\n    }\n    /**\n     * Registers a callback function to be executed when an event is fired.\n     *\n     * It attaches a native DOM listener to the DOM Node. When fired,\n     * a corresponding Emitter event will also fire with DOM Event object as an argument.\n     *\n     * **Note**: This is automatically called by the\n     * {@link module:utils/emittermixin~EmitterMixin#listenTo `EmitterMixin#listenTo()`}.\n     *\n     * @method module:utils/dom/emittermixin~ProxyEmitter#attach\n     * @param {String} event The name of the event.\n     */\n    attach(event) {\n        // If the DOM Listener for given event already exist it is pointless\n        // to attach another one.\n        if (this._domListeners && this._domListeners[event]) {\n            return;\n        }\n        const domListener = this._createDomListener(event);\n        // Attach the native DOM listener to DOM Node.\n        this._domNode.addEventListener(event, domListener, this._options);\n        if (!this._domListeners) {\n            this._domListeners = {};\n        }\n        // Store the native DOM listener in this ProxyEmitter. It will be helpful\n        // when stopping listening to the event.\n        this._domListeners[event] = domListener;\n    }\n    /**\n     * Stops executing the callback on the given event.\n     *\n     * **Note**: This is automatically called by the\n     * {@link module:utils/emittermixin~EmitterMixin#stopListening `EmitterMixin#stopListening()`}.\n     *\n     * @method module:utils/dom/emittermixin~ProxyEmitter#detach\n     * @param {String} event The name of the event.\n     */\n    detach(event) {\n        let events;\n        // Remove native DOM listeners which are orphans. If no callbacks\n        // are awaiting given event, detach native DOM listener from DOM Node.\n        // See: {@link attach}.\n        if (this._domListeners[event] && (!(events = this._events[event]) || !events.callbacks.length)) {\n            this._domListeners[event].removeListener();\n        }\n    }\n    /**\n     * Adds callback to emitter for given event.\n     *\n     * @protected\n     * @method module:utils/dom/emittermixin~ProxyEmitter#_addEventListener\n     * @param {String} event The name of the event.\n     * @param {Function} callback The function to be called on event.\n     * @param {Object} [options={}] Additional options.\n     * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n     * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n     * order they were added.\n     */\n    _addEventListener(event, callback, options) {\n        this.attach(event);\n        BaseEmitter.prototype._addEventListener.call(this, event, callback, options);\n    }\n    /**\n     * Removes callback from emitter for given event.\n     *\n     * @protected\n     * @method module:utils/dom/emittermixin~ProxyEmitter#_removeEventListener\n     * @param {String} event The name of the event.\n     * @param {Function} callback The function to stop being called.\n     */\n    _removeEventListener(event, callback) {\n        BaseEmitter.prototype._removeEventListener.call(this, event, callback);\n        this.detach(event);\n    }\n    /**\n     * Creates a native DOM listener callback. When the native DOM event\n     * is fired it will fire corresponding event on this ProxyEmitter.\n     * Note: A native DOM Event is passed as an argument.\n     *\n     * @private\n     * @method module:utils/dom/emittermixin~ProxyEmitter#_createDomListener\n     * @param {String} event The name of the event.\n     * @returns {Function} The DOM listener callback.\n     */\n    _createDomListener(event) {\n        const domListener = (domEvt) => {\n            this.fire(event, domEvt);\n        };\n        // Supply the DOM listener callback with a function that will help\n        // detach it from the DOM Node, when it is no longer necessary.\n        // See: {@link detach}.\n        domListener.removeListener = () => {\n            this._domNode.removeEventListener(event, domListener, this._options);\n            delete this._domListeners[event];\n        };\n        return domListener;\n    }\n}\n// Gets an unique DOM Node identifier. The identifier will be set if not defined.\n//\n// @private\n// @param {Node} node\n// @returns {String} UID for given DOM Node.\nfunction getNodeUID(node) {\n    return node['data-ck-expando'] || (node['data-ck-expando'] = uid());\n}\n// Gets id of the ProxyEmitter for the given node.\n//\n// Combines DOM Node identifier and additional options.\n//\n// @private\n// @param {Node} node\n// @param {Object} options Additional options.\n// @returns {String} ProxyEmitter id.\nfunction getProxyEmitterId(node, options) {\n    let id = getNodeUID(node);\n    for (const option of Object.keys(options).sort()) {\n        if (options[option]) {\n            id += '-' + option;\n        }\n    }\n    return id;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}