{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * @module engine/model/node\n */\nimport TypeCheckable from './typecheckable';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n/**\n * Model node. Most basic structure of model tree.\n *\n * This is an abstract class that is a base for other classes representing different nodes in model.\n *\n * **Note:** If a node is detached from the model tree, you can manipulate it using it's API.\n * However, it is **very important** that nodes already attached to model tree should be only changed through\n * {@link module:engine/model/writer~Writer Writer API}.\n *\n * Changes done by `Node` methods, like {@link module:engine/model/element~Element#_insertChild _insertChild} or\n * {@link module:engine/model/node~Node#_setAttribute _setAttribute}\n * do not generate {@link module:engine/model/operation/operation~Operation operations}\n * which are essential for correct editor work if you modify nodes in {@link module:engine/model/document~Document document} root.\n *\n * The flow of working on `Node` (and classes that inherits from it) is as such:\n * 1. You can create a `Node` instance, modify it using it's API.\n * 2. Add `Node` to the model using `Batch` API.\n * 3. Change `Node` that was already added to the model using `Batch` API.\n *\n * Similarly, you cannot use `Batch` API on a node that has not been added to the model tree, with the exception\n * of {@link module:engine/model/writer~Writer#insert inserting} that node to the model tree.\n *\n * Be aware that using {@link module:engine/model/writer~Writer#remove remove from Batch API} does not allow to use `Node` API because\n * the information about `Node` is still kept in model document.\n *\n * In case of {@link module:engine/model/element~Element element node}, adding and removing children also counts as changing a node and\n * follows same rules.\n */\nexport default class Node extends TypeCheckable {\n  /**\n   * Creates a model node.\n   *\n   * This is an abstract class, so this constructor should not be used directly.\n   *\n   * @abstract\n   * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n   */\n  constructor(attrs) {\n    super();\n    /**\n     * Parent of this node. It could be {@link module:engine/model/element~Element}\n     * or {@link module:engine/model/documentfragment~DocumentFragment}.\n     * Equals to `null` if the node has no parent.\n     *\n     * @readonly\n     * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n     */\n    this.parent = null;\n    /**\n     * Attributes set on this node.\n     *\n     * @private\n     * @member {Map} module:engine/model/node~Node#_attrs\n     */\n    this._attrs = toMap(attrs);\n  }\n  /**\n   * {@link module:engine/model/document~Document Document} that owns this root element.\n   *\n   * @readonly\n   * @type {module:engine/model/document~Document|null}\n   */\n  get document() {\n    return null;\n  }\n  /**\n   * Index of this node in it's parent or `null` if the node has no parent.\n   *\n   * Accessing this property throws an error if this node's parent element does not contain it.\n   * This means that model tree got broken.\n   *\n   * @readonly\n   * @type {Number|null}\n   */\n  get index() {\n    let pos;\n    if (!this.parent) {\n      return null;\n    }\n    if ((pos = this.parent.getChildIndex(this)) === null) {\n      throw new CKEditorError('model-node-not-found-in-parent', this);\n    }\n    return pos;\n  }\n  /**\n   * Offset at which this node starts in it's parent. It is equal to the sum of {@link #offsetSize offsetSize}\n   * of all it's previous siblings. Equals to `null` if node has no parent.\n   *\n   * Accessing this property throws an error if this node's parent element does not contain it.\n   * This means that model tree got broken.\n   *\n   * @readonly\n   * @type {Number|null}\n   */\n  get startOffset() {\n    let pos;\n    if (!this.parent) {\n      return null;\n    }\n    if ((pos = this.parent.getChildStartOffset(this)) === null) {\n      throw new CKEditorError('model-node-not-found-in-parent', this);\n    }\n    return pos;\n  }\n  /**\n   * Offset size of this node. Represents how much \"offset space\" is occupied by the node in it's parent.\n   * It is important for {@link module:engine/model/position~Position position}. When node has `offsetSize` greater than `1`, position\n   * can be placed between that node start and end. `offsetSize` greater than `1` is for nodes that represents more\n   * than one entity, i.e. {@link module:engine/model/text~Text text node}.\n   *\n   * @readonly\n   * @type {Number}\n   */\n  get offsetSize() {\n    return 1;\n  }\n  /**\n   * Offset at which this node ends in it's parent. It is equal to the sum of this node's\n   * {@link module:engine/model/node~Node#startOffset start offset} and {@link #offsetSize offset size}.\n   * Equals to `null` if the node has no parent.\n   *\n   * @readonly\n   * @type {Number|null}\n   */\n  get endOffset() {\n    if (!this.parent) {\n      return null;\n    }\n    return this.startOffset + this.offsetSize;\n  }\n  /**\n   * Node's next sibling or `null` if the node is a last child of it's parent or if the node has no parent.\n   *\n   * @readonly\n   * @type {module:engine/model/node~Node|null}\n   */\n  get nextSibling() {\n    const index = this.index;\n    return index !== null && this.parent.getChild(index + 1) || null;\n  }\n  /**\n   * Node's previous sibling or `null` if the node is a first child of it's parent or if the node has no parent.\n   *\n   * @readonly\n   * @type {module:engine/model/node~Node|null}\n   */\n  get previousSibling() {\n    const index = this.index;\n    return index !== null && this.parent.getChild(index - 1) || null;\n  }\n  /**\n   * The top-most ancestor of the node. If node has no parent it is the root itself. If the node is a part\n   * of {@link module:engine/model/documentfragment~DocumentFragment}, it's `root` is equal to that `DocumentFragment`.\n   *\n   * @readonly\n   * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n   */\n  get root() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n    let root = this;\n    while (root.parent) {\n      root = root.parent;\n    }\n    return root;\n  }\n  /**\n   * Returns true if the node is in a tree rooted in the document (is a descendant of one of its roots).\n   *\n   * @returns {Boolean}\n   */\n  isAttached() {\n    return this.root.is('rootElement');\n  }\n  /**\n   * Gets path to the node. The path is an array containing starting offsets of consecutive ancestors of this node,\n   * beginning from {@link module:engine/model/node~Node#root root}, down to this node's starting offset. The path can be used to\n   * create {@link module:engine/model/position~Position Position} instance.\n   *\n   *\t\tconst abc = new Text( 'abc' );\n   *\t\tconst foo = new Text( 'foo' );\n   *\t\tconst h1 = new Element( 'h1', null, new Text( 'header' ) );\n   *\t\tconst p = new Element( 'p', null, [ abc, foo ] );\n   *\t\tconst div = new Element( 'div', null, [ h1, p ] );\n   *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n   *\t\th1.getPath(); // Returns [ 0 ].\n   *\t\tdiv.getPath(); // Returns [].\n   *\n   * @returns {Array.<Number>} The path.\n   */\n  getPath() {\n    const path = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n    let node = this;\n    while (node.parent) {\n      path.unshift(node.startOffset);\n      node = node.parent;\n    }\n    return path;\n  }\n  /**\n   * Returns ancestors array of this node.\n   *\n   * @param {Object} options Options object.\n   * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n   * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n   * otherwise root element will be the first item in the array.\n   * @returns {Array} Array with ancestors.\n   */\n  getAncestors() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const ancestors = [];\n    let parent = options.includeSelf ? this : this.parent;\n    while (parent) {\n      ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n      parent = parent.parent;\n    }\n    return ancestors;\n  }\n  /**\n   * Returns a {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n   * which is a common ancestor of both nodes.\n   *\n   * @param {module:engine/model/node~Node} node The second node.\n   * @param {Object} options Options object.\n   * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n   * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n   * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n   */\n  getCommonAncestor(node) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const ancestorsA = this.getAncestors(options);\n    const ancestorsB = node.getAncestors(options);\n    let i = 0;\n    while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n      i++;\n    }\n    return i === 0 ? null : ancestorsA[i - 1];\n  }\n  /**\n   * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n   * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n   *\n   * @param {module:engine/model/node~Node} node Node to compare with.\n   * @returns {Boolean}\n   */\n  isBefore(node) {\n    // Given node is not before this node if they are same.\n    if (this == node) {\n      return false;\n    }\n    // Return `false` if it is impossible to compare nodes.\n    if (this.root !== node.root) {\n      return false;\n    }\n    const thisPath = this.getPath();\n    const nodePath = node.getPath();\n    const result = compareArrays(thisPath, nodePath);\n    switch (result) {\n      case 'prefix':\n        return true;\n      case 'extension':\n        return false;\n      default:\n        return thisPath[result] < nodePath[result];\n    }\n  }\n  /**\n   * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n   * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n   *\n   * @param {module:engine/model/node~Node} node Node to compare with.\n   * @returns {Boolean}\n   */\n  isAfter(node) {\n    // Given node is not before this node if they are same.\n    if (this == node) {\n      return false;\n    }\n    // Return `false` if it is impossible to compare nodes.\n    if (this.root !== node.root) {\n      return false;\n    }\n    // In other cases, just check if the `node` is before, and return the opposite.\n    return !this.isBefore(node);\n  }\n  /**\n   * Checks if the node has an attribute with given key.\n   *\n   * @param {String} key Key of attribute to check.\n   * @returns {Boolean} `true` if attribute with given key is set on node, `false` otherwise.\n   */\n  hasAttribute(key) {\n    return this._attrs.has(key);\n  }\n  /**\n   * Gets an attribute value for given key or `undefined` if that attribute is not set on node.\n   *\n   * @param {String} key Key of attribute to look for.\n   * @returns {*} Attribute value or `undefined`.\n   */\n  getAttribute(key) {\n    return this._attrs.get(key);\n  }\n  /**\n   * Returns iterator that iterates over this node's attributes.\n   *\n   * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n   * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n   *\n   * @returns {Iterable.<*>}\n   */\n  getAttributes() {\n    return this._attrs.entries();\n  }\n  /**\n   * Returns iterator that iterates over this node's attribute keys.\n   *\n   * @returns {Iterable.<String>}\n   */\n  getAttributeKeys() {\n    return this._attrs.keys();\n  }\n  /**\n   * Converts `Node` to plain object and returns it.\n   *\n   * @returns {Object} `Node` converted to plain object.\n   */\n  toJSON() {\n    const json = {};\n    // Serializes attributes to the object.\n    // attributes = { a: 'foo', b: 1, c: true }.\n    if (this._attrs.size) {\n      json.attributes = Array.from(this._attrs).reduce((result, attr) => {\n        result[attr[0]] = attr[1];\n        return result;\n      }, {});\n    }\n    return json;\n  }\n  /**\n   * Creates a copy of this node, that is a node with exactly same attributes, and returns it.\n   *\n   * @internal\n   * @protected\n   * @returns {module:engine/model/node~Node} Node with same attributes as this node.\n   */\n  _clone(_deep) {\n    return new Node(this._attrs);\n  }\n  /**\n   * Removes this node from it's parent.\n   *\n   * @internal\n   * @see module:engine/model/writer~Writer#remove\n   * @protected\n   */\n  _remove() {\n    this.parent._removeChildren(this.index);\n  }\n  /**\n   * Sets attribute on the node. If attribute with the same key already is set, it's value is overwritten.\n   *\n   * @see module:engine/model/writer~Writer#setAttribute\n   * @internal\n   * @protected\n   * @param {String} key Key of attribute to set.\n   * @param {*} value Attribute value.\n   */\n  _setAttribute(key, value) {\n    this._attrs.set(key, value);\n  }\n  /**\n   * Removes all attributes from the node and sets given attributes.\n   *\n   * @see module:engine/model/writer~Writer#setAttributes\n   * @internal\n   * @protected\n   * @param {Object} [attrs] Attributes to set. See {@link module:utils/tomap~toMap} for a list of accepted values.\n   */\n  _setAttributesTo(attrs) {\n    this._attrs = toMap(attrs);\n  }\n  /**\n   * Removes an attribute with given key from the node.\n   *\n   * @see module:engine/model/writer~Writer#removeAttribute\n   * @internal\n   * @protected\n   * @param {String} key Key of attribute to remove.\n   * @returns {Boolean} `true` if the attribute was set on the element, `false` otherwise.\n   */\n  _removeAttribute(key) {\n    return this._attrs.delete(key);\n  }\n  /**\n   * Removes all attributes from the node.\n   *\n   * @see module:engine/model/writer~Writer#clearAttributes\n   * @internal\n   * @protected\n   */\n  _clearAttributes() {\n    this._attrs.clear();\n  }\n}\n/**\n * Checks whether this object is of the given type.\n *\n * This method is useful when processing model objects that are of unknown type. For example, a function\n * may return a {@link module:engine/model/documentfragment~DocumentFragment} or a {@link module:engine/model/node~Node}\n * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n *\n *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n *\n * Since this method is also available on a range of view objects, you can prefix the type of the object with\n * `model:` or `view:` to check, for example, if this is the model's or view's element:\n *\n *\t\tmodelElement.is( 'model:element' ); // -> true\n *\t\tmodelElement.is( 'view:element' ); // -> false\n *\n * By using this method it is also possible to check a name of an element:\n *\n *\t\timageElement.is( 'element', 'imageBlock' ); // -> true\n *\t\timageElement.is( 'element', 'imageBlock' ); // -> same as above\n *\t\timageElement.is( 'model:element', 'imageBlock' ); // -> same as above, but more precise\n *\n * The list of model objects which implement the `is()` method:\n *\n * * {@link module:engine/model/node~Node#is `Node#is()`}\n * * {@link module:engine/model/text~Text#is `Text#is()`}\n * * {@link module:engine/model/element~Element#is `Element#is()`}\n * * {@link module:engine/model/rootelement~RootElement#is `RootElement#is()`}\n * * {@link module:engine/model/position~Position#is `Position#is()`}\n * * {@link module:engine/model/liveposition~LivePosition#is `LivePosition#is()`}\n * * {@link module:engine/model/range~Range#is `Range#is()`}\n * * {@link module:engine/model/liverange~LiveRange#is `LiveRange#is()`}\n * * {@link module:engine/model/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n * * {@link module:engine/model/selection~Selection#is `Selection#is()`}\n * * {@link module:engine/model/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n * * {@link module:engine/model/markercollection~Marker#is `Marker#is()`}\n * * {@link module:engine/model/textproxy~TextProxy#is `TextProxy#is()`}\n *\n * @method #is\n * @param {String} type Type to check.\n * @returns {Boolean}\n */\nNode.prototype.is = function (type) {\n  return type === 'node' || type === 'model:node';\n};","map":{"version":3,"names":["TypeCheckable","toMap","CKEditorError","compareArrays","Node","constructor","attrs","parent","_attrs","document","index","pos","getChildIndex","startOffset","getChildStartOffset","offsetSize","endOffset","nextSibling","getChild","previousSibling","root","isAttached","is","getPath","path","node","unshift","getAncestors","options","ancestors","includeSelf","parentFirst","getCommonAncestor","ancestorsA","ancestorsB","i","isBefore","thisPath","nodePath","result","isAfter","hasAttribute","key","has","getAttribute","get","getAttributes","entries","getAttributeKeys","keys","toJSON","json","size","attributes","Array","from","reduce","attr","_clone","_deep","_remove","_removeChildren","_setAttribute","value","set","_setAttributesTo","_removeAttribute","delete","_clearAttributes","clear","prototype","type"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/model/node.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * @module engine/model/node\n */\nimport TypeCheckable from './typecheckable';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n/**\n * Model node. Most basic structure of model tree.\n *\n * This is an abstract class that is a base for other classes representing different nodes in model.\n *\n * **Note:** If a node is detached from the model tree, you can manipulate it using it's API.\n * However, it is **very important** that nodes already attached to model tree should be only changed through\n * {@link module:engine/model/writer~Writer Writer API}.\n *\n * Changes done by `Node` methods, like {@link module:engine/model/element~Element#_insertChild _insertChild} or\n * {@link module:engine/model/node~Node#_setAttribute _setAttribute}\n * do not generate {@link module:engine/model/operation/operation~Operation operations}\n * which are essential for correct editor work if you modify nodes in {@link module:engine/model/document~Document document} root.\n *\n * The flow of working on `Node` (and classes that inherits from it) is as such:\n * 1. You can create a `Node` instance, modify it using it's API.\n * 2. Add `Node` to the model using `Batch` API.\n * 3. Change `Node` that was already added to the model using `Batch` API.\n *\n * Similarly, you cannot use `Batch` API on a node that has not been added to the model tree, with the exception\n * of {@link module:engine/model/writer~Writer#insert inserting} that node to the model tree.\n *\n * Be aware that using {@link module:engine/model/writer~Writer#remove remove from Batch API} does not allow to use `Node` API because\n * the information about `Node` is still kept in model document.\n *\n * In case of {@link module:engine/model/element~Element element node}, adding and removing children also counts as changing a node and\n * follows same rules.\n */\nexport default class Node extends TypeCheckable {\n    /**\n     * Creates a model node.\n     *\n     * This is an abstract class, so this constructor should not be used directly.\n     *\n     * @abstract\n     * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n     */\n    constructor(attrs) {\n        super();\n        /**\n         * Parent of this node. It could be {@link module:engine/model/element~Element}\n         * or {@link module:engine/model/documentfragment~DocumentFragment}.\n         * Equals to `null` if the node has no parent.\n         *\n         * @readonly\n         * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n         */\n        this.parent = null;\n        /**\n         * Attributes set on this node.\n         *\n         * @private\n         * @member {Map} module:engine/model/node~Node#_attrs\n         */\n        this._attrs = toMap(attrs);\n    }\n    /**\n     * {@link module:engine/model/document~Document Document} that owns this root element.\n     *\n     * @readonly\n     * @type {module:engine/model/document~Document|null}\n     */\n    get document() {\n        return null;\n    }\n    /**\n     * Index of this node in it's parent or `null` if the node has no parent.\n     *\n     * Accessing this property throws an error if this node's parent element does not contain it.\n     * This means that model tree got broken.\n     *\n     * @readonly\n     * @type {Number|null}\n     */\n    get index() {\n        let pos;\n        if (!this.parent) {\n            return null;\n        }\n        if ((pos = this.parent.getChildIndex(this)) === null) {\n            throw new CKEditorError('model-node-not-found-in-parent', this);\n        }\n        return pos;\n    }\n    /**\n     * Offset at which this node starts in it's parent. It is equal to the sum of {@link #offsetSize offsetSize}\n     * of all it's previous siblings. Equals to `null` if node has no parent.\n     *\n     * Accessing this property throws an error if this node's parent element does not contain it.\n     * This means that model tree got broken.\n     *\n     * @readonly\n     * @type {Number|null}\n     */\n    get startOffset() {\n        let pos;\n        if (!this.parent) {\n            return null;\n        }\n        if ((pos = this.parent.getChildStartOffset(this)) === null) {\n            throw new CKEditorError('model-node-not-found-in-parent', this);\n        }\n        return pos;\n    }\n    /**\n     * Offset size of this node. Represents how much \"offset space\" is occupied by the node in it's parent.\n     * It is important for {@link module:engine/model/position~Position position}. When node has `offsetSize` greater than `1`, position\n     * can be placed between that node start and end. `offsetSize` greater than `1` is for nodes that represents more\n     * than one entity, i.e. {@link module:engine/model/text~Text text node}.\n     *\n     * @readonly\n     * @type {Number}\n     */\n    get offsetSize() {\n        return 1;\n    }\n    /**\n     * Offset at which this node ends in it's parent. It is equal to the sum of this node's\n     * {@link module:engine/model/node~Node#startOffset start offset} and {@link #offsetSize offset size}.\n     * Equals to `null` if the node has no parent.\n     *\n     * @readonly\n     * @type {Number|null}\n     */\n    get endOffset() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.startOffset + this.offsetSize;\n    }\n    /**\n     * Node's next sibling or `null` if the node is a last child of it's parent or if the node has no parent.\n     *\n     * @readonly\n     * @type {module:engine/model/node~Node|null}\n     */\n    get nextSibling() {\n        const index = this.index;\n        return (index !== null && this.parent.getChild(index + 1)) || null;\n    }\n    /**\n     * Node's previous sibling or `null` if the node is a first child of it's parent or if the node has no parent.\n     *\n     * @readonly\n     * @type {module:engine/model/node~Node|null}\n     */\n    get previousSibling() {\n        const index = this.index;\n        return (index !== null && this.parent.getChild(index - 1)) || null;\n    }\n    /**\n     * The top-most ancestor of the node. If node has no parent it is the root itself. If the node is a part\n     * of {@link module:engine/model/documentfragment~DocumentFragment}, it's `root` is equal to that `DocumentFragment`.\n     *\n     * @readonly\n     * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n     */\n    get root() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let root = this;\n        while (root.parent) {\n            root = root.parent;\n        }\n        return root;\n    }\n    /**\n     * Returns true if the node is in a tree rooted in the document (is a descendant of one of its roots).\n     *\n     * @returns {Boolean}\n     */\n    isAttached() {\n        return this.root.is('rootElement');\n    }\n    /**\n     * Gets path to the node. The path is an array containing starting offsets of consecutive ancestors of this node,\n     * beginning from {@link module:engine/model/node~Node#root root}, down to this node's starting offset. The path can be used to\n     * create {@link module:engine/model/position~Position Position} instance.\n     *\n     *\t\tconst abc = new Text( 'abc' );\n     *\t\tconst foo = new Text( 'foo' );\n     *\t\tconst h1 = new Element( 'h1', null, new Text( 'header' ) );\n     *\t\tconst p = new Element( 'p', null, [ abc, foo ] );\n     *\t\tconst div = new Element( 'div', null, [ h1, p ] );\n     *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n     *\t\th1.getPath(); // Returns [ 0 ].\n     *\t\tdiv.getPath(); // Returns [].\n     *\n     * @returns {Array.<Number>} The path.\n     */\n    getPath() {\n        const path = [];\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let node = this;\n        while (node.parent) {\n            path.unshift(node.startOffset);\n            node = node.parent;\n        }\n        return path;\n    }\n    /**\n     * Returns ancestors array of this node.\n     *\n     * @param {Object} options Options object.\n     * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n     * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n     * otherwise root element will be the first item in the array.\n     * @returns {Array} Array with ancestors.\n     */\n    getAncestors(options = {}) {\n        const ancestors = [];\n        let parent = options.includeSelf ? this : this.parent;\n        while (parent) {\n            ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n            parent = parent.parent;\n        }\n        return ancestors;\n    }\n    /**\n     * Returns a {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n     * which is a common ancestor of both nodes.\n     *\n     * @param {module:engine/model/node~Node} node The second node.\n     * @param {Object} options Options object.\n     * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n     * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n     * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n     */\n    getCommonAncestor(node, options = {}) {\n        const ancestorsA = this.getAncestors(options);\n        const ancestorsB = node.getAncestors(options);\n        let i = 0;\n        while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n            i++;\n        }\n        return i === 0 ? null : ancestorsA[i - 1];\n    }\n    /**\n     * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n     * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n     *\n     * @param {module:engine/model/node~Node} node Node to compare with.\n     * @returns {Boolean}\n     */\n    isBefore(node) {\n        // Given node is not before this node if they are same.\n        if (this == node) {\n            return false;\n        }\n        // Return `false` if it is impossible to compare nodes.\n        if (this.root !== node.root) {\n            return false;\n        }\n        const thisPath = this.getPath();\n        const nodePath = node.getPath();\n        const result = compareArrays(thisPath, nodePath);\n        switch (result) {\n            case 'prefix':\n                return true;\n            case 'extension':\n                return false;\n            default:\n                return thisPath[result] < nodePath[result];\n        }\n    }\n    /**\n     * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n     * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n     *\n     * @param {module:engine/model/node~Node} node Node to compare with.\n     * @returns {Boolean}\n     */\n    isAfter(node) {\n        // Given node is not before this node if they are same.\n        if (this == node) {\n            return false;\n        }\n        // Return `false` if it is impossible to compare nodes.\n        if (this.root !== node.root) {\n            return false;\n        }\n        // In other cases, just check if the `node` is before, and return the opposite.\n        return !this.isBefore(node);\n    }\n    /**\n     * Checks if the node has an attribute with given key.\n     *\n     * @param {String} key Key of attribute to check.\n     * @returns {Boolean} `true` if attribute with given key is set on node, `false` otherwise.\n     */\n    hasAttribute(key) {\n        return this._attrs.has(key);\n    }\n    /**\n     * Gets an attribute value for given key or `undefined` if that attribute is not set on node.\n     *\n     * @param {String} key Key of attribute to look for.\n     * @returns {*} Attribute value or `undefined`.\n     */\n    getAttribute(key) {\n        return this._attrs.get(key);\n    }\n    /**\n     * Returns iterator that iterates over this node's attributes.\n     *\n     * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n     * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n     *\n     * @returns {Iterable.<*>}\n     */\n    getAttributes() {\n        return this._attrs.entries();\n    }\n    /**\n     * Returns iterator that iterates over this node's attribute keys.\n     *\n     * @returns {Iterable.<String>}\n     */\n    getAttributeKeys() {\n        return this._attrs.keys();\n    }\n    /**\n     * Converts `Node` to plain object and returns it.\n     *\n     * @returns {Object} `Node` converted to plain object.\n     */\n    toJSON() {\n        const json = {};\n        // Serializes attributes to the object.\n        // attributes = { a: 'foo', b: 1, c: true }.\n        if (this._attrs.size) {\n            json.attributes = Array.from(this._attrs).reduce((result, attr) => {\n                result[attr[0]] = attr[1];\n                return result;\n            }, {});\n        }\n        return json;\n    }\n    /**\n     * Creates a copy of this node, that is a node with exactly same attributes, and returns it.\n     *\n     * @internal\n     * @protected\n     * @returns {module:engine/model/node~Node} Node with same attributes as this node.\n     */\n    _clone(_deep) {\n        return new Node(this._attrs);\n    }\n    /**\n     * Removes this node from it's parent.\n     *\n     * @internal\n     * @see module:engine/model/writer~Writer#remove\n     * @protected\n     */\n    _remove() {\n        this.parent._removeChildren(this.index);\n    }\n    /**\n     * Sets attribute on the node. If attribute with the same key already is set, it's value is overwritten.\n     *\n     * @see module:engine/model/writer~Writer#setAttribute\n     * @internal\n     * @protected\n     * @param {String} key Key of attribute to set.\n     * @param {*} value Attribute value.\n     */\n    _setAttribute(key, value) {\n        this._attrs.set(key, value);\n    }\n    /**\n     * Removes all attributes from the node and sets given attributes.\n     *\n     * @see module:engine/model/writer~Writer#setAttributes\n     * @internal\n     * @protected\n     * @param {Object} [attrs] Attributes to set. See {@link module:utils/tomap~toMap} for a list of accepted values.\n     */\n    _setAttributesTo(attrs) {\n        this._attrs = toMap(attrs);\n    }\n    /**\n     * Removes an attribute with given key from the node.\n     *\n     * @see module:engine/model/writer~Writer#removeAttribute\n     * @internal\n     * @protected\n     * @param {String} key Key of attribute to remove.\n     * @returns {Boolean} `true` if the attribute was set on the element, `false` otherwise.\n     */\n    _removeAttribute(key) {\n        return this._attrs.delete(key);\n    }\n    /**\n     * Removes all attributes from the node.\n     *\n     * @see module:engine/model/writer~Writer#clearAttributes\n     * @internal\n     * @protected\n     */\n    _clearAttributes() {\n        this._attrs.clear();\n    }\n}\n/**\n * Checks whether this object is of the given type.\n *\n * This method is useful when processing model objects that are of unknown type. For example, a function\n * may return a {@link module:engine/model/documentfragment~DocumentFragment} or a {@link module:engine/model/node~Node}\n * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n *\n *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n *\n * Since this method is also available on a range of view objects, you can prefix the type of the object with\n * `model:` or `view:` to check, for example, if this is the model's or view's element:\n *\n *\t\tmodelElement.is( 'model:element' ); // -> true\n *\t\tmodelElement.is( 'view:element' ); // -> false\n *\n * By using this method it is also possible to check a name of an element:\n *\n *\t\timageElement.is( 'element', 'imageBlock' ); // -> true\n *\t\timageElement.is( 'element', 'imageBlock' ); // -> same as above\n *\t\timageElement.is( 'model:element', 'imageBlock' ); // -> same as above, but more precise\n *\n * The list of model objects which implement the `is()` method:\n *\n * * {@link module:engine/model/node~Node#is `Node#is()`}\n * * {@link module:engine/model/text~Text#is `Text#is()`}\n * * {@link module:engine/model/element~Element#is `Element#is()`}\n * * {@link module:engine/model/rootelement~RootElement#is `RootElement#is()`}\n * * {@link module:engine/model/position~Position#is `Position#is()`}\n * * {@link module:engine/model/liveposition~LivePosition#is `LivePosition#is()`}\n * * {@link module:engine/model/range~Range#is `Range#is()`}\n * * {@link module:engine/model/liverange~LiveRange#is `LiveRange#is()`}\n * * {@link module:engine/model/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n * * {@link module:engine/model/selection~Selection#is `Selection#is()`}\n * * {@link module:engine/model/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n * * {@link module:engine/model/markercollection~Marker#is `Marker#is()`}\n * * {@link module:engine/model/textproxy~TextProxy#is `TextProxy#is()`}\n *\n * @method #is\n * @param {String} type Type to check.\n * @returns {Boolean}\n */\nNode.prototype.is = function (type) {\n    return type === 'node' || type === 'model:node';\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,KAAK,MAAM,qCAAqC;AACvD,OAAOC,aAAa,MAAM,6CAA6C;AACvE,OAAOC,aAAa,MAAM,6CAA6C;AACvE;AACA,OAAO,uCAAuC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,IAAI,SAASJ,aAAa,CAAC;EAC5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,WAAW,CAACC,KAAK,EAAE;IACf,KAAK,EAAE;IACP;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAGP,KAAK,CAACK,KAAK,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIG,QAAQ,GAAG;IACX,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,KAAK,GAAG;IACR,IAAIC,GAAG;IACP,IAAI,CAAC,IAAI,CAACJ,MAAM,EAAE;MACd,OAAO,IAAI;IACf;IACA,IAAI,CAACI,GAAG,GAAG,IAAI,CAACJ,MAAM,CAACK,aAAa,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE;MAClD,MAAM,IAAIV,aAAa,CAAC,gCAAgC,EAAE,IAAI,CAAC;IACnE;IACA,OAAOS,GAAG;EACd;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIE,WAAW,GAAG;IACd,IAAIF,GAAG;IACP,IAAI,CAAC,IAAI,CAACJ,MAAM,EAAE;MACd,OAAO,IAAI;IACf;IACA,IAAI,CAACI,GAAG,GAAG,IAAI,CAACJ,MAAM,CAACO,mBAAmB,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE;MACxD,MAA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ACjB,CAAC,EAAE,CAAC,CAAC,CAAC;IACV;IACA,OAAOY,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIO,MAAM,CAACC,KAAK,EAAE;IACV,OAAO,IAAIvD,IAAI,CAAC,IAAI,CAACI,MAAM,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIoD,OAAO,GAAG;IACN,IAAI,CAACrD,MAAM,CAACsD,eAAe,CAAC,IAAI,CAACnD,KAAK,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIoD,aAAa,CAACpB,GAAG,EAAEqB,KAAK,EAAE;IACtB,IAAI,CAACvD,MAAM,CAACwD,GAAG,CAACtB,GAAG,EAAEqB,KAAK,CAAC;EAC/B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,gBAAgB,CAAC3D,KAAK,EAAE;IACpB,IAAI,CAACE,MAAM,GAAGP,KAAK,CAACK,KAAK,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI4D,gBAAgB,CAACxB,GAAG,EAAE;IAClB,OAAO,IAAI,CAAClC,MAAM,CAAC2D,MAAM,CAACzB,GAAG,CAAC;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI0B,gBAAgB,GAAG;IACf,IAAI,CAAC5D,MAAM,CAAC6D,KAAK,EAAE;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjE,IAAI,CAACkE,SAAS,CAAChD,EAAE,GAAG,UAAUiD,IAAI,EAAE;EAChC,OAAOA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,YAAY;AACnD,CAAC"},"metadata":{},"sourceType":"module"}