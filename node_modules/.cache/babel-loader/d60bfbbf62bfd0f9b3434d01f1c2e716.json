{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/rawelement\n */\nimport Element from './element';\nimport Node from './node';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The raw element class.\n *\n * The raw elements work as data containers (\"wrappers\", \"sandboxes\") but their children are not managed or\n * even recognized by the editor. This encapsulation allows integrations to maintain custom DOM structures\n * in the editor content without, for instance, worrying about compatibility with other editor features.\n * Raw elements are a perfect tool for integration with external frameworks and data sources.\n *\n * Unlike {@link module:engine/view/uielement~UIElement UI elements}, raw elements act like real editor\n * content (similar to {@link module:engine/view/containerelement~ContainerElement} or\n * {@link module:engine/view/emptyelement~EmptyElement}), they are considered by the editor selection and\n * {@link module:widget/utils~toWidget they can work as widgets}.\n *\n * To create a new raw element, use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createRawElement `downcastWriter#createRawElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class RawElement extends Element {\n  /**\n   * Creates a new instance of a raw element.\n   *\n   * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} when the `children`\n   * parameter is passed to inform that the usage of `RawElement` is incorrect (adding child nodes to `RawElement` is forbidden).\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createRawElement\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n   * @param {String} name A node name.\n   * @param {Object|Iterable} [attrs] The collection of attributes.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into the created element.\n   */\n  constructor() {\n    super(...arguments);\n    /**\n     * Returns `null` because filler is not needed for raw elements.\n     *\n     * @method #getFillerOffset\n     * @returns {null} Always returns null.\n     */\n    this.getFillerOffset = getFillerOffset;\n  }\n  /**\n   * Overrides the {@link module:engine/view/element~Element#_insertChild} method.\n   * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} to prevent\n   * adding any child nodes to a raw element.\n   *\n   * @protected\n   */\n  _insertChild(index, items) {\n    if (items && (items instanceof Node || Array.from(items).length > 0)) {\n      /**\n       * Cannot add children to a {@link module:engine/view/rawelement~RawElement} instance.\n       *\n       * @error view-rawelement-cannot-add\n       */\n      throw new CKEditorError('view-rawelement-cannot-add', [this, items]);\n    }\n    return 0;\n  }\n  render() {}\n}\n/**\n * Checks whether this object is of the given type or name.\n *\n *\t\trawElement.is( 'rawElement' ); // -> true\n *\t\trawElement.is( 'element' ); // -> true\n *\t\trawElement.is( 'node' ); // -> true\n *\t\trawElement.is( 'view:rawElement' ); // -> true\n *\t\trawElement.is( 'view:element' ); // -> true\n *\t\trawElement.is( 'view:node' ); // -> true\n *\n *\t\trawElement.is( 'model:element' ); // -> false\n *\t\trawElement.is( 'documentFragment' ); // -> false\n *\n * Assuming that the object being checked is a raw element, you can also check its\n * {@link module:engine/view/rawelement~RawElement#name name}:\n *\n *\t\trawElement.is( 'img' ); // -> true if this is an img element\n *\t\trawElement.is( 'rawElement', 'img' ); // -> same as above\n *\t\ttext.is( 'img' ); -> false\n *\n * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n *\n * @param {String} type The type to check when the `name` parameter is present.\n * Otherwise, it acts like the `name` parameter.\n * @param {String} [name] The element name.\n * @returns {Boolean}\n */\nRawElement.prototype.is = function (type, name) {\n  if (!name) {\n    return type === 'rawElement' || type === 'view:rawElement' ||\n    // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n    type === this.name || type === 'view:' + this.name || type === 'element' || type === 'view:element' || type === 'node' || type === 'view:node';\n  } else {\n    return name === this.name && (type === 'rawElement' || type === 'view:rawElement' || type === 'element' || type === 'view:element');\n  }\n};\n// Returns `null` because block filler is not needed for raw elements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n  return null;\n}","map":{"version":3,"names":["Element","Node","CKEditorError","RawElement","constructor","getFillerOffset","_insertChild","index","items","Array","from","length","render","prototype","is","type","name"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/view/rawelement.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/rawelement\n */\nimport Element from './element';\nimport Node from './node';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The raw element class.\n *\n * The raw elements work as data containers (\"wrappers\", \"sandboxes\") but their children are not managed or\n * even recognized by the editor. This encapsulation allows integrations to maintain custom DOM structures\n * in the editor content without, for instance, worrying about compatibility with other editor features.\n * Raw elements are a perfect tool for integration with external frameworks and data sources.\n *\n * Unlike {@link module:engine/view/uielement~UIElement UI elements}, raw elements act like real editor\n * content (similar to {@link module:engine/view/containerelement~ContainerElement} or\n * {@link module:engine/view/emptyelement~EmptyElement}), they are considered by the editor selection and\n * {@link module:widget/utils~toWidget they can work as widgets}.\n *\n * To create a new raw element, use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createRawElement `downcastWriter#createRawElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class RawElement extends Element {\n    /**\n     * Creates a new instance of a raw element.\n     *\n     * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} when the `children`\n     * parameter is passed to inform that the usage of `RawElement` is incorrect (adding child nodes to `RawElement` is forbidden).\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createRawElement\n     * @protected\n     * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n     * @param {String} name A node name.\n     * @param {Object|Iterable} [attrs] The collection of attributes.\n     * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n     * A list of nodes to be inserted into the created element.\n     */\n    constructor(...args) {\n        super(...args);\n        /**\n         * Returns `null` because filler is not needed for raw elements.\n         *\n         * @method #getFillerOffset\n         * @returns {null} Always returns null.\n         */\n        this.getFillerOffset = getFillerOffset;\n    }\n    /**\n     * Overrides the {@link module:engine/view/element~Element#_insertChild} method.\n     * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} to prevent\n     * adding any child nodes to a raw element.\n     *\n     * @protected\n     */\n    _insertChild(index, items) {\n        if (items && (items instanceof Node || Array.from(items).length > 0)) {\n            /**\n             * Cannot add children to a {@link module:engine/view/rawelement~RawElement} instance.\n             *\n             * @error view-rawelement-cannot-add\n             */\n            throw new CKEditorError('view-rawelement-cannot-add', [this, items]);\n        }\n        return 0;\n    }\n    render() { }\n}\n/**\n * Checks whether this object is of the given type or name.\n *\n *\t\trawElement.is( 'rawElement' ); // -> true\n *\t\trawElement.is( 'element' ); // -> true\n *\t\trawElement.is( 'node' ); // -> true\n *\t\trawElement.is( 'view:rawElement' ); // -> true\n *\t\trawElement.is( 'view:element' ); // -> true\n *\t\trawElement.is( 'view:node' ); // -> true\n *\n *\t\trawElement.is( 'model:element' ); // -> false\n *\t\trawElement.is( 'documentFragment' ); // -> false\n *\n * Assuming that the object being checked is a raw element, you can also check its\n * {@link module:engine/view/rawelement~RawElement#name name}:\n *\n *\t\trawElement.is( 'img' ); // -> true if this is an img element\n *\t\trawElement.is( 'rawElement', 'img' ); // -> same as above\n *\t\ttext.is( 'img' ); -> false\n *\n * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n *\n * @param {String} type The type to check when the `name` parameter is present.\n * Otherwise, it acts like the `name` parameter.\n * @param {String} [name] The element name.\n * @returns {Boolean}\n */\nRawElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'rawElement' || type === 'view:rawElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === this.name || type === 'view:' + this.name ||\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'rawElement' || type === 'view:rawElement' ||\n            type === 'element' || type === 'view:element');\n    }\n};\n// Returns `null` because block filler is not needed for raw elements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n    return null;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,OAAO,MAAM,WAAW;AAC/B,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,aAAa,MAAM,6CAA6C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,UAAU,SAASH,OAAO,CAAC;EAC5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,WAAW,GAAU;IACjB,KAAK,CAAC,YAAO,CAAC;IACd;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAGA,eAAe;EAC1C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,YAAY,CAACC,KAAK,EAAEC,KAAK,EAAE;IACvB,IAAIA,KAAK,KAAKA,KAAK,YAAYP,IAAI,IAAIQ,KAAK,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,GAAG,CAAC,CAAC,EAAE;MAClE;AACZ;AACA;AACA;AACA;MACY,MAAM,IAAIT,aAAa,CAAC,4BAA4B,EAAE,CAAC,IAAI,EAAEM,KAAK,CAAC,CAAC;IACxE;IACA,OAAO,CAAC;EACZ;EACAI,MAAM,GAAG,CAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,UAAU,CAACU,SAAS,CAACC,EAAE,GAAG,UAAUC,IAAI,EAAEC,IAAI,EAAE;EAC5C,IAAI,CAACA,IAAI,EAAE;IACP,OAAOD,IAAI,KAAK,YAAY,IAAIA,IAAI,KAAK,iBAAiB;IACtD;IACAA,IAAI,KAAK,IAAI,CAACC,IAAI,IAAID,IAAI,KAAK,OAAO,GAAG,IAAI,CAACC,IAAI,IAClDD,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,cAAc,IAC7CA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,WAAW;EAC/C,CAAC,MACI;IACD,OAAOC,IAAI,KAAK,IAAI,CAACA,IAAI,KAAKD,IAAI,KAAK,YAAY,IAAIA,IAAI,KAAK,iBAAiB,IAC7EA,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,cAAc,CAAC;EACtD;AACJ,CAAC;AACD;AACA;AACA;AACA,SAASV,eAAe,GAAG;EACvB,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module"}