{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/renameoperation\n */\nimport Operation from './operation';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Position from '../position';\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RenameOperation extends Operation {\n  /**\n   * Creates an operation that changes element's name.\n   *\n   * @param {module:engine/model/position~Position} position Position before an element to change.\n   * @param {String} oldName Current name of the element.\n   * @param {String} newName New name for the element.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(position, oldName, newName, baseVersion) {\n    super(baseVersion);\n    /**\n     * Position before an element to change.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/renameoperation~RenameOperation#position\n     */\n    this.position = position;\n    // This position sticks to the next node because it is a position before the node that we want to change.\n    this.position.stickiness = 'toNext';\n    /**\n     * Current name of the element.\n     *\n     * @member {String} module:engine/model/operation/renameoperation~RenameOperation#oldName\n     */\n    this.oldName = oldName;\n    /**\n     * New name for the element.\n     *\n     * @member {String} module:engine/model/operation/renameoperation~RenameOperation#newName\n     */\n    this.newName = newName;\n  }\n  /**\n   * @inheritDoc\n   */\n  get type() {\n    return 'rename';\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/renameoperation~RenameOperation} Clone of this operation.\n   */\n  clone() {\n    return new RenameOperation(this.position.clone(), this.oldName, this.newName, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/renameoperation~RenameOperation}\n   */\n  getReversed() {\n    return new RenameOperation(this.position.clone(), this.newName, this.oldName, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   * @internal\n   */\n  _validate() {\n    const element = this.position.nodeAfter;\n    if (!(element instanceof Element)) {\n      /**\n       * Given position is invalid or node after it is not instance of Element.\n       *\n       * @error rename-operation-wrong-position\n       */\n      throw new CKEditorError('rename-operation-wrong-position', this);\n    } else if (element.name !== this.oldName) {\n      /**\n       * Element to change has different name than operation's old name.\n       *\n       * @error rename-operation-wrong-name\n       */\n      throw new CKEditorError('rename-operation-wrong-name', this);\n    }\n  }\n  /**\n   * @inheritDoc\n   * @internal\n   */\n  _execute() {\n    const element = this.position.nodeAfter;\n    element.name = this.newName;\n  }\n  /**\n   * @inheritDoc\n   */\n  toJSON() {\n    const json = super.toJSON();\n    json.position = this.position.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n  static get className() {\n    return 'RenameOperation';\n  }\n  /**\n   * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n   */\n  static fromJSON(json, document) {\n    return new RenameOperation(Position.fromJSON(json.position, document), json.oldName, json.newName, json.baseVersion);\n  }\n}","map":{"version":3,"names":["Operation","Element","CKEditorError","Position","RenameOperation","constructor","position","oldName","newName","baseVersion","stickiness","type","clone","getReversed","_validate","element","nodeAfter","name","_execute","toJSON","json","className","fromJSON","document"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/renameoperation.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/renameoperation\n */\nimport Operation from './operation';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Position from '../position';\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RenameOperation extends Operation {\n    /**\n     * Creates an operation that changes element's name.\n     *\n     * @param {module:engine/model/position~Position} position Position before an element to change.\n     * @param {String} oldName Current name of the element.\n     * @param {String} newName New name for the element.\n     * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(position, oldName, newName, baseVersion) {\n        super(baseVersion);\n        /**\n         * Position before an element to change.\n         *\n         * @member {module:engine/model/position~Position} module:engine/model/operation/renameoperation~RenameOperation#position\n         */\n        this.position = position;\n        // This position sticks to the next node because it is a position before the node that we want to change.\n        this.position.stickiness = 'toNext';\n        /**\n         * Current name of the element.\n         *\n         * @member {String} module:engine/model/operation/renameoperation~RenameOperation#oldName\n         */\n        this.oldName = oldName;\n        /**\n         * New name for the element.\n         *\n         * @member {String} module:engine/model/operation/renameoperation~RenameOperation#newName\n         */\n        this.newName = newName;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'rename';\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @returns {module:engine/model/operation/renameoperation~RenameOperation} Clone of this operation.\n     */\n    clone() {\n        return new RenameOperation(this.position.clone(), this.oldName, this.newName, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     *\n     * @returns {module:engine/model/operation/renameoperation~RenameOperation}\n     */\n    getReversed() {\n        return new RenameOperation(this.position.clone(), this.newName, this.oldName, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        const element = this.position.nodeAfter;\n        if (!(element instanceof Element)) {\n            /**\n             * Given position is invalid or node after it is not instance of Element.\n             *\n             * @error rename-operation-wrong-position\n             */\n            throw new CKEditorError('rename-operation-wrong-position', this);\n        }\n        else if (element.name !== this.oldName) {\n            /**\n             * Element to change has different name than operation's old name.\n             *\n             * @error rename-operation-wrong-name\n             */\n            throw new CKEditorError('rename-operation-wrong-name', this);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        const element = this.position.nodeAfter;\n        element.name = this.newName;\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.position = this.position.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'RenameOperation';\n    }\n    /**\n     * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param {Object} json Deserialized JSON object.\n     * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n     * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n     */\n    static fromJSON(json, document) {\n        return new RenameOperation(Position.fromJSON(json.position, document), json.oldName, json.newName, json.baseVersion);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAS,MAAM,aAAa;AACnC,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,aAAa,MAAM,6CAA6C;AACvE,OAAOC,QAAQ,MAAM,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,eAAe,SAASJ,SAAS,CAAC;EACnD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,WAAW,CAACC,QAAQ,EAAEC,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAE;IACjD,KAAK,CAACA,WAAW,CAAC;IAClB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxB;IACA,IAAI,CAACA,QAAQ,CAACI,UAAU,GAAG,QAAQ;IACnC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACH,OAAO,GAAGA,OAAO;IACtB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;EACA;AACJ;AACA;EACI,IAAIG,IAAI,GAAG;IACP,OAAO,QAAQ;EACnB;EACA;AACJ;AACA;AACA;AACA;EACIC,KAAK,GAAG;IACJ,OAAO,IAAIR,eAAe,CAAC,IAAI,CAACE,QAAQ,CAACM,KAAK,EAAE,EAAE,IAAI,CAACL,OAAO,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACC,WAAW,CAAC;EACnG;EACA;AACJ;AACA;AACA;AACA;EACII,WAAW,GAAG;IACV,OAAO,IAAIT,eAAe,CAAC,IAAI,CAACE,QAAQ,CAACM,KAAK,EAAE,EAAE,IAAI,CAACJ,OAAO,EAAE,IAAI,CAACD,OAAO,EAAE,IAAI,CAACE,WAAW,GAAG,CAAC,CAAC;EACvG;EACA;AACJ;AACA;AACA;EACIK,SAAS,GAAG;IACR,MAAMC,OAAO,GAAG,IAAI,CAACT,QAAQ,CAACU,SAAS;IACvC,IAAI,EAAED,OAAO,YAAYd,OAAO,CAAC,EAAE;MAC/B;AACZ;AACA;AACA;AACA;MACY,MAAM,IAAIC,aAAa,CAAC,iCAAiC,EAAE,IAAI,CAAC;IACpE,CAAC,MACI,IAAIa,OAAO,CAACE,IAAI,KAAK,IAAI,CAACV,OAAO,EAAE;MACpC;AACZ;AACA;AACA;AACA;MACY,MAAM,IAAIL,aAAa,CAAC,6BAA6B,EAAE,IAAI,CAAC;IAChE;EACJ;EACA;AACJ;AACA;AACA;EACIgB,QAAQ,GAAG;IACP,MAAMH,OAAO,GAAG,IAAI,CAACT,QAAQ,CAACU,SAAS;IACvCD,OAAO,CAACE,IAAI,GAAG,IAAI,CAACT,OAAO;EAC/B;EACA;AACJ;AACA;EACIW,MAAM,GAAG;IACL,MAAMC,IAAI,GAAG,KAAK,CAACD,MAAM,EAAE;IAC3BC,IAAI,CAACd,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACa,MAAM,EAAE;IACtC,OAAOC,IAAI;EACf;EACA;AACJ;AACA;EACI,WAAWC,SAAS,GAAG;IACnB,OAAO,iBAAiB;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,QAAQ,CAACF,IAAI,EAAEG,QAAQ,EAAE;IAC5B,OAAO,IAAInB,eAAe,CAACD,QAAQ,CAACmB,QAAQ,CAACF,IAAI,CAACd,QAAQ,EAAEiB,QAAQ,CAAC,EAAEH,IAAI,CAACb,OAAO,EAAEa,IAAI,CAACZ,OAAO,EAAEY,IAAI,CAACX,WAAW,CAAC;EACxH;AACJ"},"metadata":{},"sourceType":"module"}