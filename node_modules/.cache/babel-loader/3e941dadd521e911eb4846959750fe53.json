{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/splicearray\n */\nconst BIG_CHUNK_SIZE = 10000;\n/**\n * Splices one array into another. To be used instead of `Array.prototype.splice` as the latter may\n * throw \"Maximum call stack size exceeded\" when passed huge number of items to insert.\n *\n * Note: in contrary to Array.splice, this function does not modify the original `target`.\n *\n * \t\tspliceArray( [ 1, 2 ], [ 3, 4 ], 0, 0 );\t\t// [ 3, 4, 1, 2 ]\n * \t\tspliceArray( [ 1, 2 ], [ 3, 4 ], 1, 1 );\t\t// [ 1, 3, 4 ]\n * \t\tspliceArray( [ 1, 2 ], [ 3, 4 ], 1, 0 );\t\t// [ 1, 3, 4, 2 ]\n * \t\tspliceArray( [ 1, 2 ], [ 3, 4 ], 2, 0 );\t\t// [ 1, 2, 3, 4 ]\n * \t\tspliceArray( [ 1, 2 ], [], 0, 1 );\t\t\t\t// [ 2 ]\n *\n * @private\n * @param {Array} target Array to be spliced.\n * @param {Array} source Array of elements to be inserted to target.\n * @param {Number} start Index at which nodes should be inserted/removed.\n * @param {Number} count Number of items.\n *\n * @returns {Array} New spliced array.\n */\nexport default function spliceArray(target, source, start, count) {\n  // In case of performance problems, see: https://github.com/ckeditor/ckeditor5/pull/12429/files#r965850568\n  if (Math.max(source.length, target.length) > BIG_CHUNK_SIZE) {\n    return target.slice(0, start).concat(source).concat(target.slice(start + count, target.length));\n  } else {\n    const newTarget = Array.from(target);\n    newTarget.splice(start, count, ...source);\n    return newTarget;\n  }\n}","map":{"version":3,"names":["BIG_CHUNK_SIZE","spliceArray","target","source","start","count","Math","max","length","slice","concat","newTarget","Array","from","splice"],"sources":["C:/data/project/realproject/node_modules/@ckeditor/ckeditor5-utils/src/splicearray.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/splicearray\n */\nconst BIG_CHUNK_SIZE = 10000;\n/**\n * Splices one array into another. To be used instead of `Array.prototype.splice` as the latter may\n * throw \"Maximum call stack size exceeded\" when passed huge number of items to insert.\n *\n * Note: in contrary to Array.splice, this function does not modify the original `target`.\n *\n * \t\tspliceArray( [ 1, 2 ], [ 3, 4 ], 0, 0 );\t\t// [ 3, 4, 1, 2 ]\n * \t\tspliceArray( [ 1, 2 ], [ 3, 4 ], 1, 1 );\t\t// [ 1, 3, 4 ]\n * \t\tspliceArray( [ 1, 2 ], [ 3, 4 ], 1, 0 );\t\t// [ 1, 3, 4, 2 ]\n * \t\tspliceArray( [ 1, 2 ], [ 3, 4 ], 2, 0 );\t\t// [ 1, 2, 3, 4 ]\n * \t\tspliceArray( [ 1, 2 ], [], 0, 1 );\t\t\t\t// [ 2 ]\n *\n * @private\n * @param {Array} target Array to be spliced.\n * @param {Array} source Array of elements to be inserted to target.\n * @param {Number} start Index at which nodes should be inserted/removed.\n * @param {Number} count Number of items.\n *\n * @returns {Array} New spliced array.\n */\nexport default function spliceArray(target, source, start, count) {\n    // In case of performance problems, see: https://github.com/ckeditor/ckeditor5/pull/12429/files#r965850568\n    if (Math.max(source.length, target.length) > BIG_CHUNK_SIZE) {\n        return target.slice(0, start).concat(source).concat(target.slice(start + count, target.length));\n    }\n    else {\n        const newTarget = Array.from(target);\n        newTarget.splice(start, count, ...source);\n        return newTarget;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAG,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,WAAW,CAACC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAC9D;EACA,IAAIC,IAAI,CAACC,GAAG,CAACJ,MAAM,CAACK,MAAM,EAAEN,MAAM,CAACM,MAAM,CAAC,GAAGR,cAAc,EAAE;IACzD,OAAOE,MAAM,CAACO,KAAK,CAAC,CAAC,EAAEL,KAAK,CAAC,CAACM,MAAM,CAACP,MAAM,CAAC,CAACO,MAAM,CAACR,MAAM,CAACO,KAAK,CAACL,KAAK,GAAGC,KAAK,EAAEH,MAAM,CAACM,MAAM,CAAC,CAAC;EACnG,CAAC,MACI;IACD,MAAMG,SAAS,GAAGC,KAAK,CAACC,IAAI,CAACX,MAAM,CAAC;IACpCS,SAAS,CAACG,MAAM,CAACV,KAAK,EAAEC,KAAK,EAAE,GAAGF,MAAM,CAAC;IACzC,OAAOQ,SAAS;EACpB;AACJ"},"metadata":{},"sourceType":"module"}